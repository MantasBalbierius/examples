!function(e){function n(n){for(var r,a,l=n[0],s=n[1],c=n[2],f=0,p=[];f<l.length;f++)a=l[f],o[a]&&p.push(o[a][0]),o[a]=0;for(r in s)Object.prototype.hasOwnProperty.call(s,r)&&(e[r]=s[r]);for(u&&u(n);p.length;)p.shift()();return i.push.apply(i,c||[]),t()}function t(){for(var e,n=0;n<i.length;n++){for(var t=i[n],r=!0,l=1;l<t.length;l++){var s=t[l];0!==o[s]&&(r=!1)}r&&(i.splice(n--,1),e=a(a.s=t[0]))}return e}var r={},o={0:0},i=[];function a(n){if(r[n])return r[n].exports;var t=r[n]={i:n,l:!1,exports:{}};return e[n].call(t.exports,t,t.exports,a),t.l=!0,t.exports}a.m=e,a.c=r,a.d=function(e,n,t){a.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,n){if(1&n&&(e=a(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(a.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)a.d(t,r,function(n){return e[n]}.bind(null,r));return t},a.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(n,"a",n),n},a.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},a.p="";var l=window.webpackJsonp=window.webpackJsonp||[],s=l.push.bind(l);l.push=n,l=l.slice();for(var c=0;c<l.length;c++)n(l[c]);var u=s;i.push([96,1]),t()}({100:function(e,n,t){var r=t(101);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};t(16)(r,o);r.locals&&(e.exports=r.locals)},101:function(e,n){e.exports='@import url("https://fonts.googleapis.com/css?family=Roboto");\nhtml {\n  height: 100%; }\n\nhtml,\nbody {\n  min-height: 100%; }\n\nbody {\n  background: #191c86;\n  display: flex;\n  flex-direction: column; }\n\n.example-container {\n  padding: 20px;\n  color: white;\n  font-family: "Roboto", sans-serif; }\n  .example-container h2 {\n    padding-bottom: 20px; }\n'},102:function(e,n,t){var r=t(103);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};t(16)(r,o);r.locals&&(e.exports=r.locals)},103:function(e,n){e.exports='.loader {\n  position: relative;\n  box-sizing: border-box;\n  display: inline-block;\n  height: 32px;\n  width: 32px;\n  -webkit-animation: spinner-reveal 1.4s steps(1, end) infinite, spinner-rotation 1.4s ease-in-out infinite;\n          animation: spinner-reveal 1.4s steps(1, end) infinite, spinner-rotation 1.4s ease-in-out infinite;\n  -webkit-clip-path: inset(0 0 0 50%);\n          clip-path: inset(0 0 0 50%); }\n  .loader.big {\n    height: 64px;\n    width: 64px; }\n  .loader::before, .loader::after {\n    box-sizing: border-box;\n    content: "";\n    width: 100%;\n    height: 100%;\n    border: 2px solid #ffffff;\n    border-radius: 50%;\n    position: absolute;\n    top: 0;\n    left: 0;\n    -webkit-clip-path: inset(0 50% 0 0);\n            clip-path: inset(0 50% 0 0);\n    -webkit-animation: spinner-rotation-a 1.4s linear infinite;\n            animation: spinner-rotation-a 1.4s linear infinite;\n    transition: border-color 0.5s ease-out; }\n  .loader::after {\n    -webkit-animation-name: spinner-rotation-b;\n            animation-name: spinner-rotation-b; }\n\n/***\r\n   * Animations\r\n   */\n@-webkit-keyframes spinner-rotation {\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg); } }\n@keyframes spinner-rotation {\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg); } }\n\n@-webkit-keyframes spinner-rotation-a {\n  40%,\n  60% {\n    -webkit-transform: rotate(180deg);\n            transform: rotate(180deg); }\n  100% {\n    -webkit-transform: rotate(540deg);\n            transform: rotate(540deg); } }\n\n@keyframes spinner-rotation-a {\n  40%,\n  60% {\n    -webkit-transform: rotate(180deg);\n            transform: rotate(180deg); }\n  100% {\n    -webkit-transform: rotate(540deg);\n            transform: rotate(540deg); } }\n\n@-webkit-keyframes spinner-rotation-b {\n  40% {\n    -webkit-transform: rotate(180deg);\n            transform: rotate(180deg); }\n  80% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg); }\n  100% {\n    -webkit-transform: rotate(540deg);\n            transform: rotate(540deg); } }\n\n@keyframes spinner-rotation-b {\n  40% {\n    -webkit-transform: rotate(180deg);\n            transform: rotate(180deg); }\n  80% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg); }\n  100% {\n    -webkit-transform: rotate(540deg);\n            transform: rotate(540deg); } }\n\n@-webkit-keyframes spinner-reveal {\n  40% {\n    -webkit-clip-path: inset(0 0 0 0);\n            clip-path: inset(0 0 0 0); }\n  80% {\n    -webkit-clip-path: inset(0 50% 0 0);\n            clip-path: inset(0 50% 0 0); } }\n\n@keyframes spinner-reveal {\n  40% {\n    -webkit-clip-path: inset(0 0 0 0);\n            clip-path: inset(0 0 0 0); }\n  80% {\n    -webkit-clip-path: inset(0 50% 0 0);\n            clip-path: inset(0 50% 0 0); } }\n'},173:function(e,n,t){"use strict";var r=this&&this.__awaiter||function(e,n,t,r){return new(t||(t=Promise))(function(o,i){function a(e){try{s(r.next(e))}catch(e){i(e)}}function l(e){try{s(r.throw(e))}catch(e){i(e)}}function s(e){e.done?o(e.value):new t(function(n){n(e.value)}).then(a,l)}s((r=r.apply(e,n||[])).next())})},o=this&&this.__generator||function(e,n){var t,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(i){return function(l){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;a;)try{if(t=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=n.call(e,a)}catch(e){i=[6,e],r=0}finally{t=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,l])}}};Object.defineProperty(n,"__esModule",{value:!0}),t(24);var i=t(75);t(76),n.run=function(e,n){return r(this,void 0,Promise,function(){var t;return o(this,function(r){switch(r.label){case 0:return console.info("Image example."),e.className="image-example",e.innerHTML='<div class="loader" />',[4,n.openStream({src:"https://noia.network/samples/image.jpg"})];case 1:return[4,r.sent().getAllBytes()];case 2:return t=r.sent(),console.info("Image downloaded ("+t.length+" bytes)"),e.innerHTML='<img src="data:image/jpeg;base64,'+i.bytesToBase64(t)+'" />',[2]}})})}},174:function(e,n){e.exports=".image-example {\n  max-width: 400px; }\n"},175:function(e,n,t){"use strict";var r,o=this&&this.__extends||(r=function(e,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t])})(e,n)},function(e,n){function t(){this.constructor=e}r(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)}),i=this&&this.__awaiter||function(e,n,t,r){return new(t||(t=Promise))(function(o,i){function a(e){try{s(r.next(e))}catch(e){i(e)}}function l(e){try{s(r.throw(e))}catch(e){i(e)}}function s(e){e.done?o(e.value):new t(function(n){n(e.value)}).then(a,l)}s((r=r.apply(e,n||[])).next())})},a=this&&this.__generator||function(e,n){var t,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(i){return function(l){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;a;)try{if(t=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=n.call(e,a)}catch(e){i=[6,e],r=0}finally{t=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,l])}}};Object.defineProperty(n,"__esModule",{value:!0});var l=t(1),s=t(32),c=t(25),u=t(78),f=t(52),p=t(53);t(24),t(76);var d=new c.NoiaClient({logger:void 0,pieceWorkerConstructor:function(){return new f},sha1WorkerConstructor:function(){return new p}});c.NoiaClientContainer.initialize(d);var h=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return o(n,e),n.prototype.render=function(){return l.createElement("div",{className:"image-example"},l.createElement(u.Image,{src:"https://noia.network/samples/image.jpg",loaderComponent:l.createElement("div",{className:"loader"})}))},n}(l.Component);n.ExampleView=h,n.run=function(e){return i(this,void 0,Promise,function(){return a(this,function(n){return console.info("Image with React example."),s.render(l.createElement(h,{noiaClient:d}),e),[2]})})}},184:function(e,n,t){"use strict";var r=this&&this.__awaiter||function(e,n,t,r){return new(t||(t=Promise))(function(o,i){function a(e){try{s(r.next(e))}catch(e){i(e)}}function l(e){try{s(r.throw(e))}catch(e){i(e)}}function s(e){e.done?o(e.value):new t(function(n){n(e.value)}).then(a,l)}s((r=r.apply(e,n||[])).next())})},o=this&&this.__generator||function(e,n){var t,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(i){return function(l){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;a;)try{if(t=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=n.call(e,a)}catch(e){i=[6,e],r=0}finally{t=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,l])}}};Object.defineProperty(n,"__esModule",{value:!0});var i=t(185),a=t(223),l=t(224);t(95),n.run=function(e,n){return r(this,void 0,Promise,function(){var t,s,c,u=this;return o(this,function(f){switch(f.label){case 0:return console.info("Video example."),e.className="video-example",e.innerHTML='<div class="loader" />',[4,n.openStream({src:"https://noia.network/samples/video.mp4"})];case 1:return(t=f.sent()).bufferBytes({start:0,length:t.masterData.metadata.bufferLength/10}),s={name:"video.mp4",length:t.masterData.metadata.bufferLength,createReadStream:function(e){void 0===e&&(e={});var n=e.start||0,i=e.end||t.masterData.metadata.bufferLength-1,l=n;return a(function(e,n){return r(u,void 0,void 0,function(){var r,a,s;return o(this,function(o){switch(o.label){case 0:for(r=t.getBytes({start:l,length:e}),a=0;a<50;a++)t.getBytes({start:l+e*a,length:e});return[4,r];case 1:return s=o.sent(),l+=e,n(null,s),l>i&&n(null,null),[2]}})})})}},(c=document.createElement("video")).controls=!0,e.innerHTML="",e.append(c),i.render(s,c,{},function(e,n){if(e)return console.error(e.message);l.logger.Debug("Rendered element with the media in it.",n)}),[2]}})})}},191:function(e,n){},193:function(e,n){},204:function(e,n){},217:function(e,n){},219:function(e,n){},224:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=t(39),o=t(56);n.logger=new r.LoggerBuilder({DefaultLogLevel:{LogLevel:r.LogLevel.Trace,LogLevelIsBitMask:!1},WriteMessageHandlers:[{Handler:new o.ConsoleMessageHandler,LogLevel:r.LogLevel.Critical|r.LogLevel.Debug|r.LogLevel.Information|r.LogLevel.Error|r.LogLevel.Trace|r.LogLevel.Warning,LogLevelIsBitMask:!0}]})},225:function(e,n){e.exports=".video-example {\n  max-width: 400px; }\n"},226:function(e,n,t){"use strict";var r,o=this&&this.__extends||(r=function(e,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t])})(e,n)},function(e,n){function t(){this.constructor=e}r(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)}),i=this&&this.__awaiter||function(e,n,t,r){return new(t||(t=Promise))(function(o,i){function a(e){try{s(r.next(e))}catch(e){i(e)}}function l(e){try{s(r.throw(e))}catch(e){i(e)}}function s(e){e.done?o(e.value):new t(function(n){n(e.value)}).then(a,l)}s((r=r.apply(e,n||[])).next())})},a=this&&this.__generator||function(e,n){var t,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(i){return function(l){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;a;)try{if(t=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=n.call(e,a)}catch(e){i=[6,e],r=0}finally{t=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,l])}}};Object.defineProperty(n,"__esModule",{value:!0});var l=t(1),s=t(32),c=t(25),u=t(78),f=t(52),p=t(53);t(24),t(95);var d=new c.NoiaClient({logger:void 0,pieceWorkerConstructor:function(){return new f},sha1WorkerConstructor:function(){return new p}});c.NoiaClientContainer.initialize(d);var h=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return o(n,e),n.prototype.render=function(){return l.createElement("div",{className:"video-example"},l.createElement(u.Video,{controls:!0,loop:!0,src:"https://noia.network/samples/video.mp4",mimeType:"video/mp4",loaderComponent:l.createElement("div",{className:"loader"})}))},n}(l.Component);n.ExampleView=h,n.run=function(e){return i(this,void 0,Promise,function(){return a(this,function(n){return console.info("Video with React example."),s.render(l.createElement(h,{noiaClient:d}),e),[2]})})}},227:function(e,n,t){"use strict";var r,o=this&&this.__extends||(r=function(e,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t])})(e,n)},function(e,n){function t(){this.constructor=e}r(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)}),i=this&&this.__awaiter||function(e,n,t,r){return new(t||(t=Promise))(function(o,i){function a(e){try{s(r.next(e))}catch(e){i(e)}}function l(e){try{s(r.throw(e))}catch(e){i(e)}}function s(e){e.done?o(e.value):new t(function(n){n(e.value)}).then(a,l)}s((r=r.apply(e,n||[])).next())})},a=this&&this.__generator||function(e,n){var t,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(i){return function(l){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;a;)try{if(t=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=n.call(e,a)}catch(e){i=[6,e],r=0}finally{t=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,l])}}};Object.defineProperty(n,"__esModule",{value:!0});var l=t(1),s=t(32),c=t(228),u=t(75);t(24),t(256);var f=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return o(n,e),n.prototype.render=function(){return l.createElement(c,{url:this.props.url,modelColor:"#808080",cameraX:180})},n}(l.Component);n.run=function(e,n){return i(this,void 0,Promise,function(){var t;return a(this,function(r){switch(r.label){case 0:return console.info("Models example."),e.className="models-example",e.innerHTML='<div class="loader" />',[4,n.openStream({src:"https://noia.network/samples/model.bin"})];case 1:return[4,r.sent().getAllBytes()];case 2:return t=r.sent(),console.info("Model downloaded ("+t.length+" bytes)"),s.render(l.createElement(f,{url:"data:application/sla;base64,"+u.bytesToBase64(t)}),e),[2]}})})}},256:function(e,n,t){var r=t(257);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};t(16)(r,o);r.locals&&(e.exports=r.locals)},257:function(e,n){e.exports=".image-example img {\n  max-width: 400px; }\n"},75:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.bytesToBase64=function(e){for(var n,t="",r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",o=new Uint8Array(e),i=o.byteLength,a=i%3,l=i-a,s=0;s<l;s+=3)t+=r[(16515072&(n=o[s]<<16|o[s+1]<<8|o[s+2]))>>18]+r[(258048&n)>>12]+r[(4032&n)>>6]+r[63&n];return 1==a?t+=r[(252&(n=o[l]))>>2]+r[(3&n)<<4]+"==":2==a&&(t+=r[(64512&(n=o[l]<<8|o[l+1]))>>10]+r[(1008&n)>>4]+r[(15&n)<<2]+"="),t}},76:function(e,n,t){var r=t(174);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};t(16)(r,o);r.locals&&(e.exports=r.locals)},95:function(e,n,t){var r=t(225);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};t(16)(r,o);r.locals&&(e.exports=r.locals)},96:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),t(97),t(100),t(102),t(24);var r=t(25),o=t(52),i=t(53),a=t(173),l=t(175),s=t(184),c=t(226),u=t(227);function f(e,n){var t=document.getElementById("root"),r=document.createElement("div");r.id=e,r.className="example-container",r.innerHTML="<h2>"+n+"</h2>";var o=document.createElement("div");return r.appendChild(o),t.appendChild(r),o}n.createExampleContainer=f,r.NoiaClientContainer.initialize(new r.NoiaClient({logger:void 0,pieceWorkerConstructor:function(){return new o},sha1WorkerConstructor:function(){return new i}})),document.addEventListener("DOMContentLoaded",function(){a.run(f("image","Image example"),r.NoiaClientContainer.getClient()),l.run(f("image","React Image component example")),s.run(f("video","Video example (stream, 1/10th pre-buffer)"),r.NoiaClientContainer.getClient()),c.run(f("video","React Video component example (full download)")),u.run(f("models","Models example"),r.NoiaClientContainer.getClient())})},97:function(e,n,t){var r=t(98);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};t(16)(r,o);r.locals&&(e.exports=r.locals)},98:function(e,n){e.exports="/* http://meyerweb.com/eric/tools/css/reset/ \r\n   v2.0 | 20110126\r\n   License: none (public domain)\r\n*/\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline; }\n\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, menu, nav, section {\n  display: block; }\n\nbody {\n  line-height: 1; }\n\nol, ul {\n  list-style: none; }\n\nblockquote, q {\n  quotes: none; }\n\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none; }\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0; }\n\n* {\n  box-sizing: border-box; }\n"}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,