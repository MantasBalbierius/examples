!function(t){var r={};function e(n){if(r[n])return r[n].exports;var i=r[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,e),i.l=!0,i.exports}e.m=t,e.c=r,e.d=function(t,r,n){e.o(t,r)||Object.defineProperty(t,r,{enumerable:!0,get:n})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,r){if(1&r&&(t=e(t)),8&r)return t;if(4&r&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(e.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&r&&"string"!=typeof t)for(var i in t)e.d(n,i,function(r){return t[r]}.bind(null,i));return n},e.n=function(t){var r=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(r,"a",r),r},e.o=function(t,r){return Object.prototype.hasOwnProperty.call(t,r)},e.p="",e(e.s=5)}([function(t,r){var e={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==e.call(t)}},function(t,r){r.read=function(t,r,e,n,i){var o,u,f=8*i-n-1,s=(1<<f)-1,a=s>>1,h=-7,c=e?i-1:0,l=e?-1:1,p=t[r+c];for(c+=l,o=p&(1<<-h)-1,p>>=-h,h+=f;h>0;o=256*o+t[r+c],c+=l,h-=8);for(u=o&(1<<-h)-1,o>>=-h,h+=n;h>0;u=256*u+t[r+c],c+=l,h-=8);if(0===o)o=1-a;else{if(o===s)return u?NaN:1/0*(p?-1:1);u+=Math.pow(2,n),o-=a}return(p?-1:1)*u*Math.pow(2,o-n)},r.write=function(t,r,e,n,i,o){var u,f,s,a=8*o-i-1,h=(1<<a)-1,c=h>>1,l=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,p=n?0:o-1,g=n?1:-1,y=r<0||0===r&&1/r<0?1:0;for(r=Math.abs(r),isNaN(r)||r===1/0?(f=isNaN(r)?1:0,u=h):(u=Math.floor(Math.log(r)/Math.LN2),r*(s=Math.pow(2,-u))<1&&(u--,s*=2),(r+=u+c>=1?l/s:l*Math.pow(2,1-c))*s>=2&&(u++,s/=2),u+c>=h?(f=0,u=h):u+c>=1?(f=(r*s-1)*Math.pow(2,i),u+=c):(f=r*Math.pow(2,c-1)*Math.pow(2,i),u=0));i>=8;t[e+p]=255&f,p+=g,f/=256,i-=8);for(u=u<<i|f,a+=i;a>0;t[e+p]=255&u,p+=g,u/=256,a-=8);t[e+p-g]|=128*y}},function(t,r,e){"use strict";r.byteLength=function(t){var r=a(t),e=r[0],n=r[1];return 3*(e+n)/4-n},r.toByteArray=function(t){for(var r,e=a(t),n=e[0],u=e[1],f=new o(function(t,r,e){return 3*(r+e)/4-e}(0,n,u)),s=0,h=u>0?n-4:n,c=0;c<h;c+=4)r=i[t.charCodeAt(c)]<<18|i[t.charCodeAt(c+1)]<<12|i[t.charCodeAt(c+2)]<<6|i[t.charCodeAt(c+3)],f[s++]=r>>16&255,f[s++]=r>>8&255,f[s++]=255&r;2===u&&(r=i[t.charCodeAt(c)]<<2|i[t.charCodeAt(c+1)]>>4,f[s++]=255&r);1===u&&(r=i[t.charCodeAt(c)]<<10|i[t.charCodeAt(c+1)]<<4|i[t.charCodeAt(c+2)]>>2,f[s++]=r>>8&255,f[s++]=255&r);return f},r.fromByteArray=function(t){for(var r,e=t.length,i=e%3,o=[],u=0,f=e-i;u<f;u+=16383)o.push(c(t,u,u+16383>f?f:u+16383));1===i?(r=t[e-1],o.push(n[r>>2]+n[r<<4&63]+"==")):2===i&&(r=(t[e-2]<<8)+t[e-1],o.push(n[r>>10]+n[r>>4&63]+n[r<<2&63]+"="));return o.join("")};for(var n=[],i=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,u="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",f=0,s=u.length;f<s;++f)n[f]=u[f],i[u.charCodeAt(f)]=f;function a(t){var r=t.length;if(r%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var e=t.indexOf("=");return-1===e&&(e=r),[e,e===r?0:4-e%4]}function h(t){return n[t>>18&63]+n[t>>12&63]+n[t>>6&63]+n[63&t]}function c(t,r,e){for(var n,i=[],o=r;o<e;o+=3)n=(t[o]<<16&16711680)+(t[o+1]<<8&65280)+(255&t[o+2]),i.push(h(n));return i.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(t,r){var e;e=function(){return this}();try{e=e||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(e=window)}t.exports=e},function(t,r,e){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var n=e(2),i=e(1),o=e(0);function u(){return s.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function f(t,r){if(u()<r)throw new RangeError("Invalid typed array length");return s.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(r)).__proto__=s.prototype:(null===t&&(t=new s(r)),t.length=r),t}function s(t,r,e){if(!(s.TYPED_ARRAY_SUPPORT||this instanceof s))return new s(t,r,e);if("number"==typeof t){if("string"==typeof r)throw new Error("If encoding is specified then the first argument must be a string");return c(this,t)}return a(this,t,r,e)}function a(t,r,e,n){if("number"==typeof r)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&r instanceof ArrayBuffer?function(t,r,e,n){if(r.byteLength,e<0||r.byteLength<e)throw new RangeError("'offset' is out of bounds");if(r.byteLength<e+(n||0))throw new RangeError("'length' is out of bounds");r=void 0===e&&void 0===n?new Uint8Array(r):void 0===n?new Uint8Array(r,e):new Uint8Array(r,e,n);s.TYPED_ARRAY_SUPPORT?(t=r).__proto__=s.prototype:t=l(t,r);return t}(t,r,e,n):"string"==typeof r?function(t,r,e){"string"==typeof e&&""!==e||(e="utf8");if(!s.isEncoding(e))throw new TypeError('"encoding" must be a valid string encoding');var n=0|g(r,e),i=(t=f(t,n)).write(r,e);i!==n&&(t=t.slice(0,i));return t}(t,r,e):function(t,r){if(s.isBuffer(r)){var e=0|p(r.length);return 0===(t=f(t,e)).length?t:(r.copy(t,0,0,e),t)}if(r){if("undefined"!=typeof ArrayBuffer&&r.buffer instanceof ArrayBuffer||"length"in r)return"number"!=typeof r.length||function(t){return t!=t}(r.length)?f(t,0):l(t,r);if("Buffer"===r.type&&o(r.data))return l(t,r.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,r)}function h(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function c(t,r){if(h(r),t=f(t,r<0?0:0|p(r)),!s.TYPED_ARRAY_SUPPORT)for(var e=0;e<r;++e)t[e]=0;return t}function l(t,r){var e=r.length<0?0:0|p(r.length);t=f(t,e);for(var n=0;n<e;n+=1)t[n]=255&r[n];return t}function p(t){if(t>=u())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+u().toString(16)+" bytes");return 0|t}function g(t,r){if(s.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var e=t.length;if(0===e)return 0;for(var n=!1;;)switch(r){case"ascii":case"latin1":case"binary":return e;case"utf8":case"utf-8":case void 0:return N(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*e;case"hex":return e>>>1;case"base64":return F(t).length;default:if(n)return N(t).length;r=(""+r).toLowerCase(),n=!0}}function y(t,r,e){var n=t[r];t[r]=t[e],t[e]=n}function d(t,r,e,n,i){if(0===t.length)return-1;if("string"==typeof e?(n=e,e=0):e>2147483647?e=2147483647:e<-2147483648&&(e=-2147483648),e=+e,isNaN(e)&&(e=i?0:t.length-1),e<0&&(e=t.length+e),e>=t.length){if(i)return-1;e=t.length-1}else if(e<0){if(!i)return-1;e=0}if("string"==typeof r&&(r=s.from(r,n)),s.isBuffer(r))return 0===r.length?-1:w(t,r,e,n,i);if("number"==typeof r)return r&=255,s.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,r,e):Uint8Array.prototype.lastIndexOf.call(t,r,e):w(t,[r],e,n,i);throw new TypeError("val must be string, number or Buffer")}function w(t,r,e,n,i){var o,u=1,f=t.length,s=r.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||r.length<2)return-1;u=2,f/=2,s/=2,e/=2}function a(t,r){return 1===u?t[r]:t.readUInt16BE(r*u)}if(i){var h=-1;for(o=e;o<f;o++)if(a(t,o)===a(r,-1===h?0:o-h)){if(-1===h&&(h=o),o-h+1===s)return h*u}else-1!==h&&(o-=o-h),h=-1}else for(e+s>f&&(e=f-s),o=e;o>=0;o--){for(var c=!0,l=0;l<s;l++)if(a(t,o+l)!==a(r,l)){c=!1;break}if(c)return o}return-1}function v(t,r,e,n){e=Number(e)||0;var i=t.length-e;n?(n=Number(n))>i&&(n=i):n=i;var o=r.length;if(o%2!=0)throw new TypeError("Invalid hex string");n>o/2&&(n=o/2);for(var u=0;u<n;++u){var f=parseInt(r.substr(2*u,2),16);if(isNaN(f))return u;t[e+u]=f}return u}function b(t,r,e,n){return z(N(r,t.length-e),t,e,n)}function E(t,r,e,n){return z(function(t){for(var r=[],e=0;e<t.length;++e)r.push(255&t.charCodeAt(e));return r}(r),t,e,n)}function A(t,r,e,n){return E(t,r,e,n)}function _(t,r,e,n){return z(F(r),t,e,n)}function m(t,r,e,n){return z(function(t,r){for(var e,n,i,o=[],u=0;u<t.length&&!((r-=2)<0);++u)e=t.charCodeAt(u),n=e>>8,i=e%256,o.push(i),o.push(n);return o}(r,t.length-e),t,e,n)}function R(t,r,e){return 0===r&&e===t.length?n.fromByteArray(t):n.fromByteArray(t.slice(r,e))}function P(t,r,e){e=Math.min(t.length,e);for(var n=[],i=r;i<e;){var o,u,f,s,a=t[i],h=null,c=a>239?4:a>223?3:a>191?2:1;if(i+c<=e)switch(c){case 1:a<128&&(h=a);break;case 2:128==(192&(o=t[i+1]))&&(s=(31&a)<<6|63&o)>127&&(h=s);break;case 3:o=t[i+1],u=t[i+2],128==(192&o)&&128==(192&u)&&(s=(15&a)<<12|(63&o)<<6|63&u)>2047&&(s<55296||s>57343)&&(h=s);break;case 4:o=t[i+1],u=t[i+2],f=t[i+3],128==(192&o)&&128==(192&u)&&128==(192&f)&&(s=(15&a)<<18|(63&o)<<12|(63&u)<<6|63&f)>65535&&s<1114112&&(h=s)}null===h?(h=65533,c=1):h>65535&&(h-=65536,n.push(h>>>10&1023|55296),h=56320|1023&h),n.push(h),i+=c}return function(t){var r=t.length;if(r<=T)return String.fromCharCode.apply(String,t);var e="",n=0;for(;n<r;)e+=String.fromCharCode.apply(String,t.slice(n,n+=T));return e}(n)}r.Buffer=s,r.SlowBuffer=function(t){+t!=t&&(t=0);return s.alloc(+t)},r.INSPECT_MAX_BYTES=50,s.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),r.kMaxLength=u(),s.poolSize=8192,s._augment=function(t){return t.__proto__=s.prototype,t},s.from=function(t,r,e){return a(null,t,r,e)},s.TYPED_ARRAY_SUPPORT&&(s.prototype.__proto__=Uint8Array.prototype,s.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&s[Symbol.species]===s&&Object.defineProperty(s,Symbol.species,{value:null,configurable:!0})),s.alloc=function(t,r,e){return function(t,r,e,n){return h(r),r<=0?f(t,r):void 0!==e?"string"==typeof n?f(t,r).fill(e,n):f(t,r).fill(e):f(t,r)}(null,t,r,e)},s.allocUnsafe=function(t){return c(null,t)},s.allocUnsafeSlow=function(t){return c(null,t)},s.isBuffer=function(t){return!(null==t||!t._isBuffer)},s.compare=function(t,r){if(!s.isBuffer(t)||!s.isBuffer(r))throw new TypeError("Arguments must be Buffers");if(t===r)return 0;for(var e=t.length,n=r.length,i=0,o=Math.min(e,n);i<o;++i)if(t[i]!==r[i]){e=t[i],n=r[i];break}return e<n?-1:n<e?1:0},s.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},s.concat=function(t,r){if(!o(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return s.alloc(0);var e;if(void 0===r)for(r=0,e=0;e<t.length;++e)r+=t[e].length;var n=s.allocUnsafe(r),i=0;for(e=0;e<t.length;++e){var u=t[e];if(!s.isBuffer(u))throw new TypeError('"list" argument must be an Array of Buffers');u.copy(n,i),i+=u.length}return n},s.byteLength=g,s.prototype._isBuffer=!0,s.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var r=0;r<t;r+=2)y(this,r,r+1);return this},s.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var r=0;r<t;r+=4)y(this,r,r+3),y(this,r+1,r+2);return this},s.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var r=0;r<t;r+=8)y(this,r,r+7),y(this,r+1,r+6),y(this,r+2,r+5),y(this,r+3,r+4);return this},s.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?P(this,0,t):function(t,r,e){var n=!1;if((void 0===r||r<0)&&(r=0),r>this.length)return"";if((void 0===e||e>this.length)&&(e=this.length),e<=0)return"";if((e>>>=0)<=(r>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return U(this,r,e);case"utf8":case"utf-8":return P(this,r,e);case"ascii":return B(this,r,e);case"latin1":case"binary":return S(this,r,e);case"base64":return R(this,r,e);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return O(this,r,e);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0}}.apply(this,arguments)},s.prototype.equals=function(t){if(!s.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===s.compare(this,t)},s.prototype.inspect=function(){var t="",e=r.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,e).match(/.{2}/g).join(" "),this.length>e&&(t+=" ... ")),"<Buffer "+t+">"},s.prototype.compare=function(t,r,e,n,i){if(!s.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===r&&(r=0),void 0===e&&(e=t?t.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),r<0||e>t.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&r>=e)return 0;if(n>=i)return-1;if(r>=e)return 1;if(r>>>=0,e>>>=0,n>>>=0,i>>>=0,this===t)return 0;for(var o=i-n,u=e-r,f=Math.min(o,u),a=this.slice(n,i),h=t.slice(r,e),c=0;c<f;++c)if(a[c]!==h[c]){o=a[c],u=h[c];break}return o<u?-1:u<o?1:0},s.prototype.includes=function(t,r,e){return-1!==this.indexOf(t,r,e)},s.prototype.indexOf=function(t,r,e){return d(this,t,r,e,!0)},s.prototype.lastIndexOf=function(t,r,e){return d(this,t,r,e,!1)},s.prototype.write=function(t,r,e,n){if(void 0===r)n="utf8",e=this.length,r=0;else if(void 0===e&&"string"==typeof r)n=r,e=this.length,r=0;else{if(!isFinite(r))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");r|=0,isFinite(e)?(e|=0,void 0===n&&(n="utf8")):(n=e,e=void 0)}var i=this.length-r;if((void 0===e||e>i)&&(e=i),t.length>0&&(e<0||r<0)||r>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var o=!1;;)switch(n){case"hex":return v(this,t,r,e);case"utf8":case"utf-8":return b(this,t,r,e);case"ascii":return E(this,t,r,e);case"latin1":case"binary":return A(this,t,r,e);case"base64":return _(this,t,r,e);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return m(this,t,r,e);default:if(o)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),o=!0}},s.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var T=4096;function B(t,r,e){var n="";e=Math.min(t.length,e);for(var i=r;i<e;++i)n+=String.fromCharCode(127&t[i]);return n}function S(t,r,e){var n="";e=Math.min(t.length,e);for(var i=r;i<e;++i)n+=String.fromCharCode(t[i]);return n}function U(t,r,e){var n=t.length;(!r||r<0)&&(r=0),(!e||e<0||e>n)&&(e=n);for(var i="",o=r;o<e;++o)i+=k(t[o]);return i}function O(t,r,e){for(var n=t.slice(r,e),i="",o=0;o<n.length;o+=2)i+=String.fromCharCode(n[o]+256*n[o+1]);return i}function Y(t,r,e){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+r>e)throw new RangeError("Trying to access beyond buffer length")}function I(t,r,e,n,i,o){if(!s.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(r>i||r<o)throw new RangeError('"value" argument is out of bounds');if(e+n>t.length)throw new RangeError("Index out of range")}function x(t,r,e,n){r<0&&(r=65535+r+1);for(var i=0,o=Math.min(t.length-e,2);i<o;++i)t[e+i]=(r&255<<8*(n?i:1-i))>>>8*(n?i:1-i)}function M(t,r,e,n){r<0&&(r=4294967295+r+1);for(var i=0,o=Math.min(t.length-e,4);i<o;++i)t[e+i]=r>>>8*(n?i:3-i)&255}function L(t,r,e,n,i,o){if(e+n>t.length)throw new RangeError("Index out of range");if(e<0)throw new RangeError("Index out of range")}function C(t,r,e,n,o){return o||L(t,0,e,4),i.write(t,r,e,n,23,4),e+4}function D(t,r,e,n,o){return o||L(t,0,e,8),i.write(t,r,e,n,52,8),e+8}s.prototype.slice=function(t,r){var e,n=this.length;if(t=~~t,r=void 0===r?n:~~r,t<0?(t+=n)<0&&(t=0):t>n&&(t=n),r<0?(r+=n)<0&&(r=0):r>n&&(r=n),r<t&&(r=t),s.TYPED_ARRAY_SUPPORT)(e=this.subarray(t,r)).__proto__=s.prototype;else{var i=r-t;e=new s(i,void 0);for(var o=0;o<i;++o)e[o]=this[o+t]}return e},s.prototype.readUIntLE=function(t,r,e){t|=0,r|=0,e||Y(t,r,this.length);for(var n=this[t],i=1,o=0;++o<r&&(i*=256);)n+=this[t+o]*i;return n},s.prototype.readUIntBE=function(t,r,e){t|=0,r|=0,e||Y(t,r,this.length);for(var n=this[t+--r],i=1;r>0&&(i*=256);)n+=this[t+--r]*i;return n},s.prototype.readUInt8=function(t,r){return r||Y(t,1,this.length),this[t]},s.prototype.readUInt16LE=function(t,r){return r||Y(t,2,this.length),this[t]|this[t+1]<<8},s.prototype.readUInt16BE=function(t,r){return r||Y(t,2,this.length),this[t]<<8|this[t+1]},s.prototype.readUInt32LE=function(t,r){return r||Y(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},s.prototype.readUInt32BE=function(t,r){return r||Y(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},s.prototype.readIntLE=function(t,r,e){t|=0,r|=0,e||Y(t,r,this.length);for(var n=this[t],i=1,o=0;++o<r&&(i*=256);)n+=this[t+o]*i;return n>=(i*=128)&&(n-=Math.pow(2,8*r)),n},s.prototype.readIntBE=function(t,r,e){t|=0,r|=0,e||Y(t,r,this.length);for(var n=r,i=1,o=this[t+--n];n>0&&(i*=256);)o+=this[t+--n]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*r)),o},s.prototype.readInt8=function(t,r){return r||Y(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},s.prototype.readInt16LE=function(t,r){r||Y(t,2,this.length);var e=this[t]|this[t+1]<<8;return 32768&e?4294901760|e:e},s.prototype.readInt16BE=function(t,r){r||Y(t,2,this.length);var e=this[t+1]|this[t]<<8;return 32768&e?4294901760|e:e},s.prototype.readInt32LE=function(t,r){return r||Y(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},s.prototype.readInt32BE=function(t,r){return r||Y(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},s.prototype.readFloatLE=function(t,r){return r||Y(t,4,this.length),i.read(this,t,!0,23,4)},s.prototype.readFloatBE=function(t,r){return r||Y(t,4,this.length),i.read(this,t,!1,23,4)},s.prototype.readDoubleLE=function(t,r){return r||Y(t,8,this.length),i.read(this,t,!0,52,8)},s.prototype.readDoubleBE=function(t,r){return r||Y(t,8,this.length),i.read(this,t,!1,52,8)},s.prototype.writeUIntLE=function(t,r,e,n){(t=+t,r|=0,e|=0,n)||I(this,t,r,e,Math.pow(2,8*e)-1,0);var i=1,o=0;for(this[r]=255&t;++o<e&&(i*=256);)this[r+o]=t/i&255;return r+e},s.prototype.writeUIntBE=function(t,r,e,n){(t=+t,r|=0,e|=0,n)||I(this,t,r,e,Math.pow(2,8*e)-1,0);var i=e-1,o=1;for(this[r+i]=255&t;--i>=0&&(o*=256);)this[r+i]=t/o&255;return r+e},s.prototype.writeUInt8=function(t,r,e){return t=+t,r|=0,e||I(this,t,r,1,255,0),s.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[r]=255&t,r+1},s.prototype.writeUInt16LE=function(t,r,e){return t=+t,r|=0,e||I(this,t,r,2,65535,0),s.TYPED_ARRAY_SUPPORT?(this[r]=255&t,this[r+1]=t>>>8):x(this,t,r,!0),r+2},s.prototype.writeUInt16BE=function(t,r,e){return t=+t,r|=0,e||I(this,t,r,2,65535,0),s.TYPED_ARRAY_SUPPORT?(this[r]=t>>>8,this[r+1]=255&t):x(this,t,r,!1),r+2},s.prototype.writeUInt32LE=function(t,r,e){return t=+t,r|=0,e||I(this,t,r,4,4294967295,0),s.TYPED_ARRAY_SUPPORT?(this[r+3]=t>>>24,this[r+2]=t>>>16,this[r+1]=t>>>8,this[r]=255&t):M(this,t,r,!0),r+4},s.prototype.writeUInt32BE=function(t,r,e){return t=+t,r|=0,e||I(this,t,r,4,4294967295,0),s.TYPED_ARRAY_SUPPORT?(this[r]=t>>>24,this[r+1]=t>>>16,this[r+2]=t>>>8,this[r+3]=255&t):M(this,t,r,!1),r+4},s.prototype.writeIntLE=function(t,r,e,n){if(t=+t,r|=0,!n){var i=Math.pow(2,8*e-1);I(this,t,r,e,i-1,-i)}var o=0,u=1,f=0;for(this[r]=255&t;++o<e&&(u*=256);)t<0&&0===f&&0!==this[r+o-1]&&(f=1),this[r+o]=(t/u>>0)-f&255;return r+e},s.prototype.writeIntBE=function(t,r,e,n){if(t=+t,r|=0,!n){var i=Math.pow(2,8*e-1);I(this,t,r,e,i-1,-i)}var o=e-1,u=1,f=0;for(this[r+o]=255&t;--o>=0&&(u*=256);)t<0&&0===f&&0!==this[r+o+1]&&(f=1),this[r+o]=(t/u>>0)-f&255;return r+e},s.prototype.writeInt8=function(t,r,e){return t=+t,r|=0,e||I(this,t,r,1,127,-128),s.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[r]=255&t,r+1},s.prototype.writeInt16LE=function(t,r,e){return t=+t,r|=0,e||I(this,t,r,2,32767,-32768),s.TYPED_ARRAY_SUPPORT?(this[r]=255&t,this[r+1]=t>>>8):x(this,t,r,!0),r+2},s.prototype.writeInt16BE=function(t,r,e){return t=+t,r|=0,e||I(this,t,r,2,32767,-32768),s.TYPED_ARRAY_SUPPORT?(this[r]=t>>>8,this[r+1]=255&t):x(this,t,r,!1),r+2},s.prototype.writeInt32LE=function(t,r,e){return t=+t,r|=0,e||I(this,t,r,4,2147483647,-2147483648),s.TYPED_ARRAY_SUPPORT?(this[r]=255&t,this[r+1]=t>>>8,this[r+2]=t>>>16,this[r+3]=t>>>24):M(this,t,r,!0),r+4},s.prototype.writeInt32BE=function(t,r,e){return t=+t,r|=0,e||I(this,t,r,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),s.TYPED_ARRAY_SUPPORT?(this[r]=t>>>24,this[r+1]=t>>>16,this[r+2]=t>>>8,this[r+3]=255&t):M(this,t,r,!1),r+4},s.prototype.writeFloatLE=function(t,r,e){return C(this,t,r,!0,e)},s.prototype.writeFloatBE=function(t,r,e){return C(this,t,r,!1,e)},s.prototype.writeDoubleLE=function(t,r,e){return D(this,t,r,!0,e)},s.prototype.writeDoubleBE=function(t,r,e){return D(this,t,r,!1,e)},s.prototype.copy=function(t,r,e,n){if(e||(e=0),n||0===n||(n=this.length),r>=t.length&&(r=t.length),r||(r=0),n>0&&n<e&&(n=e),n===e)return 0;if(0===t.length||0===this.length)return 0;if(r<0)throw new RangeError("targetStart out of bounds");if(e<0||e>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),t.length-r<n-e&&(n=t.length-r+e);var i,o=n-e;if(this===t&&e<r&&r<n)for(i=o-1;i>=0;--i)t[i+r]=this[i+e];else if(o<1e3||!s.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)t[i+r]=this[i+e];else Uint8Array.prototype.set.call(t,this.subarray(e,e+o),r);return o},s.prototype.fill=function(t,r,e,n){if("string"==typeof t){if("string"==typeof r?(n=r,r=0,e=this.length):"string"==typeof e&&(n=e,e=this.length),1===t.length){var i=t.charCodeAt(0);i<256&&(t=i)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!s.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof t&&(t&=255);if(r<0||this.length<r||this.length<e)throw new RangeError("Out of range index");if(e<=r)return this;var o;if(r>>>=0,e=void 0===e?this.length:e>>>0,t||(t=0),"number"==typeof t)for(o=r;o<e;++o)this[o]=t;else{var u=s.isBuffer(t)?t:N(new s(t,n).toString()),f=u.length;for(o=0;o<e-r;++o)this[o+r]=u[o%f]}return this};var j=/[^+\/0-9A-Za-z-_]/g;function k(t){return t<16?"0"+t.toString(16):t.toString(16)}function N(t,r){var e;r=r||1/0;for(var n=t.length,i=null,o=[],u=0;u<n;++u){if((e=t.charCodeAt(u))>55295&&e<57344){if(!i){if(e>56319){(r-=3)>-1&&o.push(239,191,189);continue}if(u+1===n){(r-=3)>-1&&o.push(239,191,189);continue}i=e;continue}if(e<56320){(r-=3)>-1&&o.push(239,191,189),i=e;continue}e=65536+(i-55296<<10|e-56320)}else i&&(r-=3)>-1&&o.push(239,191,189);if(i=null,e<128){if((r-=1)<0)break;o.push(e)}else if(e<2048){if((r-=2)<0)break;o.push(e>>6|192,63&e|128)}else if(e<65536){if((r-=3)<0)break;o.push(e>>12|224,e>>6&63|128,63&e|128)}else{if(!(e<1114112))throw new Error("Invalid code point");if((r-=4)<0)break;o.push(e>>18|240,e>>12&63|128,e>>6&63|128,63&e|128)}}return o}function F(t){return n.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(j,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function z(t,r,e,n){for(var i=0;i<n&&!(i+e>=r.length||i>=t.length);++i)r[i+e]=t[i];return i}}).call(this,e(3))},function(t,r,e){(function(t){!function(t,r){for(var e in r)t[e]=r[e]}(r,function(t){var r={};function e(n){if(r[n])return r[n].exports;var i=r[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,e),i.l=!0,i.exports}return e.m=t,e.c=r,e.d=function(t,r,n){e.o(t,r)||Object.defineProperty(t,r,{enumerable:!0,get:n})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,r){if(1&r&&(t=e(t)),8&r)return t;if(4&r&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(e.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&r&&"string"!=typeof t)for(var i in t)e.d(n,i,function(r){return t[r]}.bind(null,i));return n},e.n=function(t){var r=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(r,"a",r),r},e.o=function(t,r){return Object.prototype.hasOwnProperty.call(t,r)},e.p="",e(e.s="./src/clients/pieces.worker.ts")}({"./src/clients/pieces.worker.ts":
/*!**************************************!*\
  !*** ./src/clients/pieces.worker.ts ***!
  \**************************************/
/*! no static exports found */function(r,e,n){"use strict";var i=this&&this.__awaiter||function(t,r,e,n){return new(e||(e=Promise))(function(i,o){function u(t){try{s(n.next(t))}catch(t){o(t)}}function f(t){try{s(n.throw(t))}catch(t){o(t)}}function s(t){t.done?i(t.value):new e(function(r){r(t.value)}).then(u,f)}s((n=n.apply(t,r||[])).next())})},o=this&&this.__generator||function(t,r){var e,n,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:f(0),throw:f(1),return:f(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function f(o){return function(f){return function(o){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,n=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!(i=(i=u.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=r.call(t,u)}catch(t){o=[6,t],n=0}finally{e=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,f])}}},u=self;addEventListener("message",function(r){var e=r.data.blob,n=new FileReader;n.addEventListener("loadend",function r(e){return i(this,void 0,Promise,function(){var e,i,f,s,a;return o(this,function(o){return n.removeEventListener("loadend",r,!1),e=t.from(n.result),i=e.readUInt32BE(0),f=e.readUInt32BE(4),s=e.toString("hex",8,28),a=e.slice(28,e.length),u.postMessage({index:i,infoHash:s,offset:f,data:a}),[2]})})},!1),n.readAsArrayBuffer(e)})}}))}).call(this,e(4).Buffer)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL3Nkay9wYWNrYWdlcy9zZGsvd29ya2VyLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwidG9TdHJpbmciLCJBcnJheSIsImlzQXJyYXkiLCJhcnIiLCJyZWFkIiwiYnVmZmVyIiwib2Zmc2V0IiwiaXNMRSIsIm1MZW4iLCJuQnl0ZXMiLCJlIiwiZUxlbiIsImVNYXgiLCJlQmlhcyIsIm5CaXRzIiwiTmFOIiwiSW5maW5pdHkiLCJNYXRoIiwicG93Iiwid3JpdGUiLCJydCIsImFicyIsImlzTmFOIiwiZmxvb3IiLCJsb2ciLCJMTjIiLCJieXRlTGVuZ3RoIiwiYjY0IiwibGVucyIsImdldExlbnMiLCJ2YWxpZExlbiIsInBsYWNlSG9sZGVyc0xlbiIsInRvQnl0ZUFycmF5IiwidG1wIiwiQXJyIiwiX2J5dGVMZW5ndGgiLCJjdXJCeXRlIiwibGVuIiwicmV2TG9va3VwIiwiY2hhckNvZGVBdCIsImZyb21CeXRlQXJyYXkiLCJ1aW50OCIsImxlbmd0aCIsImV4dHJhQnl0ZXMiLCJwYXJ0cyIsImxlbjIiLCJwdXNoIiwiZW5jb2RlQ2h1bmsiLCJsb29rdXAiLCJqb2luIiwiVWludDhBcnJheSIsImNvZGUiLCJFcnJvciIsImluZGV4T2YiLCJ0cmlwbGV0VG9CYXNlNjQiLCJudW0iLCJzdGFydCIsImVuZCIsIm91dHB1dCIsImciLCJ0aGlzIiwiRnVuY3Rpb24iLCJldmFsIiwid2luZG93IiwiZ2xvYmFsIiwiYmFzZTY0IiwiaWVlZTc1NCIsImtNYXhMZW5ndGgiLCJCdWZmZXIiLCJUWVBFRF9BUlJBWV9TVVBQT1JUIiwiY3JlYXRlQnVmZmVyIiwidGhhdCIsIlJhbmdlRXJyb3IiLCJfX3Byb3RvX18iLCJhcmciLCJlbmNvZGluZ09yT2Zmc2V0IiwiYWxsb2NVbnNhZmUiLCJmcm9tIiwiVHlwZUVycm9yIiwiQXJyYXlCdWZmZXIiLCJhcnJheSIsImJ5dGVPZmZzZXQiLCJ1bmRlZmluZWQiLCJmcm9tQXJyYXlMaWtlIiwiZnJvbUFycmF5QnVmZmVyIiwic3RyaW5nIiwiZW5jb2RpbmciLCJpc0VuY29kaW5nIiwiYWN0dWFsIiwic2xpY2UiLCJmcm9tU3RyaW5nIiwib2JqIiwiaXNCdWZmZXIiLCJjaGVja2VkIiwiY29weSIsInZhbCIsImlzbmFuIiwidHlwZSIsImRhdGEiLCJmcm9tT2JqZWN0IiwiYXNzZXJ0U2l6ZSIsInNpemUiLCJpc1ZpZXciLCJsb3dlcmVkQ2FzZSIsInV0ZjhUb0J5dGVzIiwiYmFzZTY0VG9CeXRlcyIsInRvTG93ZXJDYXNlIiwic3dhcCIsImIiLCJiaWRpcmVjdGlvbmFsSW5kZXhPZiIsImRpciIsImFycmF5SW5kZXhPZiIsImxhc3RJbmRleE9mIiwiaW5kZXhTaXplIiwiYXJyTGVuZ3RoIiwidmFsTGVuZ3RoIiwiU3RyaW5nIiwiYnVmIiwicmVhZFVJbnQxNkJFIiwiZm91bmRJbmRleCIsImZvdW5kIiwiaiIsImhleFdyaXRlIiwiTnVtYmVyIiwicmVtYWluaW5nIiwic3RyTGVuIiwicGFyc2VkIiwicGFyc2VJbnQiLCJzdWJzdHIiLCJ1dGY4V3JpdGUiLCJibGl0QnVmZmVyIiwiYXNjaWlXcml0ZSIsInN0ciIsImJ5dGVBcnJheSIsImFzY2lpVG9CeXRlcyIsImxhdGluMVdyaXRlIiwiYmFzZTY0V3JpdGUiLCJ1Y3MyV3JpdGUiLCJ1bml0cyIsImhpIiwibG8iLCJ1dGYxNmxlVG9CeXRlcyIsImJhc2U2NFNsaWNlIiwidXRmOFNsaWNlIiwibWluIiwicmVzIiwic2Vjb25kQnl0ZSIsInRoaXJkQnl0ZSIsImZvdXJ0aEJ5dGUiLCJ0ZW1wQ29kZVBvaW50IiwiZmlyc3RCeXRlIiwiY29kZVBvaW50IiwiYnl0ZXNQZXJTZXF1ZW5jZSIsImNvZGVQb2ludHMiLCJNQVhfQVJHVU1FTlRTX0xFTkdUSCIsImZyb21DaGFyQ29kZSIsImFwcGx5IiwiZGVjb2RlQ29kZVBvaW50c0FycmF5IiwiU2xvd0J1ZmZlciIsImFsbG9jIiwiSU5TUEVDVF9NQVhfQllURVMiLCJmb28iLCJzdWJhcnJheSIsInR5cGVkQXJyYXlTdXBwb3J0IiwicG9vbFNpemUiLCJfYXVnbWVudCIsInNwZWNpZXMiLCJjb25maWd1cmFibGUiLCJmaWxsIiwiYWxsb2NVbnNhZmVTbG93IiwiX2lzQnVmZmVyIiwiY29tcGFyZSIsImEiLCJ4IiwieSIsImNvbmNhdCIsImxpc3QiLCJwb3MiLCJzd2FwMTYiLCJzd2FwMzIiLCJzd2FwNjQiLCJhcmd1bWVudHMiLCJoZXhTbGljZSIsImFzY2lpU2xpY2UiLCJsYXRpbjFTbGljZSIsInV0ZjE2bGVTbGljZSIsImVxdWFscyIsImluc3BlY3QiLCJtYXgiLCJtYXRjaCIsInRhcmdldCIsInRoaXNTdGFydCIsInRoaXNFbmQiLCJ0aGlzQ29weSIsInRhcmdldENvcHkiLCJpbmNsdWRlcyIsImlzRmluaXRlIiwidG9KU09OIiwiX2FyciIsInJldCIsIm91dCIsInRvSGV4IiwiYnl0ZXMiLCJjaGVja09mZnNldCIsImV4dCIsImNoZWNrSW50Iiwib2JqZWN0V3JpdGVVSW50MTYiLCJsaXR0bGVFbmRpYW4iLCJvYmplY3RXcml0ZVVJbnQzMiIsImNoZWNrSUVFRTc1NCIsIndyaXRlRmxvYXQiLCJub0Fzc2VydCIsIndyaXRlRG91YmxlIiwibmV3QnVmIiwic2xpY2VMZW4iLCJyZWFkVUludExFIiwibXVsIiwicmVhZFVJbnRCRSIsInJlYWRVSW50OCIsInJlYWRVSW50MTZMRSIsInJlYWRVSW50MzJMRSIsInJlYWRVSW50MzJCRSIsInJlYWRJbnRMRSIsInJlYWRJbnRCRSIsInJlYWRJbnQ4IiwicmVhZEludDE2TEUiLCJyZWFkSW50MTZCRSIsInJlYWRJbnQzMkxFIiwicmVhZEludDMyQkUiLCJyZWFkRmxvYXRMRSIsInJlYWRGbG9hdEJFIiwicmVhZERvdWJsZUxFIiwicmVhZERvdWJsZUJFIiwid3JpdGVVSW50TEUiLCJ3cml0ZVVJbnRCRSIsIndyaXRlVUludDgiLCJ3cml0ZVVJbnQxNkxFIiwid3JpdGVVSW50MTZCRSIsIndyaXRlVUludDMyTEUiLCJ3cml0ZVVJbnQzMkJFIiwid3JpdGVJbnRMRSIsImxpbWl0Iiwic3ViIiwid3JpdGVJbnRCRSIsIndyaXRlSW50OCIsIndyaXRlSW50MTZMRSIsIndyaXRlSW50MTZCRSIsIndyaXRlSW50MzJMRSIsIndyaXRlSW50MzJCRSIsIndyaXRlRmxvYXRMRSIsIndyaXRlRmxvYXRCRSIsIndyaXRlRG91YmxlTEUiLCJ3cml0ZURvdWJsZUJFIiwidGFyZ2V0U3RhcnQiLCJzZXQiLCJJTlZBTElEX0JBU0U2NF9SRSIsImxlYWRTdXJyb2dhdGUiLCJ0cmltIiwicmVwbGFjZSIsInN0cmluZ3RyaW0iLCJiYXNlNjRjbGVhbiIsInNyYyIsImRzdCIsIi4vc3JjL2NsaWVudHMvcGllY2VzLndvcmtlci50cyIsIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwic3RlcCIsIm5leHQiLCJyZWplY3RlZCIsInJlc3VsdCIsImRvbmUiLCJ0aGVuIiwiX19nZW5lcmF0b3IiLCJib2R5IiwiZiIsIl8iLCJsYWJlbCIsInNlbnQiLCJ0cnlzIiwib3BzIiwidmVyYiIsInRocm93IiwicmV0dXJuIiwiaXRlcmF0b3IiLCJ2Iiwib3AiLCJwb3AiLCJjdHgiLCJzZWxmIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwiYmxvYiIsInJlYWRlciIsIkZpbGVSZWFkZXIiLCJvbkxvYWRFbmQiLCJwaWVjZUluZGV4IiwiaW5mb0hhc2giLCJfYSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJwb3N0TWVzc2FnZSIsImluZGV4IiwicmVhZEFzQXJyYXlCdWZmZXIiXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEtBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsSUFDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxZQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUFLQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFBQVYsRUFHQUMsRUFBQVUsRUFBQSxTQUFBUixFQUFBUyxFQUFBQyxHQUNBWixFQUFBYSxFQUFBWCxFQUFBUyxJQUNBRyxPQUFBQyxlQUFBYixFQUFBUyxHQUEwQ0ssWUFBQSxFQUFBQyxJQUFBTCxLQUsxQ1osRUFBQWtCLEVBQUEsU0FBQWhCLEdBQ0Esb0JBQUFpQixlQUFBQyxhQUNBTixPQUFBQyxlQUFBYixFQUFBaUIsT0FBQUMsYUFBd0RDLE1BQUEsV0FFeERQLE9BQUFDLGVBQUFiLEVBQUEsY0FBaURtQixPQUFBLEtBUWpEckIsRUFBQXNCLEVBQUEsU0FBQUQsRUFBQUUsR0FF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LEdBQUFwRixFQUFBcUMsUUFDQTRQLEVBQUFZLGFBQ0FDLE1BQUFMLEVBQ0FDLFdBQ0F6UyxTQUNBNEYsVUFFQSxTQUlBLEdBQ0F5TSxFQUFBUyxrQkFBQVYiLCJmaWxlIjoiZTI4ZjBiMWM4NzZkYzJmMTdlMTYud29ya2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDUpO1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCJleHBvcnRzLnJlYWQgPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbVxuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgbkJpdHMgPSAtN1xuICB2YXIgaSA9IGlzTEUgPyAobkJ5dGVzIC0gMSkgOiAwXG4gIHZhciBkID0gaXNMRSA/IC0xIDogMVxuICB2YXIgcyA9IGJ1ZmZlcltvZmZzZXQgKyBpXVxuXG4gIGkgKz0gZFxuXG4gIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIHMgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IGVMZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IChlICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIG0gPSBlICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIGUgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IG1MZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IChtICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhc1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6ICgocyA/IC0xIDogMSkgKiBJbmZpbml0eSlcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pXG4gICAgZSA9IGUgLSBlQmlhc1xuICB9XG4gIHJldHVybiAocyA/IC0xIDogMSkgKiBtICogTWF0aC5wb3coMiwgZSAtIG1MZW4pXG59XG5cbmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbiAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sIGNcbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIHJ0ID0gKG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwKVxuICB2YXIgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpXG4gIHZhciBkID0gaXNMRSA/IDEgOiAtMVxuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCAodmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCkgPyAxIDogMFxuXG4gIHZhbHVlID0gTWF0aC5hYnModmFsdWUpXG5cbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDBcbiAgICBlID0gZU1heFxuICB9IGVsc2Uge1xuICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKVxuICAgIGlmICh2YWx1ZSAqIChjID0gTWF0aC5wb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLVxuICAgICAgYyAqPSAyXG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKVxuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrK1xuICAgICAgYyAvPSAyXG4gICAgfVxuXG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMFxuICAgICAgZSA9IGVNYXhcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKCh2YWx1ZSAqIGMpIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IGUgKyBlQmlhc1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBNYXRoLnBvdygyLCBlQmlhcyAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSAwXG4gICAgfVxuICB9XG5cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW29mZnNldCArIGldID0gbSAmIDB4ZmYsIGkgKz0gZCwgbSAvPSAyNTYsIG1MZW4gLT0gOCkge31cblxuICBlID0gKGUgPDwgbUxlbikgfCBtXG4gIGVMZW4gKz0gbUxlblxuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGUgJiAweGZmLCBpICs9IGQsIGUgLz0gMjU2LCBlTGVuIC09IDgpIHt9XG5cbiAgYnVmZmVyW29mZnNldCArIGkgLSBkXSB8PSBzICogMTI4XG59XG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuZXhwb3J0cy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5XG5leHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5XG5cbnZhciBsb29rdXAgPSBbXVxudmFyIHJldkxvb2t1cCA9IFtdXG52YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5XG5cbnZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXG5mb3IgKHZhciBpID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICBsb29rdXBbaV0gPSBjb2RlW2ldXG4gIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaVxufVxuXG4vLyBTdXBwb3J0IGRlY29kaW5nIFVSTC1zYWZlIGJhc2U2NCBzdHJpbmdzLCBhcyBOb2RlLmpzIGRvZXMuXG4vLyBTZWU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2U2NCNVUkxfYXBwbGljYXRpb25zXG5yZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjJcbnJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2M1xuXG5mdW5jdGlvbiBnZXRMZW5zIChiNjQpIHtcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcblxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gVHJpbSBvZmYgZXh0cmEgYnl0ZXMgYWZ0ZXIgcGxhY2Vob2xkZXIgYnl0ZXMgYXJlIGZvdW5kXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2JlYXRnYW1taXQvYmFzZTY0LWpzL2lzc3Vlcy80MlxuICB2YXIgdmFsaWRMZW4gPSBiNjQuaW5kZXhPZignPScpXG4gIGlmICh2YWxpZExlbiA9PT0gLTEpIHZhbGlkTGVuID0gbGVuXG5cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IHZhbGlkTGVuID09PSBsZW5cbiAgICA/IDBcbiAgICA6IDQgLSAodmFsaWRMZW4gJSA0KVxuXG4gIHJldHVybiBbdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbl1cbn1cblxuLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChiNjQpIHtcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gX2J5dGVMZW5ndGggKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikge1xuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cblxuICB2YXIgYXJyID0gbmV3IEFycihfYnl0ZUxlbmd0aChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pKVxuXG4gIHZhciBjdXJCeXRlID0gMFxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgdmFyIGxlbiA9IHBsYWNlSG9sZGVyc0xlbiA+IDBcbiAgICA/IHZhbGlkTGVuIC0gNFxuICAgIDogdmFsaWRMZW5cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgMTIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA8PCA2KSB8XG4gICAgICByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiAxNikgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMikge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPj4gNClcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDEpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTApIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCA0KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMilcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG4gIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiA2ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gJiAweDNGXVxufVxuXG5mdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHRtcFxuICB2YXIgb3V0cHV0ID0gW11cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IDMpIHtcbiAgICB0bXAgPVxuICAgICAgKCh1aW50OFtpXSA8PCAxNikgJiAweEZGMDAwMCkgK1xuICAgICAgKCh1aW50OFtpICsgMV0gPDwgOCkgJiAweEZGMDApICtcbiAgICAgICh1aW50OFtpICsgMl0gJiAweEZGKVxuICAgIG91dHB1dC5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKVxuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJylcbn1cblxuZnVuY3Rpb24gZnJvbUJ5dGVBcnJheSAodWludDgpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVuID0gdWludDgubGVuZ3RoXG4gIHZhciBleHRyYUJ5dGVzID0gbGVuICUgMyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuICB2YXIgcGFydHMgPSBbXVxuICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MyAvLyBtdXN0IGJlIG11bHRpcGxlIG9mIDNcblxuICAvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG4gIGZvciAodmFyIGkgPSAwLCBsZW4yID0gbGVuIC0gZXh0cmFCeXRlczsgaSA8IGxlbjI7IGkgKz0gbWF4Q2h1bmtMZW5ndGgpIHtcbiAgICBwYXJ0cy5wdXNoKGVuY29kZUNodW5rKFxuICAgICAgdWludDgsIGksIChpICsgbWF4Q2h1bmtMZW5ndGgpID4gbGVuMiA/IGxlbjIgOiAoaSArIG1heENodW5rTGVuZ3RoKVxuICAgICkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAyXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdICtcbiAgICAgICc9PSdcbiAgICApXG4gIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikge1xuICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArIHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMTBdICtcbiAgICAgIGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgMikgJiAweDNGXSArXG4gICAgICAnPSdcbiAgICApXG4gIH1cblxuICByZXR1cm4gcGFydHMuam9pbignJylcbn1cbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLCBldmFsKShcInRoaXNcIik7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCIvKiFcbiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxmZXJvc3NAZmVyb3NzLm9yZz4gPGh0dHA6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuXG4ndXNlIHN0cmljdCdcblxudmFyIGJhc2U2NCA9IHJlcXVpcmUoJ2Jhc2U2NC1qcycpXG52YXIgaWVlZTc1NCA9IHJlcXVpcmUoJ2llZWU3NTQnKVxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuU2xvd0J1ZmZlciA9IFNsb3dCdWZmZXJcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuXG4vKipcbiAqIElmIGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGA6XG4gKiAgID09PSB0cnVlICAgIFVzZSBVaW50OEFycmF5IGltcGxlbWVudGF0aW9uIChmYXN0ZXN0KVxuICogICA9PT0gZmFsc2UgICBVc2UgT2JqZWN0IGltcGxlbWVudGF0aW9uIChtb3N0IGNvbXBhdGlibGUsIGV2ZW4gSUU2KVxuICpcbiAqIEJyb3dzZXJzIHRoYXQgc3VwcG9ydCB0eXBlZCBhcnJheXMgYXJlIElFIDEwKywgRmlyZWZveCA0KywgQ2hyb21lIDcrLCBTYWZhcmkgNS4xKyxcbiAqIE9wZXJhIDExLjYrLCBpT1MgNC4yKy5cbiAqXG4gKiBEdWUgdG8gdmFyaW91cyBicm93c2VyIGJ1Z3MsIHNvbWV0aW1lcyB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uIHdpbGwgYmUgdXNlZCBldmVuXG4gKiB3aGVuIHRoZSBicm93c2VyIHN1cHBvcnRzIHR5cGVkIGFycmF5cy5cbiAqXG4gKiBOb3RlOlxuICpcbiAqICAgLSBGaXJlZm94IDQtMjkgbGFja3Mgc3VwcG9ydCBmb3IgYWRkaW5nIG5ldyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YCBpbnN0YW5jZXMsXG4gKiAgICAgU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzguXG4gKlxuICogICAtIENocm9tZSA5LTEwIGlzIG1pc3NpbmcgdGhlIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24uXG4gKlxuICogICAtIElFMTAgaGFzIGEgYnJva2VuIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhcnJheXMgb2ZcbiAqICAgICBpbmNvcnJlY3QgbGVuZ3RoIGluIHNvbWUgc2l0dWF0aW9ucy5cblxuICogV2UgZGV0ZWN0IHRoZXNlIGJ1Z2d5IGJyb3dzZXJzIGFuZCBzZXQgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYCB0byBgZmFsc2VgIHNvIHRoZXlcbiAqIGdldCB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uLCB3aGljaCBpcyBzbG93ZXIgYnV0IGJlaGF2ZXMgY29ycmVjdGx5LlxuICovXG5CdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCA9IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUICE9PSB1bmRlZmluZWRcbiAgPyBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVFxuICA6IHR5cGVkQXJyYXlTdXBwb3J0KClcblxuLypcbiAqIEV4cG9ydCBrTWF4TGVuZ3RoIGFmdGVyIHR5cGVkIGFycmF5IHN1cHBvcnQgaXMgZGV0ZXJtaW5lZC5cbiAqL1xuZXhwb3J0cy5rTWF4TGVuZ3RoID0ga01heExlbmd0aCgpXG5cbmZ1bmN0aW9uIHR5cGVkQXJyYXlTdXBwb3J0ICgpIHtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkoMSlcbiAgICBhcnIuX19wcm90b19fID0ge19fcHJvdG9fXzogVWludDhBcnJheS5wcm90b3R5cGUsIGZvbzogZnVuY3Rpb24gKCkgeyByZXR1cm4gNDIgfX1cbiAgICByZXR1cm4gYXJyLmZvbygpID09PSA0MiAmJiAvLyB0eXBlZCBhcnJheSBpbnN0YW5jZXMgY2FuIGJlIGF1Z21lbnRlZFxuICAgICAgICB0eXBlb2YgYXJyLnN1YmFycmF5ID09PSAnZnVuY3Rpb24nICYmIC8vIGNocm9tZSA5LTEwIGxhY2sgYHN1YmFycmF5YFxuICAgICAgICBhcnIuc3ViYXJyYXkoMSwgMSkuYnl0ZUxlbmd0aCA9PT0gMCAvLyBpZTEwIGhhcyBicm9rZW4gYHN1YmFycmF5YFxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuZnVuY3Rpb24ga01heExlbmd0aCAoKSB7XG4gIHJldHVybiBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVFxuICAgID8gMHg3ZmZmZmZmZlxuICAgIDogMHgzZmZmZmZmZlxufVxuXG5mdW5jdGlvbiBjcmVhdGVCdWZmZXIgKHRoYXQsIGxlbmd0aCkge1xuICBpZiAoa01heExlbmd0aCgpIDwgbGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdHlwZWQgYXJyYXkgbGVuZ3RoJylcbiAgfVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICB0aGF0ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKVxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICBpZiAodGhhdCA9PT0gbnVsbCkge1xuICAgICAgdGhhdCA9IG5ldyBCdWZmZXIobGVuZ3RoKVxuICAgIH1cbiAgICB0aGF0Lmxlbmd0aCA9IGxlbmd0aFxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBUaGUgQnVmZmVyIGNvbnN0cnVjdG9yIHJldHVybnMgaW5zdGFuY2VzIG9mIGBVaW50OEFycmF5YCB0aGF0IGhhdmUgdGhlaXJcbiAqIHByb3RvdHlwZSBjaGFuZ2VkIHRvIGBCdWZmZXIucHJvdG90eXBlYC4gRnVydGhlcm1vcmUsIGBCdWZmZXJgIGlzIGEgc3ViY2xhc3Mgb2ZcbiAqIGBVaW50OEFycmF5YCwgc28gdGhlIHJldHVybmVkIGluc3RhbmNlcyB3aWxsIGhhdmUgYWxsIHRoZSBub2RlIGBCdWZmZXJgIG1ldGhvZHNcbiAqIGFuZCB0aGUgYFVpbnQ4QXJyYXlgIG1ldGhvZHMuIFNxdWFyZSBicmFja2V0IG5vdGF0aW9uIHdvcmtzIGFzIGV4cGVjdGVkIC0tIGl0XG4gKiByZXR1cm5zIGEgc2luZ2xlIG9jdGV0LlxuICpcbiAqIFRoZSBgVWludDhBcnJheWAgcHJvdG90eXBlIHJlbWFpbnMgdW5tb2RpZmllZC5cbiAqL1xuXG5mdW5jdGlvbiBCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiYgISh0aGlzIGluc3RhbmNlb2YgQnVmZmVyKSkge1xuICAgIHJldHVybiBuZXcgQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgLy8gQ29tbW9uIGNhc2UuXG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmdPck9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0lmIGVuY29kaW5nIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nJ1xuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gYWxsb2NVbnNhZmUodGhpcywgYXJnKVxuICB9XG4gIHJldHVybiBmcm9tKHRoaXMsIGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucG9vbFNpemUgPSA4MTkyIC8vIG5vdCB1c2VkIGJ5IHRoaXMgaW1wbGVtZW50YXRpb25cblxuLy8gVE9ETzogTGVnYWN5LCBub3QgbmVlZGVkIGFueW1vcmUuIFJlbW92ZSBpbiBuZXh0IG1ham9yIHZlcnNpb24uXG5CdWZmZXIuX2F1Z21lbnQgPSBmdW5jdGlvbiAoYXJyKSB7XG4gIGFyci5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gZnJvbSAodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cblxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZnJvbVN0cmluZyh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldClcbiAgfVxuXG4gIHJldHVybiBmcm9tT2JqZWN0KHRoYXQsIHZhbHVlKVxufVxuXG4vKipcbiAqIEZ1bmN0aW9uYWxseSBlcXVpdmFsZW50IHRvIEJ1ZmZlcihhcmcsIGVuY29kaW5nKSBidXQgdGhyb3dzIGEgVHlwZUVycm9yXG4gKiBpZiB2YWx1ZSBpcyBhIG51bWJlci5cbiAqIEJ1ZmZlci5mcm9tKHN0clssIGVuY29kaW5nXSlcbiAqIEJ1ZmZlci5mcm9tKGFycmF5KVxuICogQnVmZmVyLmZyb20oYnVmZmVyKVxuICogQnVmZmVyLmZyb20oYXJyYXlCdWZmZXJbLCBieXRlT2Zmc2V0WywgbGVuZ3RoXV0pXG4gKiovXG5CdWZmZXIuZnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBmcm9tKG51bGwsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbmlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICBCdWZmZXIucHJvdG90eXBlLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXkucHJvdG90eXBlXG4gIEJ1ZmZlci5fX3Byb3RvX18gPSBVaW50OEFycmF5XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wuc3BlY2llcyAmJlxuICAgICAgQnVmZmVyW1N5bWJvbC5zcGVjaWVzXSA9PT0gQnVmZmVyKSB7XG4gICAgLy8gRml4IHN1YmFycmF5KCkgaW4gRVMyMDE2LiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL3B1bGwvOTdcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLCBTeW1ib2wuc3BlY2llcywge1xuICAgICAgdmFsdWU6IG51bGwsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFNpemUgKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9IGVsc2UgaWYgKHNpemUgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG5lZ2F0aXZlJylcbiAgfVxufVxuXG5mdW5jdGlvbiBhbGxvYyAodGhhdCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICBpZiAoc2l6ZSA8PSAwKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxuICB9XG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPbmx5IHBheSBhdHRlbnRpb24gdG8gZW5jb2RpbmcgaWYgaXQncyBhIHN0cmluZy4gVGhpc1xuICAgIC8vIHByZXZlbnRzIGFjY2lkZW50YWxseSBzZW5kaW5nIGluIGEgbnVtYmVyIHRoYXQgd291bGRcbiAgICAvLyBiZSBpbnRlcnByZXR0ZWQgYXMgYSBzdGFydCBvZmZzZXQuXG4gICAgcmV0dXJuIHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZydcbiAgICAgID8gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgICA6IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwpXG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqIGFsbG9jKHNpemVbLCBmaWxsWywgZW5jb2RpbmddXSlcbiAqKi9cbkJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICByZXR1cm4gYWxsb2MobnVsbCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpXG59XG5cbmZ1bmN0aW9uIGFsbG9jVW5zYWZlICh0aGF0LCBzaXplKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplIDwgMCA/IDAgOiBjaGVja2VkKHNpemUpIHwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgKytpKSB7XG4gICAgICB0aGF0W2ldID0gMFxuICAgIH1cbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gQnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59XG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gU2xvd0J1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICovXG5CdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59XG5cbmZ1bmN0aW9uIGZyb21TdHJpbmcgKHRoYXQsIHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycgfHwgZW5jb2RpbmcgPT09ICcnKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgfVxuXG4gIGlmICghQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJlbmNvZGluZ1wiIG11c3QgYmUgYSB2YWxpZCBzdHJpbmcgZW5jb2RpbmcnKVxuICB9XG5cbiAgdmFyIGxlbmd0aCA9IGJ5dGVMZW5ndGgoc3RyaW5nLCBlbmNvZGluZykgfCAwXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuXG4gIHZhciBhY3R1YWwgPSB0aGF0LndyaXRlKHN0cmluZywgZW5jb2RpbmcpXG5cbiAgaWYgKGFjdHVhbCAhPT0gbGVuZ3RoKSB7XG4gICAgLy8gV3JpdGluZyBhIGhleCBzdHJpbmcsIGZvciBleGFtcGxlLCB0aGF0IGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyB3aWxsXG4gICAgLy8gY2F1c2UgZXZlcnl0aGluZyBhZnRlciB0aGUgZmlyc3QgaW52YWxpZCBjaGFyYWN0ZXIgdG8gYmUgaWdub3JlZC4gKGUuZy5cbiAgICAvLyAnYWJ4eGNkJyB3aWxsIGJlIHRyZWF0ZWQgYXMgJ2FiJylcbiAgICB0aGF0ID0gdGhhdC5zbGljZSgwLCBhY3R1YWwpXG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlMaWtlICh0aGF0LCBhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoIDwgMCA/IDAgOiBjaGVja2VkKGFycmF5Lmxlbmd0aCkgfCAwXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhhdFtpXSA9IGFycmF5W2ldICYgMjU1XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5QnVmZmVyICh0aGF0LCBhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gIGFycmF5LmJ5dGVMZW5ndGggLy8gdGhpcyB0aHJvd3MgaWYgYGFycmF5YCBpcyBub3QgYSB2YWxpZCBBcnJheUJ1ZmZlclxuXG4gIGlmIChieXRlT2Zmc2V0IDwgMCB8fCBhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdvZmZzZXRcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQgKyAobGVuZ3RoIHx8IDApKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ2xlbmd0aFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIGlmIChieXRlT2Zmc2V0ID09PSB1bmRlZmluZWQgJiYgbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5KVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldClcbiAgfSBlbHNlIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICB0aGF0ID0gYXJyYXlcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgdGhhdCA9IGZyb21BcnJheUxpa2UodGhhdCwgYXJyYXkpXG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbU9iamVjdCAodGhhdCwgb2JqKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIob2JqKSkge1xuICAgIHZhciBsZW4gPSBjaGVja2VkKG9iai5sZW5ndGgpIHwgMFxuICAgIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuKVxuXG4gICAgaWYgKHRoYXQubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhhdFxuICAgIH1cblxuICAgIG9iai5jb3B5KHRoYXQsIDAsIDAsIGxlbilcbiAgICByZXR1cm4gdGhhdFxuICB9XG5cbiAgaWYgKG9iaikge1xuICAgIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICBvYmouYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHx8ICdsZW5ndGgnIGluIG9iaikge1xuICAgICAgaWYgKHR5cGVvZiBvYmoubGVuZ3RoICE9PSAnbnVtYmVyJyB8fCBpc25hbihvYmoubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIDApXG4gICAgICB9XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmopXG4gICAgfVxuXG4gICAgaWYgKG9iai50eXBlID09PSAnQnVmZmVyJyAmJiBpc0FycmF5KG9iai5kYXRhKSkge1xuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqLmRhdGEpXG4gICAgfVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcignRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIGFycmF5LWxpa2Ugb2JqZWN0LicpXG59XG5cbmZ1bmN0aW9uIGNoZWNrZWQgKGxlbmd0aCkge1xuICAvLyBOb3RlOiBjYW5ub3QgdXNlIGBsZW5ndGggPCBrTWF4TGVuZ3RoKClgIGhlcmUgYmVjYXVzZSB0aGF0IGZhaWxzIHdoZW5cbiAgLy8gbGVuZ3RoIGlzIE5hTiAod2hpY2ggaXMgb3RoZXJ3aXNlIGNvZXJjZWQgdG8gemVyby4pXG4gIGlmIChsZW5ndGggPj0ga01heExlbmd0aCgpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ3NpemU6IDB4JyArIGtNYXhMZW5ndGgoKS50b1N0cmluZygxNikgKyAnIGJ5dGVzJylcbiAgfVxuICByZXR1cm4gbGVuZ3RoIHwgMFxufVxuXG5mdW5jdGlvbiBTbG93QnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKCtsZW5ndGggIT0gbGVuZ3RoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgbGVuZ3RoID0gMFxuICB9XG4gIHJldHVybiBCdWZmZXIuYWxsb2MoK2xlbmd0aClcbn1cblxuQnVmZmVyLmlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIgKGIpIHtcbiAgcmV0dXJuICEhKGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlcilcbn1cblxuQnVmZmVyLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlIChhLCBiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGEpIHx8ICFCdWZmZXIuaXNCdWZmZXIoYikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgbXVzdCBiZSBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChhID09PSBiKSByZXR1cm4gMFxuXG4gIHZhciB4ID0gYS5sZW5ndGhcbiAgdmFyIHkgPSBiLmxlbmd0aFxuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgIHggPSBhW2ldXG4gICAgICB5ID0gYltpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbkJ1ZmZlci5pc0VuY29kaW5nID0gZnVuY3Rpb24gaXNFbmNvZGluZyAoZW5jb2RpbmcpIHtcbiAgc3dpdGNoIChTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgY2FzZSAnbGF0aW4xJzpcbiAgICBjYXNlICdiaW5hcnknOlxuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldHVybiB0cnVlXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbkJ1ZmZlci5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQgKGxpc3QsIGxlbmd0aCkge1xuICBpZiAoIWlzQXJyYXkobGlzdCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbGVuZ3RoID0gMFxuICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICBsZW5ndGggKz0gbGlzdFtpXS5sZW5ndGhcbiAgICB9XG4gIH1cblxuICB2YXIgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbmd0aClcbiAgdmFyIHBvcyA9IDBcbiAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgYnVmID0gbGlzdFtpXVxuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gICAgfVxuICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxuICAgIHBvcyArPSBidWYubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlclxufVxuXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoc3RyaW5nKSkge1xuICAgIHJldHVybiBzdHJpbmcubGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgKEFycmF5QnVmZmVyLmlzVmlldyhzdHJpbmcpIHx8IHN0cmluZyBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSkge1xuICAgIHJldHVybiBzdHJpbmcuYnl0ZUxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHN0cmluZyA9ICcnICsgc3RyaW5nXG4gIH1cblxuICB2YXIgbGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAobGVuID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIFVzZSBhIGZvciBsb29wIHRvIGF2b2lkIHJlY3Vyc2lvblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsZW5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIGxlbiAqIDJcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBsZW4gPj4+IDFcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aCAvLyBhc3N1bWUgdXRmOFxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuQnVmZmVyLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5cbmZ1bmN0aW9uIHNsb3dUb1N0cmluZyAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcblxuICAvLyBObyBuZWVkIHRvIHZlcmlmeSB0aGF0IFwidGhpcy5sZW5ndGggPD0gTUFYX1VJTlQzMlwiIHNpbmNlIGl0J3MgYSByZWFkLW9ubHlcbiAgLy8gcHJvcGVydHkgb2YgYSB0eXBlZCBhcnJheS5cblxuICAvLyBUaGlzIGJlaGF2ZXMgbmVpdGhlciBsaWtlIFN0cmluZyBub3IgVWludDhBcnJheSBpbiB0aGF0IHdlIHNldCBzdGFydC9lbmRcbiAgLy8gdG8gdGhlaXIgdXBwZXIvbG93ZXIgYm91bmRzIGlmIHRoZSB2YWx1ZSBwYXNzZWQgaXMgb3V0IG9mIHJhbmdlLlxuICAvLyB1bmRlZmluZWQgaXMgaGFuZGxlZCBzcGVjaWFsbHkgYXMgcGVyIEVDTUEtMjYyIDZ0aCBFZGl0aW9uLFxuICAvLyBTZWN0aW9uIDEzLjMuMy43IFJ1bnRpbWUgU2VtYW50aWNzOiBLZXllZEJpbmRpbmdJbml0aWFsaXphdGlvbi5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQgfHwgc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgLy8gUmV0dXJuIGVhcmx5IGlmIHN0YXJ0ID4gdGhpcy5sZW5ndGguIERvbmUgaGVyZSB0byBwcmV2ZW50IHBvdGVudGlhbCB1aW50MzJcbiAgLy8gY29lcmNpb24gZmFpbCBiZWxvdy5cbiAgaWYgKHN0YXJ0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoZW5kIDw9IDApIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIC8vIEZvcmNlIGNvZXJzaW9uIHRvIHVpbnQzMi4gVGhpcyB3aWxsIGFsc28gY29lcmNlIGZhbHNleS9OYU4gdmFsdWVzIHRvIDAuXG4gIGVuZCA+Pj49IDBcbiAgc3RhcnQgPj4+PSAwXG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbi8vIFRoZSBwcm9wZXJ0eSBpcyB1c2VkIGJ5IGBCdWZmZXIuaXNCdWZmZXJgIGFuZCBgaXMtYnVmZmVyYCAoaW4gU2FmYXJpIDUtNykgdG8gZGV0ZWN0XG4vLyBCdWZmZXIgaW5zdGFuY2VzLlxuQnVmZmVyLnByb3RvdHlwZS5faXNCdWZmZXIgPSB0cnVlXG5cbmZ1bmN0aW9uIHN3YXAgKGIsIG4sIG0pIHtcbiAgdmFyIGkgPSBiW25dXG4gIGJbbl0gPSBiW21dXG4gIGJbbV0gPSBpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDE2ID0gZnVuY3Rpb24gc3dhcDE2ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSAyICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAxNi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMSlcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAzMiA9IGZ1bmN0aW9uIHN3YXAzMiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgNCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDMpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDIpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwNjQgPSBmdW5jdGlvbiBzd2FwNjQgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDggIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDY0LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDgpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyA3KVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyA2KVxuICAgIHN3YXAodGhpcywgaSArIDIsIGkgKyA1KVxuICAgIHN3YXAodGhpcywgaSArIDMsIGkgKyA0KVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCB8IDBcbiAgaWYgKGxlbmd0aCA9PT0gMCkgcmV0dXJuICcnXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIDAsIGxlbmd0aClcbiAgcmV0dXJuIHNsb3dUb1N0cmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzIChiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgaWYgKHRoaXMgPT09IGIpIHJldHVybiB0cnVlXG4gIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgdmFyIHN0ciA9ICcnXG4gIHZhciBtYXggPSBleHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTXG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICBzdHIgPSB0aGlzLnRvU3RyaW5nKCdoZXgnLCAwLCBtYXgpLm1hdGNoKC8uezJ9L2cpLmpvaW4oJyAnKVxuICAgIGlmICh0aGlzLmxlbmd0aCA+IG1heCkgc3RyICs9ICcgLi4uICdcbiAgfVxuICByZXR1cm4gJzxCdWZmZXIgJyArIHN0ciArICc+J1xufVxuXG5CdWZmZXIucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlICh0YXJnZXQsIHN0YXJ0LCBlbmQsIHRoaXNTdGFydCwgdGhpc0VuZCkge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIH1cblxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuZCA9IHRhcmdldCA/IHRhcmdldC5sZW5ndGggOiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc1N0YXJ0ID0gMFxuICB9XG4gIGlmICh0aGlzRW5kID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzRW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChzdGFydCA8IDAgfHwgZW5kID4gdGFyZ2V0Lmxlbmd0aCB8fCB0aGlzU3RhcnQgPCAwIHx8IHRoaXNFbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kICYmIHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kKSB7XG4gICAgcmV0dXJuIC0xXG4gIH1cbiAgaWYgKHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAxXG4gIH1cblxuICBzdGFydCA+Pj49IDBcbiAgZW5kID4+Pj0gMFxuICB0aGlzU3RhcnQgPj4+PSAwXG4gIHRoaXNFbmQgPj4+PSAwXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCkgcmV0dXJuIDBcblxuICB2YXIgeCA9IHRoaXNFbmQgLSB0aGlzU3RhcnRcbiAgdmFyIHkgPSBlbmQgLSBzdGFydFxuICB2YXIgbGVuID0gTWF0aC5taW4oeCwgeSlcblxuICB2YXIgdGhpc0NvcHkgPSB0aGlzLnNsaWNlKHRoaXNTdGFydCwgdGhpc0VuZClcbiAgdmFyIHRhcmdldENvcHkgPSB0YXJnZXQuc2xpY2Uoc3RhcnQsIGVuZClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKHRoaXNDb3B5W2ldICE9PSB0YXJnZXRDb3B5W2ldKSB7XG4gICAgICB4ID0gdGhpc0NvcHlbaV1cbiAgICAgIHkgPSB0YXJnZXRDb3B5W2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuLy8gRmluZHMgZWl0aGVyIHRoZSBmaXJzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPj0gYGJ5dGVPZmZzZXRgLFxuLy8gT1IgdGhlIGxhc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0IDw9IGBieXRlT2Zmc2V0YC5cbi8vXG4vLyBBcmd1bWVudHM6XG4vLyAtIGJ1ZmZlciAtIGEgQnVmZmVyIHRvIHNlYXJjaFxuLy8gLSB2YWwgLSBhIHN0cmluZywgQnVmZmVyLCBvciBudW1iZXJcbi8vIC0gYnl0ZU9mZnNldCAtIGFuIGluZGV4IGludG8gYGJ1ZmZlcmA7IHdpbGwgYmUgY2xhbXBlZCB0byBhbiBpbnQzMlxuLy8gLSBlbmNvZGluZyAtIGFuIG9wdGlvbmFsIGVuY29kaW5nLCByZWxldmFudCBpcyB2YWwgaXMgYSBzdHJpbmdcbi8vIC0gZGlyIC0gdHJ1ZSBmb3IgaW5kZXhPZiwgZmFsc2UgZm9yIGxhc3RJbmRleE9mXG5mdW5jdGlvbiBiaWRpcmVjdGlvbmFsSW5kZXhPZiAoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgLy8gRW1wdHkgYnVmZmVyIG1lYW5zIG5vIG1hdGNoXG4gIGlmIChidWZmZXIubGVuZ3RoID09PSAwKSByZXR1cm4gLTFcblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldFxuICBpZiAodHlwZW9mIGJ5dGVPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBieXRlT2Zmc2V0XG4gICAgYnl0ZU9mZnNldCA9IDBcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0ID4gMHg3ZmZmZmZmZikge1xuICAgIGJ5dGVPZmZzZXQgPSAweDdmZmZmZmZmXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IC0weDgwMDAwMDAwKSB7XG4gICAgYnl0ZU9mZnNldCA9IC0weDgwMDAwMDAwXG4gIH1cbiAgYnl0ZU9mZnNldCA9ICtieXRlT2Zmc2V0ICAvLyBDb2VyY2UgdG8gTnVtYmVyLlxuICBpZiAoaXNOYU4oYnl0ZU9mZnNldCkpIHtcbiAgICAvLyBieXRlT2Zmc2V0OiBpdCBpdCdzIHVuZGVmaW5lZCwgbnVsbCwgTmFOLCBcImZvb1wiLCBldGMsIHNlYXJjaCB3aG9sZSBidWZmZXJcbiAgICBieXRlT2Zmc2V0ID0gZGlyID8gMCA6IChidWZmZXIubGVuZ3RoIC0gMSlcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0OiBuZWdhdGl2ZSBvZmZzZXRzIHN0YXJ0IGZyb20gdGhlIGVuZCBvZiB0aGUgYnVmZmVyXG4gIGlmIChieXRlT2Zmc2V0IDwgMCkgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggKyBieXRlT2Zmc2V0XG4gIGlmIChieXRlT2Zmc2V0ID49IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICBpZiAoZGlyKSByZXR1cm4gLTFcbiAgICBlbHNlIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoIC0gMVxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAwKSB7XG4gICAgaWYgKGRpcikgYnl0ZU9mZnNldCA9IDBcbiAgICBlbHNlIHJldHVybiAtMVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIHZhbFxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YWwgPSBCdWZmZXIuZnJvbSh2YWwsIGVuY29kaW5nKVxuICB9XG5cbiAgLy8gRmluYWxseSwgc2VhcmNoIGVpdGhlciBpbmRleE9mIChpZiBkaXIgaXMgdHJ1ZSkgb3IgbGFzdEluZGV4T2ZcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWwpKSB7XG4gICAgLy8gU3BlY2lhbCBjYXNlOiBsb29raW5nIGZvciBlbXB0eSBzdHJpbmcvYnVmZmVyIGFsd2F5cyBmYWlsc1xuICAgIGlmICh2YWwubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gLTFcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDB4RkYgLy8gU2VhcmNoIGZvciBhIGJ5dGUgdmFsdWUgWzAtMjU1XVxuICAgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJlxuICAgICAgICB0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKGRpcikge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCBbIHZhbCBdLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmFsIG11c3QgYmUgc3RyaW5nLCBudW1iZXIgb3IgQnVmZmVyJylcbn1cblxuZnVuY3Rpb24gYXJyYXlJbmRleE9mIChhcnIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICB2YXIgaW5kZXhTaXplID0gMVxuICB2YXIgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aFxuICB2YXIgdmFsTGVuZ3RoID0gdmFsLmxlbmd0aFxuXG4gIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSBTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICBpZiAoZW5jb2RpbmcgPT09ICd1Y3MyJyB8fCBlbmNvZGluZyA9PT0gJ3Vjcy0yJyB8fFxuICAgICAgICBlbmNvZGluZyA9PT0gJ3V0ZjE2bGUnIHx8IGVuY29kaW5nID09PSAndXRmLTE2bGUnKSB7XG4gICAgICBpZiAoYXJyLmxlbmd0aCA8IDIgfHwgdmFsLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIC0xXG4gICAgICB9XG4gICAgICBpbmRleFNpemUgPSAyXG4gICAgICBhcnJMZW5ndGggLz0gMlxuICAgICAgdmFsTGVuZ3RoIC89IDJcbiAgICAgIGJ5dGVPZmZzZXQgLz0gMlxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWQgKGJ1ZiwgaSkge1xuICAgIGlmIChpbmRleFNpemUgPT09IDEpIHtcbiAgICAgIHJldHVybiBidWZbaV1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJ1Zi5yZWFkVUludDE2QkUoaSAqIGluZGV4U2l6ZSlcbiAgICB9XG4gIH1cblxuICB2YXIgaVxuICBpZiAoZGlyKSB7XG4gICAgdmFyIGZvdW5kSW5kZXggPSAtMVxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPCBhcnJMZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHJlYWQoYXJyLCBpKSA9PT0gcmVhZCh2YWwsIGZvdW5kSW5kZXggPT09IC0xID8gMCA6IGkgLSBmb3VuZEluZGV4KSkge1xuICAgICAgICBpZiAoZm91bmRJbmRleCA9PT0gLTEpIGZvdW5kSW5kZXggPSBpXG4gICAgICAgIGlmIChpIC0gZm91bmRJbmRleCArIDEgPT09IHZhbExlbmd0aCkgcmV0dXJuIGZvdW5kSW5kZXggKiBpbmRleFNpemVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ICE9PSAtMSkgaSAtPSBpIC0gZm91bmRJbmRleFxuICAgICAgICBmb3VuZEluZGV4ID0gLTFcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGJ5dGVPZmZzZXQgKyB2YWxMZW5ndGggPiBhcnJMZW5ndGgpIGJ5dGVPZmZzZXQgPSBhcnJMZW5ndGggLSB2YWxMZW5ndGhcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGZvdW5kID0gdHJ1ZVxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWxMZW5ndGg7IGorKykge1xuICAgICAgICBpZiAocmVhZChhcnIsIGkgKyBqKSAhPT0gcmVhZCh2YWwsIGopKSB7XG4gICAgICAgICAgZm91bmQgPSBmYWxzZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChmb3VuZCkgcmV0dXJuIGlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uIGluY2x1ZGVzICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiB0aGlzLmluZGV4T2YodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgIT09IC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIHRydWUpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbiBsYXN0SW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZmFsc2UpXG59XG5cbmZ1bmN0aW9uIGhleFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMFxuICB2YXIgcmVtYWluaW5nID0gYnVmLmxlbmd0aCAtIG9mZnNldFxuICBpZiAoIWxlbmd0aCkge1xuICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IE51bWJlcihsZW5ndGgpXG4gICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuICAgICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gICAgfVxuICB9XG5cbiAgLy8gbXVzdCBiZSBhbiBldmVuIG51bWJlciBvZiBkaWdpdHNcbiAgdmFyIHN0ckxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKHN0ckxlbiAlIDIgIT09IDApIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgaGV4IHN0cmluZycpXG5cbiAgaWYgKGxlbmd0aCA+IHN0ckxlbiAvIDIpIHtcbiAgICBsZW5ndGggPSBzdHJMZW4gLyAyXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIHZhciBwYXJzZWQgPSBwYXJzZUludChzdHJpbmcuc3Vic3RyKGkgKiAyLCAyKSwgMTYpXG4gICAgaWYgKGlzTmFOKHBhcnNlZCkpIHJldHVybiBpXG4gICAgYnVmW29mZnNldCArIGldID0gcGFyc2VkXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYXNjaWlXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBsYXRpbjFXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBhc2NpaVdyaXRlKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYmFzZTY0V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihiYXNlNjRUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIHVjczJXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjE2bGVUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiB3cml0ZSAoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCwgZW5jb2RpbmcpIHtcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZylcbiAgaWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgZW5jb2RpbmcpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IG9mZnNldFxuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBvZmZzZXRbLCBsZW5ndGhdWywgZW5jb2RpbmddKVxuICB9IGVsc2UgaWYgKGlzRmluaXRlKG9mZnNldCkpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gICAgaWYgKGlzRmluaXRlKGxlbmd0aCkpIHtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCB8IDBcbiAgICAgIGlmIChlbmNvZGluZyA9PT0gdW5kZWZpbmVkKSBlbmNvZGluZyA9ICd1dGY4J1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aFxuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG4gICAgfVxuICAvLyBsZWdhY3kgd3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0LCBsZW5ndGgpIC0gcmVtb3ZlIGluIHYwLjEzXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0J1ZmZlci53cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXRbLCBsZW5ndGhdKSBpcyBubyBsb25nZXIgc3VwcG9ydGVkJ1xuICAgIClcbiAgfVxuXG4gIHZhciByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldFxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbGVuZ3RoID4gcmVtYWluaW5nKSBsZW5ndGggPSByZW1haW5pbmdcblxuICBpZiAoKHN0cmluZy5sZW5ndGggPiAwICYmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDApKSB8fCBvZmZzZXQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIC8vIFdhcm5pbmc6IG1heExlbmd0aCBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIGJhc2U2NFdyaXRlXG4gICAgICAgIHJldHVybiBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdWNzMldyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1ZilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcbiAgdmFyIHJlcyA9IFtdXG5cbiAgdmFyIGkgPSBzdGFydFxuICB3aGlsZSAoaSA8IGVuZCkge1xuICAgIHZhciBmaXJzdEJ5dGUgPSBidWZbaV1cbiAgICB2YXIgY29kZVBvaW50ID0gbnVsbFxuICAgIHZhciBieXRlc1BlclNlcXVlbmNlID0gKGZpcnN0Qnl0ZSA+IDB4RUYpID8gNFxuICAgICAgOiAoZmlyc3RCeXRlID4gMHhERikgPyAzXG4gICAgICA6IChmaXJzdEJ5dGUgPiAweEJGKSA/IDJcbiAgICAgIDogMVxuXG4gICAgaWYgKGkgKyBieXRlc1BlclNlcXVlbmNlIDw9IGVuZCkge1xuICAgICAgdmFyIHNlY29uZEJ5dGUsIHRoaXJkQnl0ZSwgZm91cnRoQnl0ZSwgdGVtcENvZGVQb2ludFxuXG4gICAgICBzd2l0Y2ggKGJ5dGVzUGVyU2VxdWVuY2UpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmIChmaXJzdEJ5dGUgPCAweDgwKSB7XG4gICAgICAgICAgICBjb2RlUG9pbnQgPSBmaXJzdEJ5dGVcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHgxRikgPDwgMHg2IHwgKHNlY29uZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4QyB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKHRoaXJkQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0ZGICYmICh0ZW1wQ29kZVBvaW50IDwgMHhEODAwIHx8IHRlbXBDb2RlUG9pbnQgPiAweERGRkYpKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGZvdXJ0aEJ5dGUgPSBidWZbaSArIDNdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwICYmIChmb3VydGhCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweDEyIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweEMgfCAodGhpcmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKGZvdXJ0aEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweEZGRkYgJiYgdGVtcENvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvZGVQb2ludCA9PT0gbnVsbCkge1xuICAgICAgLy8gd2UgZGlkIG5vdCBnZW5lcmF0ZSBhIHZhbGlkIGNvZGVQb2ludCBzbyBpbnNlcnQgYVxuICAgICAgLy8gcmVwbGFjZW1lbnQgY2hhciAoVStGRkZEKSBhbmQgYWR2YW5jZSBvbmx5IDEgYnl0ZVxuICAgICAgY29kZVBvaW50ID0gMHhGRkZEXG4gICAgICBieXRlc1BlclNlcXVlbmNlID0gMVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50ID4gMHhGRkZGKSB7XG4gICAgICAvLyBlbmNvZGUgdG8gdXRmMTYgKHN1cnJvZ2F0ZSBwYWlyIGRhbmNlKVxuICAgICAgY29kZVBvaW50IC09IDB4MTAwMDBcbiAgICAgIHJlcy5wdXNoKGNvZGVQb2ludCA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMClcbiAgICAgIGNvZGVQb2ludCA9IDB4REMwMCB8IGNvZGVQb2ludCAmIDB4M0ZGXG4gICAgfVxuXG4gICAgcmVzLnB1c2goY29kZVBvaW50KVxuICAgIGkgKz0gYnl0ZXNQZXJTZXF1ZW5jZVxuICB9XG5cbiAgcmV0dXJuIGRlY29kZUNvZGVQb2ludHNBcnJheShyZXMpXG59XG5cbi8vIEJhc2VkIG9uIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIyNzQ3MjcyLzY4MDc0MiwgdGhlIGJyb3dzZXIgd2l0aFxuLy8gdGhlIGxvd2VzdCBsaW1pdCBpcyBDaHJvbWUsIHdpdGggMHgxMDAwMCBhcmdzLlxuLy8gV2UgZ28gMSBtYWduaXR1ZGUgbGVzcywgZm9yIHNhZmV0eVxudmFyIE1BWF9BUkdVTUVOVFNfTEVOR1RIID0gMHgxMDAwXG5cbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludHNBcnJheSAoY29kZVBvaW50cykge1xuICB2YXIgbGVuID0gY29kZVBvaW50cy5sZW5ndGhcbiAgaWYgKGxlbiA8PSBNQVhfQVJHVU1FTlRTX0xFTkdUSCkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY29kZVBvaW50cykgLy8gYXZvaWQgZXh0cmEgc2xpY2UoKVxuICB9XG5cbiAgLy8gRGVjb2RlIGluIGNodW5rcyB0byBhdm9pZCBcImNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiLlxuICB2YXIgcmVzID0gJydcbiAgdmFyIGkgPSAwXG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoXG4gICAgICBTdHJpbmcsXG4gICAgICBjb2RlUG9pbnRzLnNsaWNlKGksIGkgKz0gTUFYX0FSR1VNRU5UU19MRU5HVEgpXG4gICAgKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0gJiAweDdGKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gbGF0aW4xU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gaGV4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgfHwgZW5kIDwgMCB8fCBlbmQgPiBsZW4pIGVuZCA9IGxlblxuXG4gIHZhciBvdXQgPSAnJ1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIG91dCArPSB0b0hleChidWZbaV0pXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZClcbiAgdmFyIHJlcyA9ICcnXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIGJ5dGVzW2kgKyAxXSAqIDI1NilcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiBzbGljZSAoc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgc3RhcnQgPSB+fnN0YXJ0XG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogfn5lbmRcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgKz0gbGVuXG4gICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIH0gZWxzZSBpZiAoc3RhcnQgPiBsZW4pIHtcbiAgICBzdGFydCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgKz0gbGVuXG4gICAgaWYgKGVuZCA8IDApIGVuZCA9IDBcbiAgfSBlbHNlIGlmIChlbmQgPiBsZW4pIHtcbiAgICBlbmQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICB2YXIgbmV3QnVmXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIG5ld0J1ZiA9IHRoaXMuc3ViYXJyYXkoc3RhcnQsIGVuZClcbiAgICBuZXdCdWYuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIHZhciBzbGljZUxlbiA9IGVuZCAtIHN0YXJ0XG4gICAgbmV3QnVmID0gbmV3IEJ1ZmZlcihzbGljZUxlbiwgdW5kZWZpbmVkKVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpY2VMZW47ICsraSkge1xuICAgICAgbmV3QnVmW2ldID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ld0J1ZlxufVxuXG4vKlxuICogTmVlZCB0byBtYWtlIHN1cmUgdGhhdCBidWZmZXIgaXNuJ3QgdHJ5aW5nIHRvIHdyaXRlIG91dCBvZiBib3VuZHMuXG4gKi9cbmZ1bmN0aW9uIGNoZWNrT2Zmc2V0IChvZmZzZXQsIGV4dCwgbGVuZ3RoKSB7XG4gIGlmICgob2Zmc2V0ICUgMSkgIT09IDAgfHwgb2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBpcyBub3QgdWludCcpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBsZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdUcnlpbmcgdG8gYWNjZXNzIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludExFID0gZnVuY3Rpb24gcmVhZFVJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludEJFID0gZnVuY3Rpb24gcmVhZFVJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcbiAgfVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF1cbiAgdmFyIG11bCA9IDFcbiAgd2hpbGUgKGJ5dGVMZW5ndGggPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIHJlYWRVSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkxFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCA4KSB8IHRoaXNbb2Zmc2V0ICsgMV1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyTEUgPSBmdW5jdGlvbiByZWFkVUludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKCh0aGlzW29mZnNldF0pIHxcbiAgICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSkgK1xuICAgICAgKHRoaXNbb2Zmc2V0ICsgM10gKiAweDEwMDAwMDApXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gKiAweDEwMDAwMDApICtcbiAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgdGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50TEUgPSBmdW5jdGlvbiByZWFkSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50QkUgPSBmdW5jdGlvbiByZWFkSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgaSA9IGJ5dGVMZW5ndGhcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1pXVxuICB3aGlsZSAoaSA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50OCA9IGZ1bmN0aW9uIHJlYWRJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIGlmICghKHRoaXNbb2Zmc2V0XSAmIDB4ODApKSByZXR1cm4gKHRoaXNbb2Zmc2V0XSlcbiAgcmV0dXJuICgoMHhmZiAtIHRoaXNbb2Zmc2V0XSArIDEpICogLTEpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2TEUgPSBmdW5jdGlvbiByZWFkSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24gcmVhZEludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgMV0gfCAodGhpc1tvZmZzZXRdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0pIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSA8PCAyNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdExFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRCRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdEJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUxFID0gZnVuY3Rpb24gcmVhZERvdWJsZUxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCA1MiwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiByZWFkRG91YmxlQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCA1MiwgOClcbn1cblxuZnVuY3Rpb24gY2hlY2tJbnQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZmZlclwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKVxuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgaXMgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlVUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlVUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVVSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweGZmLCAwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDE2IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDIpOyBpIDwgajsgKytpKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlICYgKDB4ZmYgPDwgKDggKiAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSkpKSA+Pj5cbiAgICAgIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpICogOFxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDMyIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCA0KTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSA+Pj4gKGxpdHRsZUVuZGlhbiA/IGkgOiAzIC0gaSkgKiA4KSAmIDB4ZmZcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSAwXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSAtIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSArIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4N2YsIC0weDgwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5mdW5jdGlvbiBjaGVja0lFRUU3NTQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG4gIGlmIChvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuZnVuY3Rpb24gd3JpdGVGbG9hdCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA0LCAzLjQwMjgyMzQ2NjM4NTI4ODZlKzM4LCAtMy40MDI4MjM0NjYzODUyODg2ZSszOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCAyMywgNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0TEUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiB3cml0ZURvdWJsZSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA4LCAxLjc5NzY5MzEzNDg2MjMxNTdFKzMwOCwgLTEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDUyLCA4KVxuICByZXR1cm4gb2Zmc2V0ICsgOFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlTEUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbi8vIGNvcHkodGFyZ2V0QnVmZmVyLCB0YXJnZXRTdGFydD0wLCBzb3VyY2VTdGFydD0wLCBzb3VyY2VFbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkgKHRhcmdldCwgdGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwXG4gIGlmICghZW5kICYmIGVuZCAhPT0gMCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldFN0YXJ0ID49IHRhcmdldC5sZW5ndGgpIHRhcmdldFN0YXJ0ID0gdGFyZ2V0Lmxlbmd0aFxuICBpZiAoIXRhcmdldFN0YXJ0KSB0YXJnZXRTdGFydCA9IDBcbiAgaWYgKGVuZCA+IDAgJiYgZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgLy8gQ29weSAwIGJ5dGVzOyB3ZSdyZSBkb25lXG4gIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm4gMFxuICBpZiAodGFyZ2V0Lmxlbmd0aCA9PT0gMCB8fCB0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBGYXRhbCBlcnJvciBjb25kaXRpb25zXG4gIGlmICh0YXJnZXRTdGFydCA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigndGFyZ2V0U3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIH1cbiAgaWYgKHN0YXJ0IDwgMCB8fCBzdGFydCA+PSB0aGlzLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZVN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICBpZiAoZW5kIDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZUVuZCBvdXQgb2YgYm91bmRzJylcblxuICAvLyBBcmUgd2Ugb29iP1xuICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgPCBlbmQgLSBzdGFydCkge1xuICAgIGVuZCA9IHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCArIHN0YXJ0XG4gIH1cblxuICB2YXIgbGVuID0gZW5kIC0gc3RhcnRcbiAgdmFyIGlcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHN0YXJ0IDwgdGFyZ2V0U3RhcnQgJiYgdGFyZ2V0U3RhcnQgPCBlbmQpIHtcbiAgICAvLyBkZXNjZW5kaW5nIGNvcHkgZnJvbSBlbmRcbiAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSBpZiAobGVuIDwgMTAwMCB8fCAhQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBhc2NlbmRpbmcgY29weSBmcm9tIHN0YXJ0XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChcbiAgICAgIHRhcmdldCxcbiAgICAgIHRoaXMuc3ViYXJyYXkoc3RhcnQsIHN0YXJ0ICsgbGVuKSxcbiAgICAgIHRhcmdldFN0YXJ0XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGxlblxufVxuXG4vLyBVc2FnZTpcbi8vICAgIGJ1ZmZlci5maWxsKG51bWJlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSlcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwgKHZhbCwgc3RhcnQsIGVuZCwgZW5jb2RpbmcpIHtcbiAgLy8gSGFuZGxlIHN0cmluZyBjYXNlczpcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gc3RhcnRcbiAgICAgIHN0YXJ0ID0gMFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuZFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9XG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZhciBjb2RlID0gdmFsLmNoYXJDb2RlQXQoMClcbiAgICAgIGlmIChjb2RlIDwgMjU2KSB7XG4gICAgICAgIHZhbCA9IGNvZGVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZycpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAyNTVcbiAgfVxuXG4gIC8vIEludmFsaWQgcmFuZ2VzIGFyZSBub3Qgc2V0IHRvIGEgZGVmYXVsdCwgc28gY2FuIHJhbmdlIGNoZWNrIGVhcmx5LlxuICBpZiAoc3RhcnQgPCAwIHx8IHRoaXMubGVuZ3RoIDwgc3RhcnQgfHwgdGhpcy5sZW5ndGggPCBlbmQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignT3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgc3RhcnQgPSBzdGFydCA+Pj4gMFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IHRoaXMubGVuZ3RoIDogZW5kID4+PiAwXG5cbiAgaWYgKCF2YWwpIHZhbCA9IDBcblxuICB2YXIgaVxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgICB0aGlzW2ldID0gdmFsXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBieXRlcyA9IEJ1ZmZlci5pc0J1ZmZlcih2YWwpXG4gICAgICA/IHZhbFxuICAgICAgOiB1dGY4VG9CeXRlcyhuZXcgQnVmZmVyKHZhbCwgZW5jb2RpbmcpLnRvU3RyaW5nKCkpXG4gICAgdmFyIGxlbiA9IGJ5dGVzLmxlbmd0aFxuICAgIGZvciAoaSA9IDA7IGkgPCBlbmQgLSBzdGFydDsgKytpKSB7XG4gICAgICB0aGlzW2kgKyBzdGFydF0gPSBieXRlc1tpICUgbGVuXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIEhFTFBFUiBGVU5DVElPTlNcbi8vID09PT09PT09PT09PT09PT1cblxudmFyIElOVkFMSURfQkFTRTY0X1JFID0gL1teK1xcLzAtOUEtWmEtei1fXS9nXG5cbmZ1bmN0aW9uIGJhc2U2NGNsZWFuIChzdHIpIHtcbiAgLy8gTm9kZSBzdHJpcHMgb3V0IGludmFsaWQgY2hhcmFjdGVycyBsaWtlIFxcbiBhbmQgXFx0IGZyb20gdGhlIHN0cmluZywgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHN0ciA9IHN0cmluZ3RyaW0oc3RyKS5yZXBsYWNlKElOVkFMSURfQkFTRTY0X1JFLCAnJylcbiAgLy8gTm9kZSBjb252ZXJ0cyBzdHJpbmdzIHdpdGggbGVuZ3RoIDwgMiB0byAnJ1xuICBpZiAoc3RyLmxlbmd0aCA8IDIpIHJldHVybiAnJ1xuICAvLyBOb2RlIGFsbG93cyBmb3Igbm9uLXBhZGRlZCBiYXNlNjQgc3RyaW5ncyAobWlzc2luZyB0cmFpbGluZyA9PT0pLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgd2hpbGUgKHN0ci5sZW5ndGggJSA0ICE9PSAwKSB7XG4gICAgc3RyID0gc3RyICsgJz0nXG4gIH1cbiAgcmV0dXJuIHN0clxufVxuXG5mdW5jdGlvbiBzdHJpbmd0cmltIChzdHIpIHtcbiAgaWYgKHN0ci50cmltKSByZXR1cm4gc3RyLnRyaW0oKVxuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKVxufVxuXG5mdW5jdGlvbiB0b0hleCAobikge1xuICBpZiAobiA8IDE2KSByZXR1cm4gJzAnICsgbi50b1N0cmluZygxNilcbiAgcmV0dXJuIG4udG9TdHJpbmcoMTYpXG59XG5cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzIChzdHJpbmcsIHVuaXRzKSB7XG4gIHVuaXRzID0gdW5pdHMgfHwgSW5maW5pdHlcbiAgdmFyIGNvZGVQb2ludFxuICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aFxuICB2YXIgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcbiAgdmFyIGJ5dGVzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgY29kZVBvaW50ID0gc3RyaW5nLmNoYXJDb2RlQXQoaSlcblxuICAgIC8vIGlzIHN1cnJvZ2F0ZSBjb21wb25lbnRcbiAgICBpZiAoY29kZVBvaW50ID4gMHhEN0ZGICYmIGNvZGVQb2ludCA8IDB4RTAwMCkge1xuICAgICAgLy8gbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICghbGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgICAvLyBubyBsZWFkIHlldFxuICAgICAgICBpZiAoY29kZVBvaW50ID4gMHhEQkZGKSB7XG4gICAgICAgICAgLy8gdW5leHBlY3RlZCB0cmFpbFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSBpZiAoaSArIDEgPT09IGxlbmd0aCkge1xuICAgICAgICAgIC8vIHVucGFpcmVkIGxlYWRcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdmFsaWQgbGVhZFxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gMiBsZWFkcyBpbiBhIHJvd1xuICAgICAgaWYgKGNvZGVQb2ludCA8IDB4REMwMCkge1xuICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyB2YWxpZCBzdXJyb2dhdGUgcGFpclxuICAgICAgY29kZVBvaW50ID0gKGxlYWRTdXJyb2dhdGUgLSAweEQ4MDAgPDwgMTAgfCBjb2RlUG9pbnQgLSAweERDMDApICsgMHgxMDAwMFxuICAgIH0gZWxzZSBpZiAobGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgLy8gdmFsaWQgYm1wIGNoYXIsIGJ1dCBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgfVxuXG4gICAgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcblxuICAgIC8vIGVuY29kZSB1dGY4XG4gICAgaWYgKGNvZGVQb2ludCA8IDB4ODApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMSkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChjb2RlUG9pbnQpXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDgwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2IHwgMHhDMCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyB8IDB4RTAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDQpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDEyIHwgMHhGMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb2RlIHBvaW50JylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnl0ZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlUb0J5dGVzIChzdHIpIHtcbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgLy8gTm9kZSdzIGNvZGUgc2VlbXMgdG8gYmUgZG9pbmcgdGhpcyBhbmQgbm90ICYgMHg3Ri4uXG4gICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKVxuICB9XG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVRvQnl0ZXMgKHN0ciwgdW5pdHMpIHtcbiAgdmFyIGMsIGhpLCBsb1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcblxuICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKVxuICAgIGhpID0gYyA+PiA4XG4gICAgbG8gPSBjICUgMjU2XG4gICAgYnl0ZUFycmF5LnB1c2gobG8pXG4gICAgYnl0ZUFycmF5LnB1c2goaGkpXG4gIH1cblxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMgKHN0cikge1xuICByZXR1cm4gYmFzZTY0LnRvQnl0ZUFycmF5KGJhc2U2NGNsZWFuKHN0cikpXG59XG5cbmZ1bmN0aW9uIGJsaXRCdWZmZXIgKHNyYywgZHN0LCBvZmZzZXQsIGxlbmd0aCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgaWYgKChpICsgb2Zmc2V0ID49IGRzdC5sZW5ndGgpIHx8IChpID49IHNyYy5sZW5ndGgpKSBicmVha1xuICAgIGRzdFtpICsgb2Zmc2V0XSA9IHNyY1tpXVxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIGlzbmFuICh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gdmFsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG59XG4iLCIoZnVuY3Rpb24oZSwgYSkgeyBmb3IodmFyIGkgaW4gYSkgZVtpXSA9IGFbaV07IH0oZXhwb3J0cywgLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbi8qKioqKiovIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4vKioqKioqLyBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuLyoqKioqKi8gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbi8qKioqKiovIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4vKioqKioqLyBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbi8qKioqKiovIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbi8qKioqKiovIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuLyoqKioqKi8gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4vKioqKioqLyBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuLyoqKioqKi8gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbi8qKioqKiovIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4vKioqKioqLyBcdFx0cmV0dXJuIG5zO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBcIi4vc3JjL2NsaWVudHMvcGllY2VzLndvcmtlci50c1wiKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKHtcblxuLyoqKi8gXCIuL3NyYy9jbGllbnRzL3BpZWNlcy53b3JrZXIudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2NsaWVudHMvcGllY2VzLndvcmtlci50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIF9fYXdhaXRlciA9IHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7XG4gICAgICAgICAgICByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQudmFsdWUpO1xuICAgICAgICAgICAgfSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTtcbiAgICAgICAgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xudmFyIF9fZ2VuZXJhdG9yID0gdGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodFswXSAmIDEpIHRocm93IHRbMV07cmV0dXJuIHRbMV07XG4gICAgICAgIH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sXG4gICAgICAgIGYsXG4gICAgICAgIHksXG4gICAgICAgIHQsXG4gICAgICAgIGc7XG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSksIGc7XG4gICAgZnVuY3Rpb24gdmVyYihuKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAodikge1xuICAgICAgICAgICAgcmV0dXJuIHN0ZXAoW24sIHZdKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIHQgPSBvcDticmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIF8ubGFiZWwrKztyZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBfLmxhYmVsKys7eSA9IG9wWzFdO29wID0gWzBdO2NvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgb3AgPSBfLm9wcy5wb3AoKTtfLnRyeXMucG9wKCk7Y29udGludWU7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8gPSAwO2NvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgb3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8ubGFiZWwgPSBvcFsxXTticmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8ubGFiZWwgPSB0WzFdO3QgPSBvcDticmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5sYWJlbCA9IHRbMl07Xy5vcHMucHVzaChvcCk7YnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7Y29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgb3AgPSBbNiwgZV07eSA9IDA7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBmID0gdCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07cmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcbiAgICB9XG59O1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxudmFyIGN0eCA9IHNlbGY7XG4vLyBSZXNwb25kIHRvIG1lc3NhZ2UgZnJvbSBwYXJlbnQgdGhyZWFkXG5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgYmxvYiA9IGV2ZW50LmRhdGEuYmxvYjtcbiAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICBmdW5jdGlvbiBvbkxvYWRFbmQoZSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgUHJvbWlzZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGJ1ZmZlciwgcGllY2VJbmRleCwgb2Zmc2V0LCBpbmZvSGFzaCwgZGF0YTtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICByZWFkZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImxvYWRlbmRcIiwgb25Mb2FkRW5kLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgYnVmZmVyID0gQnVmZmVyLmZyb20ocmVhZGVyLnJlc3VsdCk7XG4gICAgICAgICAgICAgICAgcGllY2VJbmRleCA9IGJ1ZmZlci5yZWFkVUludDMyQkUoMCk7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gYnVmZmVyLnJlYWRVSW50MzJCRSgwICsgNCk7XG4gICAgICAgICAgICAgICAgaW5mb0hhc2ggPSBidWZmZXIudG9TdHJpbmcoXCJoZXhcIiwgNCArIDQsIDI0ICsgNCk7XG4gICAgICAgICAgICAgICAgZGF0YSA9IGJ1ZmZlci5zbGljZSgyNCArIDQsIGJ1ZmZlci5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIGN0eC5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4OiBwaWVjZUluZGV4LFxuICAgICAgICAgICAgICAgICAgICBpbmZvSGFzaDogaW5mb0hhc2gsXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldDogb2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBkYXRhXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZWFkZXIuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRlbmRcIiwgb25Mb2FkRW5kLCBmYWxzZSk7XG4gICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGJsb2IpO1xufSk7XG5cbi8qKiovIH0pXG5cbi8qKioqKiovIH0pKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2ZDJWaWNHRmpheTlpYjI5MGMzUnlZWEFpTENKM1pXSndZV05yT2k4dkx5NHZjM0pqTDJOc2FXVnVkSE12Y0dsbFkyVnpMbmR2Y210bGNpNTBjeUpkTENKdVlXMWxjeUk2V3lKZlgyRjNZV2wwWlhJaUxDSjBhR2x6UVhKbklpd2lYMkZ5WjNWdFpXNTBjeUlzSWxBaUxDSm5aVzVsY21GMGIzSWlMQ0pRY205dGFYTmxJaXdpY21WemIyeDJaU0lzSW5KbGFtVmpkQ0lzSW1aMWJHWnBiR3hsWkNJc0luWmhiSFZsSWl3aWMzUmxjQ0lzSW01bGVIUWlMQ0psSWl3aWNtVnFaV04wWldRaUxDSnlaWE4xYkhRaUxDSmtiMjVsSWl3aWRHaGxiaUlzSW1Gd2NHeDVJaXdpWDE5blpXNWxjbUYwYjNJaUxDSmliMlI1SWl3aVh5SXNJbXhoWW1Wc0lpd2ljMlZ1ZENJc0luUWlMQ0owY25seklpd2liM0J6SWl3aVppSXNJbmtpTENKbklpd2lkbVZ5WWlJc0lsTjViV0p2YkNJc0ltbDBaWEpoZEc5eUlpd2liaUlzSW5ZaUxDSnZjQ0lzSWxSNWNHVkZjbkp2Y2lJc0ltTmhiR3dpTENKd2IzQWlMQ0pzWlc1bmRHZ2lMQ0p3ZFhOb0lpd2lZM1I0SWl3aWMyVnNaaUlzSW1Ga1pFVjJaVzUwVEdsemRHVnVaWElpTENKbGRtVnVkQ0lzSW1Kc2IySWlMQ0prWVhSaElpd2ljbVZoWkdWeUlpd2lSbWxzWlZKbFlXUmxjaUlzSW05dVRHOWhaRVZ1WkNJc0ltSjFabVpsY2lJc0luQnBaV05sU1c1a1pYZ2lMQ0p2Wm1aelpYUWlMQ0pwYm1adlNHRnphQ0lzSWw5aElpd2ljbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaUlzSWtKMVptWmxjaUlzSW1aeWIyMGlMQ0p5WldGa1ZVbHVkRE15UWtVaUxDSjBiMU4wY21sdVp5SXNJbk5zYVdObElpd2ljRzl6ZEUxbGMzTmhaMlVpTENKcGJtUmxlQ0lzSW5KbFlXUkJjMEZ5Y21GNVFuVm1abVZ5SWwwc0ltMWhjSEJwYm1keklqb2lPMEZCUVVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3T3p0QlFVZEJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hyUkVGQk1FTXNaME5CUVdkRE8wRkJRekZGTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEVzWjBWQlFYZEVMR3RDUVVGclFqdEJRVU14UlR0QlFVTkJMSGxFUVVGcFJDeGpRVUZqTzBGQlF5OUVPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeHBSRUZCZVVNc2FVTkJRV2xETzBGQlF6RkZMSGRJUVVGblNDeHRRa0ZCYlVJc1JVRkJSVHRCUVVOeVNUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxHMURRVUV5UWl3d1FrRkJNRUlzUlVGQlJUdEJRVU4yUkN4NVEwRkJhVU1zWlVGQlpUdEJRVU5vUkR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFTdzRSRUZCYzBRc0swUkJRU3RFT3p0QlFVVnlTRHRCUVVOQk96czdRVUZIUVR0QlFVTkJPenM3T3pzN096czdPenM3TzBGRGJFWkJPenRCUVVOQkxFbEJRVWxCTEZsQlFXRXNVVUZCVVN4TFFVRkxRU3hUUVVGa0xFbEJRVFJDTEZWQlFWVkRMRTlCUVZZc1JVRkJiVUpETEZWQlFXNUNMRVZCUVN0Q1F5eERRVUV2UWl4RlFVRnJRME1zVTBGQmJFTXNSVUZCTmtNN1FVRkRja1lzVjBGQlR5eExRVUZMUkN4TlFVRk5RU3hKUVVGSlJTeFBRVUZXTEVOQlFVd3NSVUZCZVVJc1ZVRkJWVU1zVDBGQlZpeEZRVUZ0UWtNc1RVRkJia0lzUlVGQk1rSTdRVUZEZGtRc2FVSkJRVk5ETEZOQlFWUXNRMEZCYlVKRExFdEJRVzVDTEVWQlFUQkNPMEZCUVVVc1owSkJRVWs3UVVGQlJVTXNjVUpCUVV0T0xGVkJRVlZQTEVsQlFWWXNRMEZCWlVZc1MwRkJaaXhEUVVGTU8wRkJRVGhDTEdGQlFYQkRMRU5CUVhGRExFOUJRVTlITEVOQlFWQXNSVUZCVlR0QlFVRkZUQ3gxUWtGQlQwc3NRMEZCVUR0QlFVRlpPMEZCUVVVN1FVRkRNMFlzYVVKQlFWTkRMRkZCUVZRc1EwRkJhMEpLTEV0QlFXeENMRVZCUVhsQ08wRkJRVVVzWjBKQlFVazdRVUZCUlVNc2NVSkJRVXRPTEZWQlFWVXNUMEZCVml4RlFVRnRRa3NzUzBGQmJrSXNRMEZCVER0QlFVRnJReXhoUVVGNFF5eERRVUY1UXl4UFFVRlBSeXhEUVVGUUxFVkJRVlU3UVVGQlJVd3NkVUpCUVU5TExFTkJRVkE3UVVGQldUdEJRVUZGTzBGQlF6bEdMR2xDUVVGVFJpeEpRVUZVTEVOQlFXTkpMRTFCUVdRc1JVRkJjMEk3UVVGQlJVRXNiVUpCUVU5RExFbEJRVkFzUjBGQlkxUXNVVUZCVVZFc1QwRkJUMHdzUzBGQlppeERRVUZrTEVkQlFYTkRMRWxCUVVsT0xFTkJRVW9zUTBGQlRTeFZRVUZWUnl4UFFVRldMRVZCUVcxQ08wRkJRVVZCTEhkQ1FVRlJVU3hQUVVGUFRDeExRVUZtTzBGQlFYZENMR0ZCUVc1RUxFVkJRWEZFVHl4SlFVRnlSQ3hEUVVFd1JGSXNVMEZCTVVRc1JVRkJjVVZMTEZGQlFYSkZMRU5CUVhSRE8wRkJRWFZJTzBGQlF5OUpTQ3hoUVVGTExFTkJRVU5PTEZsQlFWbEJMRlZCUVZWaExFdEJRVllzUTBGQlowSm9RaXhQUVVGb1FpeEZRVUY1UWtNc1kwRkJZeXhGUVVGMlF5eERRVUZpTEVWQlFYbEVVeXhKUVVGNlJDeEZRVUZNTzBGQlEwZ3NTMEZNVFN4RFFVRlFPMEZCVFVnc1EwRlFSRHRCUVZGQkxFbEJRVWxQTEdOQlFXVXNVVUZCVVN4TFFVRkxRU3hYUVVGa0xFbEJRVGhDTEZWQlFWVnFRaXhQUVVGV0xFVkJRVzFDYTBJc1NVRkJia0lzUlVGQmVVSTdRVUZEY2tVc1VVRkJTVU1zU1VGQlNTeEZRVUZGUXl4UFFVRlBMRU5CUVZRc1JVRkJXVU1zVFVGQlRTeFpRVUZYTzBGQlFVVXNaMEpCUVVsRExFVkJRVVVzUTBGQlJpeEpRVUZQTEVOQlFWZ3NSVUZCWXl4TlFVRk5RU3hGUVVGRkxFTkJRVVlzUTBGQlRpeERRVUZaTEU5QlFVOUJMRVZCUVVVc1EwRkJSaXhEUVVGUU8wRkJRV01zVTBGQmRrVXNSVUZCZVVWRExFMUJRVTBzUlVGQkwwVXNSVUZCYlVaRExFdEJRVXNzUlVGQmVFWXNSVUZCVWp0QlFVRkJMRkZCUVhOSFF5eERRVUYwUnp0QlFVRkJMRkZCUVhsSFF5eERRVUY2Unp0QlFVRkJMRkZCUVRSSFNpeERRVUUxUnp0QlFVRkJMRkZCUVN0SFN5eERRVUV2Unp0QlFVTkJMRmRCUVU5QkxFbEJRVWtzUlVGQlJXcENMRTFCUVUxclFpeExRVUZMTEVOQlFVd3NRMEZCVWl4RlFVRnBRaXhUUVVGVFFTeExRVUZMTEVOQlFVd3NRMEZCTVVJc1JVRkJiVU1zVlVGQlZVRXNTMEZCU3l4RFFVRk1MRU5CUVRkRExFVkJRVW9zUlVGQk5FUXNUMEZCVDBNc1RVRkJVQ3hMUVVGclFpeFZRVUZzUWl4TFFVRnBRMFlzUlVGQlJVVXNUMEZCVDBNc1VVRkJWQ3hKUVVGeFFpeFpRVUZYTzBGQlFVVXNaVUZCVHl4SlFVRlFPMEZCUVdNc1MwRkJha1lzUTBGQk5VUXNSVUZCWjBwSUxFTkJRWFpLTzBGQlEwRXNZVUZCVTBNc1NVRkJWQ3hEUVVGalJ5eERRVUZrTEVWQlFXbENPMEZCUVVVc1pVRkJUeXhWUVVGVlF5eERRVUZXTEVWQlFXRTdRVUZCUlN4dFFrRkJUM1pDTEV0QlFVc3NRMEZCUTNOQ0xFTkJRVVFzUlVGQlNVTXNRMEZCU2l4RFFVRk1MRU5CUVZBN1FVRkJjMElzVTBGQk5VTTdRVUZCSzBNN1FVRkRiRVVzWVVGQlUzWkNMRWxCUVZRc1EwRkJZM2RDTEVWQlFXUXNSVUZCYTBJN1FVRkRaQ3haUVVGSlVpeERRVUZLTEVWQlFVOHNUVUZCVFN4SlFVRkpVeXhUUVVGS0xFTkJRV01zYVVOQlFXUXNRMEZCVGp0QlFVTlFMR1ZCUVU5bUxFTkJRVkFzUlVGQlZTeEpRVUZKTzBGQlExWXNaMEpCUVVsTkxFbEJRVWtzUTBGQlNpeEZRVUZQUXl4TlFVRk5TaXhKUVVGSlZ5eEhRVUZITEVOQlFVZ3NTVUZCVVN4RFFVRlNMRWRCUVZsUUxFVkJRVVVzVVVGQlJpeERRVUZhTEVkQlFUQkNUeXhIUVVGSExFTkJRVWdzU1VGQlVWQXNSVUZCUlN4UFFVRkdMRTFCUVdVc1EwRkJRMG9zU1VGQlNVa3NSVUZCUlN4UlFVRkdMRU5CUVV3c1MwRkJjVUpLTEVWQlFVVmhMRWxCUVVZc1EwRkJUMVFzUTBGQlVDeERRVUZ5UWl4RlFVRm5ReXhEUVVFdlF5eERRVUZTTEVkQlFUUkVRU3hGUVVGRmFFSXNTVUZCYkVjc1MwRkJNa2NzUTBGQlF5eERRVUZEV1N4SlFVRkpRU3hGUVVGRllTeEpRVUZHTEVOQlFVOVVMRU5CUVZBc1JVRkJWVThzUjBGQlJ5eERRVUZJTEVOQlFWWXNRMEZCVEN4RlFVRjFRbTVDTEVsQlFUbEpMRVZCUVc5S0xFOUJRVTlSTEVOQlFWQTdRVUZEY0Vvc1owSkJRVWxKTEVsQlFVa3NRMEZCU2l4RlFVRlBTaXhEUVVGWUxFVkJRV05YTEV0QlFVc3NRMEZCUTBFc1IwRkJSeXhEUVVGSUxFbEJRVkVzUTBGQlZDeEZRVUZaV0N4RlFVRkZaQ3hMUVVGa0xFTkJRVXc3UVVGRFpDeHZRa0ZCVVhsQ0xFZEJRVWNzUTBGQlNDeERRVUZTTzBGQlEwa3NjVUpCUVVzc1EwRkJUQ3hEUVVGUkxFdEJRVXNzUTBGQlREdEJRVUZSV0N4M1FrRkJTVmNzUlVGQlNpeERRVUZSTzBGQlEzaENMSEZDUVVGTExFTkJRVXc3UVVGQlVXUXNjMEpCUVVWRExFdEJRVVlzUjBGQlZ5eFBRVUZQTEVWQlFVVmFMRTlCUVU5NVFpeEhRVUZITEVOQlFVZ3NRMEZCVkN4RlFVRm5RbTVDTEUxQlFVMHNTMEZCZEVJc1JVRkJVRHRCUVVOdVFpeHhRa0ZCU3l4RFFVRk1PMEZCUVZGTExITkNRVUZGUXl4TFFVRkdMRWRCUVZkTkxFbEJRVWxQTEVkQlFVY3NRMEZCU0N4RFFVRktMRU5CUVZkQkxFdEJRVXNzUTBGQlF5eERRVUZFTEVOQlFVd3NRMEZCVlR0QlFVTjRReXh4UWtGQlN5eERRVUZNTzBGQlFWRkJMSGxDUVVGTFpDeEZRVUZGU3l4SFFVRkdMRU5CUVUxWkxFZEJRVTRzUlVGQlRDeERRVUZyUW1wQ0xFVkJRVVZKTEVsQlFVWXNRMEZCVDJFc1IwRkJVQ3hIUVVGak8wRkJRM2hETzBGQlEwa3NkMEpCUVVrc1JVRkJSV1FzU1VGQlNVZ3NSVUZCUlVrc1NVRkJUaXhGUVVGWlJDeEpRVUZKUVN4RlFVRkZaU3hOUVVGR0xFZEJRVmNzUTBGQldDeEpRVUZuUW1Zc1JVRkJSVUVzUlVGQlJXVXNUVUZCUml4SFFVRlhMRU5CUVdJc1EwRkJiRU1zVFVGQmRVUktMRWRCUVVjc1EwRkJTQ3hOUVVGVkxFTkJRVllzU1VGQlpVRXNSMEZCUnl4RFFVRklMRTFCUVZVc1EwRkJhRVlzUTBGQlNpeEZRVUYzUmp0QlFVRkZaQ3cwUWtGQlNTeERRVUZLTEVOQlFVODdRVUZCVnp0QlFVTTFSeXgzUWtGQlNXTXNSMEZCUnl4RFFVRklMRTFCUVZVc1EwRkJWaXhMUVVGblFpeERRVUZEV0N4RFFVRkVMRWxCUVU5WExFZEJRVWNzUTBGQlNDeEpRVUZSV0N4RlFVRkZMRU5CUVVZc1EwRkJVaXhKUVVGblFsY3NSMEZCUnl4RFFVRklMRWxCUVZGWUxFVkJRVVVzUTBGQlJpeERRVUV2UXl4RFFVRktMRVZCUVRKRU8wRkJRVVZJTERCQ1FVRkZReXhMUVVGR0xFZEJRVlZoTEVkQlFVY3NRMEZCU0N4RFFVRldMRU5CUVdsQ08wRkJRVkU3UVVGRGRFWXNkMEpCUVVsQkxFZEJRVWNzUTBGQlNDeE5RVUZWTEVOQlFWWXNTVUZCWldRc1JVRkJSVU1zUzBGQlJpeEhRVUZWUlN4RlFVRkZMRU5CUVVZc1EwRkJOMElzUlVGQmJVTTdRVUZCUlVnc01FSkJRVVZETEV0QlFVWXNSMEZCVlVVc1JVRkJSU3hEUVVGR0xFTkJRVllzUTBGQlowSkJMRWxCUVVsWExFVkJRVW9zUTBGQlVUdEJRVUZSTzBGQlEzSkZMSGRDUVVGSldDeExRVUZMU0N4RlFVRkZReXhMUVVGR0xFZEJRVlZGTEVWQlFVVXNRMEZCUml4RFFVRnVRaXhGUVVGNVFqdEJRVUZGU0N3d1FrRkJSVU1zUzBGQlJpeEhRVUZWUlN4RlFVRkZMRU5CUVVZc1EwRkJWaXhEUVVGblFrZ3NSVUZCUlVzc1IwRkJSaXhEUVVGTll5eEpRVUZPTEVOQlFWZE1MRVZCUVZnc1JVRkJaMEk3UVVGQlVUdEJRVU51UlN4M1FrRkJTVmdzUlVGQlJTeERRVUZHTEVOQlFVb3NSVUZCVlVnc1JVRkJSVXNzUjBGQlJpeERRVUZOV1N4SFFVRk9PMEZCUTFacVFpeHpRa0ZCUlVrc1NVRkJSaXhEUVVGUFlTeEhRVUZRTEVkQlFXTTdRVUZZZEVJN1FVRmhRVWdzYVVKQlFVdG1MRXRCUVV0cFFpeEpRVUZNTEVOQlFWVnVReXhQUVVGV0xFVkJRVzFDYlVJc1EwRkJia0lzUTBGQlREdEJRVU5JTEZOQmFrSlRMRU5CYVVKU0xFOUJRVTlTTEVOQlFWQXNSVUZCVlR0QlFVRkZjMElzYVVKQlFVc3NRMEZCUXl4RFFVRkVMRVZCUVVsMFFpeERRVUZLTEVOQlFVd3NRMEZCWVdVc1NVRkJTU3hEUVVGS08wRkJRVkVzVTBGcVFucENMRk5CYVVKclF6dEJRVUZGUkN4blFrRkJTVWdzU1VGQlNTeERRVUZTTzBGQlFWazdRVUZETVVRc1dVRkJTVmNzUjBGQlJ5eERRVUZJTEVsQlFWRXNRMEZCV2l4RlFVRmxMRTFCUVUxQkxFZEJRVWNzUTBGQlNDeERRVUZPTEVOQlFXRXNUMEZCVHl4RlFVRkZla0lzVDBGQlQzbENMRWRCUVVjc1EwRkJTQ3hKUVVGUlFTeEhRVUZITEVOQlFVZ3NRMEZCVWl4SFFVRm5RaXhMUVVGTExFTkJRVGxDTEVWQlFXbERia0lzVFVGQlRTeEpRVUYyUXl4RlFVRlFPMEZCUXk5Q08wRkJRMG9zUTBFeFFrUTdRVUV5UWtFN1FVRkRRU3hKUVVGSmVVSXNUVUZCVFVNc1NVRkJWanRCUVVOQk8wRkJRMEZETEdsQ1FVRnBRaXhUUVVGcVFpeEZRVUUwUWl4VlFVRlZReXhMUVVGV0xFVkJRV2xDTzBGQlEzcERMRkZCUVVsRExFOUJRVTlFTEUxQlFVMUZMRWxCUVU0c1EwRkJWMFFzU1VGQmRFSTdRVUZEUVN4UlFVRkpSU3hUUVVGVExFbEJRVWxETEZWQlFVb3NSVUZCWWp0QlFVTkJMR0ZCUVZORExGTkJRVlFzUTBGQmJVSndReXhEUVVGdVFpeEZRVUZ6UWp0QlFVTnNRaXhsUVVGUFdpeFZRVUZWTEVsQlFWWXNSVUZCWjBJc1MwRkJTeXhEUVVGeVFpeEZRVUYzUWtzc1QwRkJlRUlzUlVGQmFVTXNXVUZCV1R0QlFVTm9SQ3huUWtGQlNUUkRMRTFCUVVvc1JVRkJXVU1zVlVGQldpeEZRVUYzUWtNc1RVRkJlRUlzUlVGQlowTkRMRkZCUVdoRExFVkJRVEJEVUN4SlFVRXhRenRCUVVOQkxHMUNRVUZQTTBJc1dVRkJXU3hKUVVGYUxFVkJRV3RDTEZWQlFWVnRReXhGUVVGV0xFVkJRV003UVVGRGJrTlFMSFZDUVVGUFVTeHRRa0ZCVUN4RFFVRXlRaXhUUVVFelFpeEZRVUZ6UTA0c1UwRkJkRU1zUlVGQmFVUXNTMEZCYWtRN1FVRkRRVU1zZVVKQlFWTk5MRTlCUVU5RExFbEJRVkFzUTBGQldWWXNUMEZCVDJoRExFMUJRVzVDTEVOQlFWUTdRVUZEUVc5RExEWkNRVUZoUkN4UFFVRlBVU3haUVVGUUxFTkJRVzlDTEVOQlFYQkNMRU5CUVdJN1FVRkRRVTRzZVVKQlFWTkdMRTlCUVU5UkxGbEJRVkFzUTBGQmIwSXNTVUZCU1N4RFFVRjRRaXhEUVVGVU8wRkJRMEZNTERKQ1FVRlhTQ3hQUVVGUFV5eFJRVUZRTEVOQlFXZENMRXRCUVdoQ0xFVkJRWFZDTEVsQlFVa3NRMEZCTTBJc1JVRkJPRUlzUzBGQlN5eERRVUZ1UXl4RFFVRllPMEZCUTBGaUxIVkNRVUZQU1N4UFFVRlBWU3hMUVVGUUxFTkJRV0VzUzBGQlN5eERRVUZzUWl4RlFVRnhRbFlzVDBGQlQxZ3NUVUZCTlVJc1EwRkJVRHRCUVVOQlJTeHZRa0ZCU1c5Q0xGZEJRVW9zUTBGQlowSTdRVUZEV2tNc01rSkJRVTlZTEZWQlJFczdRVUZGV2tVc09FSkJRVlZCTEZGQlJrVTdRVUZIV2tRc05FSkJRVkZCTEUxQlNFazdRVUZKV2s0c01FSkJRVTFCTzBGQlNrMHNhVUpCUVdoQ08wRkJUVUVzZFVKQlFVOHNRMEZCUXl4RFFVRkVMRU5CUVVjc1ZVRkJTQ3hEUVVGUU8wRkJRMGdzWVVGa1RTeERRVUZRTzBGQlpVZ3NVMEZxUWswc1EwRkJVRHRCUVd0Q1NEdEJRVU5FUXl4WFFVRlBTaXhuUWtGQlVDeERRVUYzUWl4VFFVRjRRaXhGUVVGdFEwMHNVMEZCYmtNc1JVRkJPRU1zUzBGQk9VTTdRVUZEUVVZc1YwRkJUMmRDTEdsQ1FVRlFMRU5CUVhsQ2JFSXNTVUZCZWtJN1FVRkRTQ3hEUVhwQ1JDeEZJaXdpWm1sc1pTSTZJbmR2Y210bGNpNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWlCY2RDOHZJRlJvWlNCdGIyUjFiR1VnWTJGamFHVmNiaUJjZEhaaGNpQnBibk4wWVd4c1pXUk5iMlIxYkdWeklEMGdlMzA3WEc1Y2JpQmNkQzh2SUZSb1pTQnlaWEYxYVhKbElHWjFibU4wYVc5dVhHNGdYSFJtZFc1amRHbHZiaUJmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmS0cxdlpIVnNaVWxrS1NCN1hHNWNiaUJjZEZ4MEx5OGdRMmhsWTJzZ2FXWWdiVzlrZFd4bElHbHpJR2x1SUdOaFkyaGxYRzRnWEhSY2RHbG1LR2x1YzNSaGJHeGxaRTF2WkhWc1pYTmJiVzlrZFd4bFNXUmRLU0I3WEc0Z1hIUmNkRngwY21WMGRYSnVJR2x1YzNSaGJHeGxaRTF2WkhWc1pYTmJiVzlrZFd4bFNXUmRMbVY0Y0c5eWRITTdYRzRnWEhSY2RIMWNiaUJjZEZ4MEx5OGdRM0psWVhSbElHRWdibVYzSUcxdlpIVnNaU0FvWVc1a0lIQjFkQ0JwZENCcGJuUnZJSFJvWlNCallXTm9aU2xjYmlCY2RGeDBkbUZ5SUcxdlpIVnNaU0E5SUdsdWMzUmhiR3hsWkUxdlpIVnNaWE5iYlc5a2RXeGxTV1JkSUQwZ2UxeHVJRngwWEhSY2RHazZJRzF2WkhWc1pVbGtMRnh1SUZ4MFhIUmNkR3c2SUdaaGJITmxMRnh1SUZ4MFhIUmNkR1Y0Y0c5eWRITTZJSHQ5WEc0Z1hIUmNkSDA3WEc1Y2JpQmNkRngwTHk4Z1JYaGxZM1YwWlNCMGFHVWdiVzlrZFd4bElHWjFibU4wYVc5dVhHNGdYSFJjZEcxdlpIVnNaWE5iYlc5a2RXeGxTV1JkTG1OaGJHd29iVzlrZFd4bExtVjRjRzl5ZEhNc0lHMXZaSFZzWlN3Z2JXOWtkV3hsTG1WNGNHOXlkSE1zSUY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4cE8xeHVYRzRnWEhSY2RDOHZJRVpzWVdjZ2RHaGxJRzF2WkhWc1pTQmhjeUJzYjJGa1pXUmNiaUJjZEZ4MGJXOWtkV3hsTG13Z1BTQjBjblZsTzF4dVhHNGdYSFJjZEM4dklGSmxkSFZ5YmlCMGFHVWdaWGh3YjNKMGN5QnZaaUIwYUdVZ2JXOWtkV3hsWEc0Z1hIUmNkSEpsZEhWeWJpQnRiMlIxYkdVdVpYaHdiM0owY3p0Y2JpQmNkSDFjYmx4dVhHNGdYSFF2THlCbGVIQnZjMlVnZEdobElHMXZaSFZzWlhNZ2IySnFaV04wSUNoZlgzZGxZbkJoWTJ0ZmJXOWtkV3hsYzE5ZktWeHVJRngwWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHk1dElEMGdiVzlrZFd4bGN6dGNibHh1SUZ4MEx5OGdaWGh3YjNObElIUm9aU0J0YjJSMWJHVWdZMkZqYUdWY2JpQmNkRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMTh1WXlBOUlHbHVjM1JoYkd4bFpFMXZaSFZzWlhNN1hHNWNiaUJjZEM4dklHUmxabWx1WlNCblpYUjBaWElnWm5WdVkzUnBiMjRnWm05eUlHaGhjbTF2Ym5rZ1pYaHdiM0owYzF4dUlGeDBYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeTVrSUQwZ1puVnVZM1JwYjI0b1pYaHdiM0owY3l3Z2JtRnRaU3dnWjJWMGRHVnlLU0I3WEc0Z1hIUmNkR2xtS0NGZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZkxtOG9aWGh3YjNKMGN5d2dibUZ0WlNrcElIdGNiaUJjZEZ4MFhIUlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlhod2IzSjBjeXdnYm1GdFpTd2dleUJsYm5WdFpYSmhZbXhsT2lCMGNuVmxMQ0JuWlhRNklHZGxkSFJsY2lCOUtUdGNiaUJjZEZ4MGZWeHVJRngwZlR0Y2JseHVJRngwTHk4Z1pHVm1hVzVsSUY5ZlpYTk5iMlIxYkdVZ2IyNGdaWGh3YjNKMGMxeHVJRngwWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHk1eUlEMGdablZ1WTNScGIyNG9aWGh3YjNKMGN5a2dlMXh1SUZ4MFhIUnBaaWgwZVhCbGIyWWdVM2x0WW05c0lDRTlQU0FuZFc1a1pXWnBibVZrSnlBbUppQlRlVzFpYjJ3dWRHOVRkSEpwYm1kVVlXY3BJSHRjYmlCY2RGeDBYSFJQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z1UzbHRZbTlzTG5SdlUzUnlhVzVuVkdGbkxDQjdJSFpoYkhWbE9pQW5UVzlrZFd4bEp5QjlLVHRjYmlCY2RGeDBmVnh1SUZ4MFhIUlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlhod2IzSjBjeXdnSjE5ZlpYTk5iMlIxYkdVbkxDQjdJSFpoYkhWbE9pQjBjblZsSUgwcE8xeHVJRngwZlR0Y2JseHVJRngwTHk4Z1kzSmxZWFJsSUdFZ1ptRnJaU0J1WVcxbGMzQmhZMlVnYjJKcVpXTjBYRzRnWEhRdkx5QnRiMlJsSUNZZ01Ub2dkbUZzZFdVZ2FYTWdZU0J0YjJSMWJHVWdhV1FzSUhKbGNYVnBjbVVnYVhSY2JpQmNkQzh2SUcxdlpHVWdKaUF5T2lCdFpYSm5aU0JoYkd3Z2NISnZjR1Z5ZEdsbGN5QnZaaUIyWVd4MVpTQnBiblJ2SUhSb1pTQnVjMXh1SUZ4MEx5OGdiVzlrWlNBbUlEUTZJSEpsZEhWeWJpQjJZV3gxWlNCM2FHVnVJR0ZzY21WaFpIa2dibk1nYjJKcVpXTjBYRzRnWEhRdkx5QnRiMlJsSUNZZ09Id3hPaUJpWldoaGRtVWdiR2xyWlNCeVpYRjFhWEpsWEc0Z1hIUmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZMblFnUFNCbWRXNWpkR2x2YmloMllXeDFaU3dnYlc5a1pTa2dlMXh1SUZ4MFhIUnBaaWh0YjJSbElDWWdNU2tnZG1Gc2RXVWdQU0JmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmS0haaGJIVmxLVHRjYmlCY2RGeDBhV1lvYlc5a1pTQW1JRGdwSUhKbGRIVnliaUIyWVd4MVpUdGNiaUJjZEZ4MGFXWW9LRzF2WkdVZ0ppQTBLU0FtSmlCMGVYQmxiMllnZG1Gc2RXVWdQVDA5SUNkdlltcGxZM1FuSUNZbUlIWmhiSFZsSUNZbUlIWmhiSFZsTGw5ZlpYTk5iMlIxYkdVcElISmxkSFZ5YmlCMllXeDFaVHRjYmlCY2RGeDBkbUZ5SUc1eklEMGdUMkpxWldOMExtTnlaV0YwWlNodWRXeHNLVHRjYmlCY2RGeDBYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeTV5S0c1ektUdGNiaUJjZEZ4MFQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLRzV6TENBblpHVm1ZWFZzZENjc0lIc2daVzUxYldWeVlXSnNaVG9nZEhKMVpTd2dkbUZzZFdVNklIWmhiSFZsSUgwcE8xeHVJRngwWEhScFppaHRiMlJsSUNZZ01pQW1KaUIwZVhCbGIyWWdkbUZzZFdVZ0lUMGdKM04wY21sdVp5Y3BJR1p2Y2loMllYSWdhMlY1SUdsdUlIWmhiSFZsS1NCZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZkxtUW9ibk1zSUd0bGVTd2dablZ1WTNScGIyNG9hMlY1S1NCN0lISmxkSFZ5YmlCMllXeDFaVnRyWlhsZE95QjlMbUpwYm1Rb2JuVnNiQ3dnYTJWNUtTazdYRzRnWEhSY2RISmxkSFZ5YmlCdWN6dGNiaUJjZEgwN1hHNWNiaUJjZEM4dklHZGxkRVJsWm1GMWJIUkZlSEJ2Y25RZ1puVnVZM1JwYjI0Z1ptOXlJR052YlhCaGRHbGlhV3hwZEhrZ2QybDBhQ0J1YjI0dGFHRnliVzl1ZVNCdGIyUjFiR1Z6WEc0Z1hIUmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZMbTRnUFNCbWRXNWpkR2x2YmlodGIyUjFiR1VwSUh0Y2JpQmNkRngwZG1GeUlHZGxkSFJsY2lBOUlHMXZaSFZzWlNBbUppQnRiMlIxYkdVdVgxOWxjMDF2WkhWc1pTQS9YRzRnWEhSY2RGeDBablZ1WTNScGIyNGdaMlYwUkdWbVlYVnNkQ2dwSUhzZ2NtVjBkWEp1SUcxdlpIVnNaVnNuWkdWbVlYVnNkQ2RkT3lCOUlEcGNiaUJjZEZ4MFhIUm1kVzVqZEdsdmJpQm5aWFJOYjJSMWJHVkZlSEJ2Y25SektDa2dleUJ5WlhSMWNtNGdiVzlrZFd4bE95QjlPMXh1SUZ4MFhIUmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZMbVFvWjJWMGRHVnlMQ0FuWVNjc0lHZGxkSFJsY2lrN1hHNGdYSFJjZEhKbGRIVnliaUJuWlhSMFpYSTdYRzRnWEhSOU8xeHVYRzRnWEhRdkx5QlBZbXBsWTNRdWNISnZkRzkwZVhCbExtaGhjMDkzYmxCeWIzQmxjblI1TG1OaGJHeGNiaUJjZEY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4dWJ5QTlJR1oxYm1OMGFXOXVLRzlpYW1WamRDd2djSEp2Y0dWeWRIa3BJSHNnY21WMGRYSnVJRTlpYW1WamRDNXdjbTkwYjNSNWNHVXVhR0Z6VDNkdVVISnZjR1Z5ZEhrdVkyRnNiQ2h2WW1wbFkzUXNJSEJ5YjNCbGNuUjVLVHNnZlR0Y2JseHVJRngwTHk4Z1gxOTNaV0p3WVdOclgzQjFZbXhwWTE5d1lYUm9YMTljYmlCY2RGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHVjQ0E5SUZ3aVhDSTdYRzVjYmx4dUlGeDBMeThnVEc5aFpDQmxiblJ5ZVNCdGIyUjFiR1VnWVc1a0lISmxkSFZ5YmlCbGVIQnZjblJ6WEc0Z1hIUnlaWFIxY200Z1gxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5aGZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZMbk1nUFNCY0lpNHZjM0pqTDJOc2FXVnVkSE12Y0dsbFkyVnpMbmR2Y210bGNpNTBjMXdpS1R0Y2JpSXNJbHdpZFhObElITjBjbWxqZEZ3aU8xeHlYRzUyWVhJZ1gxOWhkMkZwZEdWeUlEMGdLSFJvYVhNZ0ppWWdkR2hwY3k1ZlgyRjNZV2wwWlhJcElIeDhJR1oxYm1OMGFXOXVJQ2gwYUdselFYSm5MQ0JmWVhKbmRXMWxiblJ6TENCUUxDQm5aVzVsY21GMGIzSXBJSHRjY2x4dUlDQWdJSEpsZEhWeWJpQnVaWGNnS0ZBZ2ZId2dLRkFnUFNCUWNtOXRhWE5sS1Nrb1puVnVZM1JwYjI0Z0tISmxjMjlzZG1Vc0lISmxhbVZqZENrZ2UxeHlYRzRnSUNBZ0lDQWdJR1oxYm1OMGFXOXVJR1oxYkdacGJHeGxaQ2gyWVd4MVpTa2dleUIwY25rZ2V5QnpkR1Z3S0dkbGJtVnlZWFJ2Y2k1dVpYaDBLSFpoYkhWbEtTazdJSDBnWTJGMFkyZ2dLR1VwSUhzZ2NtVnFaV04wS0dVcE95QjlJSDFjY2x4dUlDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCeVpXcGxZM1JsWkNoMllXeDFaU2tnZXlCMGNua2dleUJ6ZEdWd0tHZGxibVZ5WVhSdmNsdGNJblJvY205M1hDSmRLSFpoYkhWbEtTazdJSDBnWTJGMFkyZ2dLR1VwSUhzZ2NtVnFaV04wS0dVcE95QjlJSDFjY2x4dUlDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCemRHVndLSEpsYzNWc2RDa2dleUJ5WlhOMWJIUXVaRzl1WlNBL0lISmxjMjlzZG1Vb2NtVnpkV3gwTG5aaGJIVmxLU0E2SUc1bGR5QlFLR1oxYm1OMGFXOXVJQ2h5WlhOdmJIWmxLU0I3SUhKbGMyOXNkbVVvY21WemRXeDBMblpoYkhWbEtUc2dmU2t1ZEdobGJpaG1kV3htYVd4c1pXUXNJSEpsYW1WamRHVmtLVHNnZlZ4eVhHNGdJQ0FnSUNBZ0lITjBaWEFvS0dkbGJtVnlZWFJ2Y2lBOUlHZGxibVZ5WVhSdmNpNWhjSEJzZVNoMGFHbHpRWEpuTENCZllYSm5kVzFsYm5SeklIeDhJRnRkS1NrdWJtVjRkQ2dwS1R0Y2NseHVJQ0FnSUgwcE8xeHlYRzU5TzF4eVhHNTJZWElnWDE5blpXNWxjbUYwYjNJZ1BTQW9kR2hwY3lBbUppQjBhR2x6TGw5ZloyVnVaWEpoZEc5eUtTQjhmQ0JtZFc1amRHbHZiaUFvZEdocGMwRnlaeXdnWW05a2VTa2dlMXh5WEc0Z0lDQWdkbUZ5SUY4Z1BTQjdJR3hoWW1Wc09pQXdMQ0J6Wlc1ME9pQm1kVzVqZEdsdmJpZ3BJSHNnYVdZZ0tIUmJNRjBnSmlBeEtTQjBhSEp2ZHlCMFd6RmRPeUJ5WlhSMWNtNGdkRnN4WFRzZ2ZTd2dkSEo1Y3pvZ1cxMHNJRzl3Y3pvZ1cxMGdmU3dnWml3Z2VTd2dkQ3dnWnp0Y2NseHVJQ0FnSUhKbGRIVnliaUJuSUQwZ2V5QnVaWGgwT2lCMlpYSmlLREFwTENCY0luUm9jbTkzWENJNklIWmxjbUlvTVNrc0lGd2ljbVYwZFhKdVhDSTZJSFpsY21Jb01pa2dmU3dnZEhsd1pXOW1JRk41YldKdmJDQTlQVDBnWENKbWRXNWpkR2x2Ymx3aUlDWW1JQ2huVzFONWJXSnZiQzVwZEdWeVlYUnZjbDBnUFNCbWRXNWpkR2x2YmlncElIc2djbVYwZFhKdUlIUm9hWE03SUgwcExDQm5PMXh5WEc0Z0lDQWdablZ1WTNScGIyNGdkbVZ5WWlodUtTQjdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQW9kaWtnZXlCeVpYUjFjbTRnYzNSbGNDaGJiaXdnZGwwcE95QjlPeUI5WEhKY2JpQWdJQ0JtZFc1amRHbHZiaUJ6ZEdWd0tHOXdLU0I3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLR1lwSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb1hDSkhaVzVsY21GMGIzSWdhWE1nWVd4eVpXRmtlU0JsZUdWamRYUnBibWN1WENJcE8xeHlYRzRnSUNBZ0lDQWdJSGRvYVd4bElDaGZLU0IwY25rZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aaUE5SURFc0lIa2dKaVlnS0hRZ1BTQnZjRnN3WFNBbUlESWdQeUI1VzF3aWNtVjBkWEp1WENKZElEb2diM0JiTUYwZ1B5QjVXMXdpZEdoeWIzZGNJbDBnZkh3Z0tDaDBJRDBnZVZ0Y0luSmxkSFZ5Ymx3aVhTa2dKaVlnZEM1allXeHNLSGtwTENBd0tTQTZJSGt1Ym1WNGRDa2dKaVlnSVNoMElEMGdkQzVqWVd4c0tIa3NJRzl3V3pGZEtTa3VaRzl1WlNrZ2NtVjBkWEp1SUhRN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDVJRDBnTUN3Z2RDa2diM0FnUFNCYmIzQmJNRjBnSmlBeUxDQjBMblpoYkhWbFhUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2MzZHBkR05vSUNodmNGc3dYU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0F3T2lCallYTmxJREU2SUhRZ1BTQnZjRHNnWW5KbFlXczdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElEUTZJRjh1YkdGaVpXd3JLenNnY21WMGRYSnVJSHNnZG1Gc2RXVTZJRzl3V3pGZExDQmtiMjVsT2lCbVlXeHpaU0I5TzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0ExT2lCZkxteGhZbVZzS3lzN0lIa2dQU0J2Y0ZzeFhUc2diM0FnUFNCYk1GMDdJR052Ym5ScGJuVmxPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQTNPaUJ2Y0NBOUlGOHViM0J6TG5CdmNDZ3BPeUJmTG5SeWVYTXVjRzl3S0NrN0lHTnZiblJwYm5WbE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1ZtWVhWc2REcGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JU2gwSUQwZ1h5NTBjbmx6TENCMElEMGdkQzVzWlc1bmRHZ2dQaUF3SUNZbUlIUmJkQzVzWlc1bmRHZ2dMU0F4WFNrZ0ppWWdLRzl3V3pCZElEMDlQU0EySUh4OElHOXdXekJkSUQwOVBTQXlLU2tnZXlCZklEMGdNRHNnWTI5dWRHbHVkV1U3SUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2IzQmJNRjBnUFQwOUlETWdKaVlnS0NGMElIeDhJQ2h2Y0ZzeFhTQStJSFJiTUYwZ0ppWWdiM0JiTVYwZ1BDQjBXek5kS1NrcElIc2dYeTVzWVdKbGJDQTlJRzl3V3pGZE95QmljbVZoYXpzZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHZjRnN3WFNBOVBUMGdOaUFtSmlCZkxteGhZbVZzSUR3Z2RGc3hYU2tnZXlCZkxteGhZbVZzSUQwZ2RGc3hYVHNnZENBOUlHOXdPeUJpY21WaGF6c2dmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwSUNZbUlGOHViR0ZpWld3Z1BDQjBXekpkS1NCN0lGOHViR0ZpWld3Z1BTQjBXekpkT3lCZkxtOXdjeTV3ZFhOb0tHOXdLVHNnWW5KbFlXczdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEZzeVhTa2dYeTV2Y0hNdWNHOXdLQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYeTUwY25sekxuQnZjQ2dwT3lCamIyNTBhVzUxWlR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J2Y0NBOUlHSnZaSGt1WTJGc2JDaDBhR2x6UVhKbkxDQmZLVHRjY2x4dUlDQWdJQ0FnSUNCOUlHTmhkR05vSUNobEtTQjdJRzl3SUQwZ1d6WXNJR1ZkT3lCNUlEMGdNRHNnZlNCbWFXNWhiR3g1SUhzZ1ppQTlJSFFnUFNBd095QjlYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tHOXdXekJkSUNZZ05Ta2dkR2h5YjNjZ2IzQmJNVjA3SUhKbGRIVnliaUI3SUhaaGJIVmxPaUJ2Y0Zzd1hTQS9JRzl3V3pGZElEb2dkbTlwWkNBd0xDQmtiMjVsT2lCMGNuVmxJSDA3WEhKY2JpQWdJQ0I5WEhKY2JuMDdYSEpjYmk4dklIUnpiR2x1ZERwa2FYTmhZbXhsTFc1bGVIUXRiR2x1WlRwdWJ5MWhibmxjY2x4dWRtRnlJR04wZUNBOUlITmxiR1k3WEhKY2JpOHZJRkpsYzNCdmJtUWdkRzhnYldWemMyRm5aU0JtY205dElIQmhjbVZ1ZENCMGFISmxZV1JjY2x4dVlXUmtSWFpsYm5STWFYTjBaVzVsY2loY0ltMWxjM05oWjJWY0lpd2dablZ1WTNScGIyNGdLR1YyWlc1MEtTQjdYSEpjYmlBZ0lDQjJZWElnWW14dllpQTlJR1YyWlc1MExtUmhkR0V1WW14dllqdGNjbHh1SUNBZ0lIWmhjaUJ5WldGa1pYSWdQU0J1WlhjZ1JtbHNaVkpsWVdSbGNpZ3BPMXh5WEc0Z0lDQWdablZ1WTNScGIyNGdiMjVNYjJGa1JXNWtLR1VwSUh0Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1gxOWhkMkZwZEdWeUtIUm9hWE1zSUhadmFXUWdNQ3dnVUhKdmJXbHpaU3dnWm5WdVkzUnBiMjRnS0NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdZblZtWm1WeUxDQndhV1ZqWlVsdVpHVjRMQ0J2Wm1aelpYUXNJR2x1Wm05SVlYTm9MQ0JrWVhSaE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWDE5blpXNWxjbUYwYjNJb2RHaHBjeXdnWm5WdVkzUnBiMjRnS0Y5aEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WldGa1pYSXVjbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaWhjSW14dllXUmxibVJjSWl3Z2IyNU1iMkZrUlc1a0xDQm1ZV3h6WlNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmlkV1ptWlhJZ1BTQkNkV1ptWlhJdVpuSnZiU2h5WldGa1pYSXVjbVZ6ZFd4MEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJwWldObFNXNWtaWGdnUFNCaWRXWm1aWEl1Y21WaFpGVkpiblF6TWtKRktEQXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjJabWMyVjBJRDBnWW5WbVptVnlMbkpsWVdSVlNXNTBNekpDUlNnd0lDc2dOQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGJtWnZTR0Z6YUNBOUlHSjFabVpsY2k1MGIxTjBjbWx1WnloY0ltaGxlRndpTENBMElDc2dOQ3dnTWpRZ0t5QTBLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSaGRHRWdQU0JpZFdabVpYSXVjMnhwWTJVb01qUWdLeUEwTENCaWRXWm1aWEl1YkdWdVozUm9LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOMGVDNXdiM04wVFdWemMyRm5aU2g3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhVzVrWlhnNklIQnBaV05sU1c1a1pYZ3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXNW1iMGhoYzJnNklHbHVabTlJWVhOb0xGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5bVpuTmxkRG9nYjJabWMyVjBMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0U2SUdSaGRHRmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUZzeUlDOHFjbVYwZFhKdUtpOWRPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lISmxZV1JsY2k1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0Z3aWJHOWhaR1Z1WkZ3aUxDQnZia3h2WVdSRmJtUXNJR1poYkhObEtUdGNjbHh1SUNBZ0lISmxZV1JsY2k1eVpXRmtRWE5CY25KaGVVSjFabVpsY2loaWJHOWlLVHRjY2x4dWZTazdYSEpjYmlKZExDSnpiM1Z5WTJWU2IyOTBJam9pSW4wPSJdLCJzb3VyY2VSb290IjoiIn0=