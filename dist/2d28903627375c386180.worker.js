!function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=27)}([function(t,e,r){"use strict";var n,i,o=t.exports=r(2),s=r(20);o.codegen=r(47),o.fetch=r(48),o.path=r(49),o.fs=o.inquire("fs"),o.toArray=function(t){if(t){for(var e=Object.keys(t),r=new Array(e.length),n=0;n<e.length;)r[n]=t[e[n++]];return r}return[]},o.toObject=function(t){for(var e={},r=0;r<t.length;){var n=t[r++],i=t[r++];void 0!==i&&(e[n]=i)}return e};var u=/\\/g,a=/"/g;o.isReserved=function(t){return/^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(t)},o.safeProp=function(t){return!/^[$\w_]+$/.test(t)||o.isReserved(t)?'["'+t.replace(u,"\\\\").replace(a,'\\"')+'"]':"."+t},o.ucFirst=function(t){return t.charAt(0).toUpperCase()+t.substring(1)};var f=/_([a-z])/g;o.camelCase=function(t){return t.substring(0,1)+t.substring(1).replace(f,function(t,e){return e.toUpperCase()})},o.compareFieldsById=function(t,e){return t.id-e.id},o.decorateType=function(t,e){if(t.$type)return e&&t.$type.name!==e&&(o.decorateRoot.remove(t.$type),t.$type.name=e,o.decorateRoot.add(t.$type)),t.$type;n||(n=r(10));var i=new n(e||t.name);return o.decorateRoot.add(i),i.ctor=t,Object.defineProperty(t,"$type",{value:i,enumerable:!1}),Object.defineProperty(t.prototype,"$type",{value:i,enumerable:!1}),i};var l=0;o.decorateEnum=function(t){if(t.$type)return t.$type;i||(i=r(1));var e=new i("Enum"+l++,t);return o.decorateRoot.add(e),Object.defineProperty(t,"$type",{value:e,enumerable:!1}),e},Object.defineProperty(o,"decorateRoot",{get:function(){return s.decorated||(s.decorated=new(r(15)))}})},function(t,e,r){"use strict";t.exports=s;var n=r(4);((s.prototype=Object.create(n.prototype)).constructor=s).className="Enum";var i=r(6),o=r(0);function s(t,e,r,i,o){if(n.call(this,t,r),e&&"object"!=typeof e)throw TypeError("values must be an object");if(this.valuesById={},this.values=Object.create(this.valuesById),this.comment=i,this.comments=o||{},this.reserved=void 0,e)for(var s=Object.keys(e),u=0;u<s.length;++u)"number"==typeof e[s[u]]&&(this.valuesById[this.values[s[u]]=e[s[u]]]=s[u])}s.fromJSON=function(t,e){var r=new s(t,e.values,e.options,e.comment,e.comments);return r.reserved=e.reserved,r},s.prototype.toJSON=function(t){var e=!!t&&Boolean(t.keepComments);return o.toObject(["options",this.options,"values",this.values,"reserved",this.reserved&&this.reserved.length?this.reserved:void 0,"comment",e?this.comment:void 0,"comments",e?this.comments:void 0])},s.prototype.add=function(t,e,r){if(!o.isString(t))throw TypeError("name must be a string");if(!o.isInteger(e))throw TypeError("id must be an integer");if(void 0!==this.values[t])throw Error("duplicate name '"+t+"' in "+this);if(this.isReservedId(e))throw Error("id "+e+" is reserved in "+this);if(this.isReservedName(t))throw Error("name '"+t+"' is reserved in "+this);if(void 0!==this.valuesById[e]){if(!this.options||!this.options.allow_alias)throw Error("duplicate id "+e+" in "+this);this.values[t]=e}else this.valuesById[this.values[t]=e]=t;return this.comments[t]=r||null,this},s.prototype.remove=function(t){if(!o.isString(t))throw TypeError("name must be a string");var e=this.values[t];if(null==e)throw Error("name '"+t+"' does not exist in "+this);return delete this.valuesById[e],delete this.values[t],delete this.comments[t],this},s.prototype.isReservedId=function(t){return i.isReservedId(this.reserved,t)},s.prototype.isReservedName=function(t){return i.isReservedName(this.reserved,t)}},function(t,e,r){"use strict";(function(t){var n=e;function i(t,e,r){for(var n=Object.keys(e),i=0;i<n.length;++i)void 0!==t[n[i]]&&r||(t[n[i]]=e[n[i]]);return t}function o(t){function e(t,r){if(!(this instanceof e))return new e(t,r);Object.defineProperty(this,"message",{get:function(){return t}}),Error.captureStackTrace?Error.captureStackTrace(this,e):Object.defineProperty(this,"stack",{value:(new Error).stack||""}),r&&i(this,r)}return(e.prototype=Object.create(Error.prototype)).constructor=e,Object.defineProperty(e.prototype,"name",{get:function(){return t}}),e.prototype.toString=function(){return this.name+": "+this.message},e}n.asPromise=r(17),n.base64=r(38),n.EventEmitter=r(39),n.float=r(40),n.inquire=r(18),n.utf8=r(41),n.pool=r(42),n.LongBits=r(43),n.global="undefined"!=typeof window&&window||void 0!==t&&t||"undefined"!=typeof self&&self||this,n.emptyArray=Object.freeze?Object.freeze([]):[],n.emptyObject=Object.freeze?Object.freeze({}):{},n.isNode=Boolean(n.global.process&&n.global.process.versions&&n.global.process.versions.node),n.isInteger=Number.isInteger||function(t){return"number"==typeof t&&isFinite(t)&&Math.floor(t)===t},n.isString=function(t){return"string"==typeof t||t instanceof String},n.isObject=function(t){return t&&"object"==typeof t},n.isset=n.isSet=function(t,e){var r=t[e];return!(null==r||!t.hasOwnProperty(e))&&("object"!=typeof r||(Array.isArray(r)?r.length:Object.keys(r).length)>0)},n.Buffer=function(){try{var t=n.inquire("buffer").Buffer;return t.prototype.utf8Write?t:null}catch(t){return null}}(),n._Buffer_from=null,n._Buffer_allocUnsafe=null,n.newBuffer=function(t){return"number"==typeof t?n.Buffer?n._Buffer_allocUnsafe(t):new n.Array(t):n.Buffer?n._Buffer_from(t):"undefined"==typeof Uint8Array?t:new Uint8Array(t)},n.Array="undefined"!=typeof Uint8Array?Uint8Array:Array,n.Long=n.global.dcodeIO&&n.global.dcodeIO.Long||n.global.Long||n.inquire("long"),n.key2Re=/^true|false|0|1$/,n.key32Re=/^-?(?:0|[1-9][0-9]*)$/,n.key64Re=/^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/,n.longToHash=function(t){return t?n.LongBits.from(t).toHash():n.LongBits.zeroHash},n.longFromHash=function(t,e){var r=n.LongBits.fromHash(t);return n.Long?n.Long.fromBits(r.lo,r.hi,e):r.toNumber(Boolean(e))},n.merge=i,n.lcFirst=function(t){return t.charAt(0).toLowerCase()+t.substring(1)},n.newError=o,n.ProtocolError=o("ProtocolError"),n.oneOfGetter=function(t){for(var e={},r=0;r<t.length;++r)e[t[r]]=1;return function(){for(var t=Object.keys(this),r=t.length-1;r>-1;--r)if(1===e[t[r]]&&void 0!==this[t[r]]&&null!==this[t[r]])return t[r]}},n.oneOfSetter=function(t){return function(e){for(var r=0;r<t.length;++r)t[r]!==e&&delete this[t[r]]}},n.toJSONOptions={longs:String,enums:String,bytes:String,json:!0},n._configure=function(){var t=n.Buffer;t?(n._Buffer_from=t.from!==Uint8Array.from&&t.from||function(e,r){return new t(e,r)},n._Buffer_allocUnsafe=t.allocUnsafe||function(e){return new t(e)}):n._Buffer_from=n._Buffer_allocUnsafe=null}}).call(this,r(16))},function(t,e,r){"use strict";t.exports=f;var n=r(4);((f.prototype=Object.create(n.prototype)).constructor=f).className="Field";var i,o=r(1),s=r(5),u=r(0),a=/^required|optional|repeated$/;function f(t,e,r,i,o,f,l){if(u.isObject(i)?(l=o,f=i,i=o=void 0):u.isObject(o)&&(l=f,f=o,o=void 0),n.call(this,t,f),!u.isInteger(e)||e<0)throw TypeError("id must be a non-negative integer");if(!u.isString(r))throw TypeError("type must be a string");if(void 0!==i&&!a.test(i=i.toString().toLowerCase()))throw TypeError("rule must be a string rule");if(void 0!==o&&!u.isString(o))throw TypeError("extend must be a string");this.rule=i&&"optional"!==i?i:void 0,this.type=r,this.id=e,this.extend=o||void 0,this.required="required"===i,this.optional=!this.required,this.repeated="repeated"===i,this.map=!1,this.message=null,this.partOf=null,this.typeDefault=null,this.defaultValue=null,this.long=!!u.Long&&void 0!==s.long[r],this.bytes="bytes"===r,this.resolvedType=null,this.extensionField=null,this.declaringField=null,this._packed=null,this.comment=l}f.fromJSON=function(t,e){return new f(t,e.id,e.type,e.rule,e.extend,e.options,e.comment)},Object.defineProperty(f.prototype,"packed",{get:function(){return null===this._packed&&(this._packed=!1!==this.getOption("packed")),this._packed}}),f.prototype.setOption=function(t,e,r){return"packed"===t&&(this._packed=null),n.prototype.setOption.call(this,t,e,r)},f.prototype.toJSON=function(t){var e=!!t&&Boolean(t.keepComments);return u.toObject(["rule","optional"!==this.rule&&this.rule||void 0,"type",this.type,"id",this.id,"extend",this.extend,"options",this.options,"comment",e?this.comment:void 0])},f.prototype.resolve=function(){if(this.resolved)return this;if(void 0===(this.typeDefault=s.defaults[this.type])&&(this.resolvedType=(this.declaringField?this.declaringField.parent:this.parent).lookupTypeOrEnum(this.type),this.resolvedType instanceof i?this.typeDefault=null:this.typeDefault=this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]),this.options&&null!=this.options.default&&(this.typeDefault=this.options.default,this.resolvedType instanceof o&&"string"==typeof this.typeDefault&&(this.typeDefault=this.resolvedType.values[this.typeDefault])),this.options&&(!0!==this.options.packed&&(void 0===this.options.packed||!this.resolvedType||this.resolvedType instanceof o)||delete this.options.packed,Object.keys(this.options).length||(this.options=void 0)),this.long)this.typeDefault=u.Long.fromNumber(this.typeDefault,"u"===this.type.charAt(0)),Object.freeze&&Object.freeze(this.typeDefault);else if(this.bytes&&"string"==typeof this.typeDefault){var t;u.base64.test(this.typeDefault)?u.base64.decode(this.typeDefault,t=u.newBuffer(u.base64.length(this.typeDefault)),0):u.utf8.write(this.typeDefault,t=u.newBuffer(u.utf8.length(this.typeDefault)),0),this.typeDefault=t}return this.map?this.defaultValue=u.emptyObject:this.repeated?this.defaultValue=u.emptyArray:this.defaultValue=this.typeDefault,this.parent instanceof i&&(this.parent.ctor.prototype[this.name]=this.defaultValue),n.prototype.resolve.call(this)},f.d=function(t,e,r,n){return"function"==typeof e?e=u.decorateType(e).name:e&&"object"==typeof e&&(e=u.decorateEnum(e).name),function(i,o){u.decorateType(i.constructor).add(new f(o,t,e,r,{default:n}))}},f._configure=function(t){i=t}},function(t,e,r){"use strict";t.exports=o,o.className="ReflectionObject";var n,i=r(0);function o(t,e){if(!i.isString(t))throw TypeError("name must be a string");if(e&&!i.isObject(e))throw TypeError("options must be an object");this.options=e,this.name=t,this.parent=null,this.resolved=!1,this.comment=null,this.filename=null}Object.defineProperties(o.prototype,{root:{get:function(){for(var t=this;null!==t.parent;)t=t.parent;return t}},fullName:{get:function(){for(var t=[this.name],e=this.parent;e;)t.unshift(e.name),e=e.parent;return t.join(".")}}}),o.prototype.toJSON=function(){throw Error()},o.prototype.onAdd=function(t){this.parent&&this.parent!==t&&this.parent.remove(this),this.parent=t,this.resolved=!1;var e=t.root;e instanceof n&&e._handleAdd(this)},o.prototype.onRemove=function(t){var e=t.root;e instanceof n&&e._handleRemove(this),this.parent=null,this.resolved=!1},o.prototype.resolve=function(){return this.resolved?this:(this.root instanceof n&&(this.resolved=!0),this)},o.prototype.getOption=function(t){if(this.options)return this.options[t]},o.prototype.setOption=function(t,e,r){return r&&this.options&&void 0!==this.options[t]||((this.options||(this.options={}))[t]=e),this},o.prototype.setOptions=function(t,e){if(t)for(var r=Object.keys(t),n=0;n<r.length;++n)this.setOption(r[n],t[r[n]],e);return this},o.prototype.toString=function(){var t=this.constructor.className,e=this.fullName;return e.length?t+" "+e:t},o._configure=function(t){n=t}},function(t,e,r){"use strict";var n=e,i=r(0),o=["double","float","int32","uint32","sint32","fixed32","sfixed32","int64","uint64","sint64","fixed64","sfixed64","bool","string","bytes"];function s(t,e){var r=0,n={};for(e|=0;r<t.length;)n[o[r+e]]=t[r++];return n}n.basic=s([1,5,0,0,0,5,5,0,0,0,1,1,0,2,2]),n.defaults=s([0,0,0,0,0,0,0,0,0,0,0,0,!1,"",i.emptyArray,null]),n.long=s([0,0,0,1,1],7),n.mapKey=s([0,0,0,5,5,0,0,0,1,1,0,2],2),n.packed=s([1,5,0,0,0,5,5,0,0,0,1,1,0])},function(t,e,r){"use strict";t.exports=l;var n=r(4);((l.prototype=Object.create(n.prototype)).constructor=l).className="Namespace";var i,o,s,u=r(3),a=r(0);function f(t,e){if(t&&t.length){for(var r={},n=0;n<t.length;++n)r[t[n].name]=t[n].toJSON(e);return r}}function l(t,e){n.call(this,t,e),this.nested=void 0,this._nestedArray=null}function h(t){return t._nestedArray=null,t}l.fromJSON=function(t,e){return new l(t,e.options).addJSON(e.nested)},l.arrayToJSON=f,l.isReservedId=function(t,e){if(t)for(var r=0;r<t.length;++r)if("string"!=typeof t[r]&&t[r][0]<=e&&t[r][1]>=e)return!0;return!1},l.isReservedName=function(t,e){if(t)for(var r=0;r<t.length;++r)if(t[r]===e)return!0;return!1},Object.defineProperty(l.prototype,"nestedArray",{get:function(){return this._nestedArray||(this._nestedArray=a.toArray(this.nested))}}),l.prototype.toJSON=function(t){return a.toObject(["options",this.options,"nested",f(this.nestedArray,t)])},l.prototype.addJSON=function(t){if(t)for(var e,r=Object.keys(t),n=0;n<r.length;++n)e=t[r[n]],this.add((void 0!==e.fields?i.fromJSON:void 0!==e.values?s.fromJSON:void 0!==e.methods?o.fromJSON:void 0!==e.id?u.fromJSON:l.fromJSON)(r[n],e));return this},l.prototype.get=function(t){return this.nested&&this.nested[t]||null},l.prototype.getEnum=function(t){if(this.nested&&this.nested[t]instanceof s)return this.nested[t].values;throw Error("no such enum: "+t)},l.prototype.add=function(t){if(!(t instanceof u&&void 0!==t.extend||t instanceof i||t instanceof s||t instanceof o||t instanceof l))throw TypeError("object must be a valid nested object");if(this.nested){var e=this.get(t.name);if(e){if(!(e instanceof l&&t instanceof l)||e instanceof i||e instanceof o)throw Error("duplicate name '"+t.name+"' in "+this);for(var r=e.nestedArray,n=0;n<r.length;++n)t.add(r[n]);this.remove(e),this.nested||(this.nested={}),t.setOptions(e.options,!0)}}else this.nested={};return this.nested[t.name]=t,t.onAdd(this),h(this)},l.prototype.remove=function(t){if(!(t instanceof n))throw TypeError("object must be a ReflectionObject");if(t.parent!==this)throw Error(t+" is not a member of "+this);return delete this.nested[t.name],Object.keys(this.nested).length||(this.nested=void 0),t.onRemove(this),h(this)},l.prototype.define=function(t,e){if(a.isString(t))t=t.split(".");else if(!Array.isArray(t))throw TypeError("illegal path");if(t&&t.length&&""===t[0])throw Error("path must be relative");for(var r=this;t.length>0;){var n=t.shift();if(r.nested&&r.nested[n]){if(!((r=r.nested[n])instanceof l))throw Error("path conflicts with non-namespace objects")}else r.add(r=new l(n))}return e&&r.addJSON(e),r},l.prototype.resolveAll=function(){for(var t=this.nestedArray,e=0;e<t.length;)t[e]instanceof l?t[e++].resolveAll():t[e++].resolve();return this.resolve()},l.prototype.lookup=function(t,e,r){if("boolean"==typeof e?(r=e,e=void 0):e&&!Array.isArray(e)&&(e=[e]),a.isString(t)&&t.length){if("."===t)return this.root;t=t.split(".")}else if(!t.length)return this;if(""===t[0])return this.root.lookup(t.slice(1),e);var n=this.get(t[0]);if(n){if(1===t.length){if(!e||e.indexOf(n.constructor)>-1)return n}else if(n instanceof l&&(n=n.lookup(t.slice(1),e,!0)))return n}else for(var i=0;i<this.nestedArray.length;++i)if(this._nestedArray[i]instanceof l&&(n=this._nestedArray[i].lookup(t,e,!0)))return n;return null===this.parent||r?null:this.parent.lookup(t,e)},l.prototype.lookupType=function(t){var e=this.lookup(t,[i]);if(!e)throw Error("no such type: "+t);return e},l.prototype.lookupEnum=function(t){var e=this.lookup(t,[s]);if(!e)throw Error("no such Enum '"+t+"' in "+this);return e},l.prototype.lookupTypeOrEnum=function(t){var e=this.lookup(t,[i,s]);if(!e)throw Error("no such Type or Enum '"+t+"' in "+this);return e},l.prototype.lookupService=function(t){var e=this.lookup(t,[o]);if(!e)throw Error("no such Service '"+t+"' in "+this);return e},l._configure=function(t,e,r){i=t,o=e,s=r}},function(t,e,r){"use strict";t.exports=s;var n=r(4);((s.prototype=Object.create(n.prototype)).constructor=s).className="OneOf";var i=r(3),o=r(0);function s(t,e,r,i){if(Array.isArray(e)||(r=e,e=void 0),n.call(this,t,r),void 0!==e&&!Array.isArray(e))throw TypeError("fieldNames must be an Array");this.oneof=e||[],this.fieldsArray=[],this.comment=i}function u(t){if(t.parent)for(var e=0;e<t.fieldsArray.length;++e)t.fieldsArray[e].parent||t.parent.add(t.fieldsArray[e])}s.fromJSON=function(t,e){return new s(t,e.oneof,e.options,e.comment)},s.prototype.toJSON=function(t){var e=!!t&&Boolean(t.keepComments);return o.toObject(["options",this.options,"oneof",this.oneof,"comment",e?this.comment:void 0])},s.prototype.add=function(t){if(!(t instanceof i))throw TypeError("field must be a Field");return t.parent&&t.parent!==this.parent&&t.parent.remove(t),this.oneof.push(t.name),this.fieldsArray.push(t),t.partOf=this,u(this),this},s.prototype.remove=function(t){if(!(t instanceof i))throw TypeError("field must be a Field");var e=this.fieldsArray.indexOf(t);if(e<0)throw Error(t+" is not a member of "+this);return this.fieldsArray.splice(e,1),(e=this.oneof.indexOf(t.name))>-1&&this.oneof.splice(e,1),t.partOf=null,this},s.prototype.onAdd=function(t){n.prototype.onAdd.call(this,t);for(var e=0;e<this.oneof.length;++e){var r=t.get(this.oneof[e]);r&&!r.partOf&&(r.partOf=this,this.fieldsArray.push(r))}u(this)},s.prototype.onRemove=function(t){for(var e,r=0;r<this.fieldsArray.length;++r)(e=this.fieldsArray[r]).parent&&e.parent.remove(e);n.prototype.onRemove.call(this,t)},s.d=function(){for(var t=new Array(arguments.length),e=0;e<arguments.length;)t[e]=arguments[e++];return function(e,r){o.decorateType(e.constructor).add(new s(r,t)),Object.defineProperty(e,r,{get:o.oneOfGetter(t),set:o.oneOfSetter(t)})}}},function(t,e,r){"use strict";t.exports=h;var n,i=r(2),o=i.LongBits,s=i.base64,u=i.utf8;function a(t,e,r){this.fn=t,this.len=e,this.next=void 0,this.val=r}function f(){}function l(t){this.head=t.head,this.tail=t.tail,this.len=t.len,this.next=t.states}function h(){this.len=0,this.head=new a(f,0,0),this.tail=this.head,this.states=null}function c(t,e,r){e[r]=255&t}function p(t,e){this.len=t,this.next=void 0,this.val=e}function d(t,e,r){for(;t.hi;)e[r++]=127&t.lo|128,t.lo=(t.lo>>>7|t.hi<<25)>>>0,t.hi>>>=7;for(;t.lo>127;)e[r++]=127&t.lo|128,t.lo=t.lo>>>7;e[r++]=t.lo}function y(t,e,r){e[r]=255&t,e[r+1]=t>>>8&255,e[r+2]=t>>>16&255,e[r+3]=t>>>24}h.create=i.Buffer?function(){return(h.create=function(){return new n})()}:function(){return new h},h.alloc=function(t){return new i.Array(t)},i.Array!==Array&&(h.alloc=i.pool(h.alloc,i.Array.prototype.subarray)),h.prototype._push=function(t,e,r){return this.tail=this.tail.next=new a(t,e,r),this.len+=e,this},p.prototype=Object.create(a.prototype),p.prototype.fn=function(t,e,r){for(;t>127;)e[r++]=127&t|128,t>>>=7;e[r]=t},h.prototype.uint32=function(t){return this.len+=(this.tail=this.tail.next=new p((t>>>=0)<128?1:t<16384?2:t<2097152?3:t<268435456?4:5,t)).len,this},h.prototype.int32=function(t){return t<0?this._push(d,10,o.fromNumber(t)):this.uint32(t)},h.prototype.sint32=function(t){return this.uint32((t<<1^t>>31)>>>0)},h.prototype.uint64=function(t){var e=o.from(t);return this._push(d,e.length(),e)},h.prototype.int64=h.prototype.uint64,h.prototype.sint64=function(t){var e=o.from(t).zzEncode();return this._push(d,e.length(),e)},h.prototype.bool=function(t){return this._push(c,1,t?1:0)},h.prototype.fixed32=function(t){return this._push(y,4,t>>>0)},h.prototype.sfixed32=h.prototype.fixed32,h.prototype.fixed64=function(t){var e=o.from(t);return this._push(y,4,e.lo)._push(y,4,e.hi)},h.prototype.sfixed64=h.prototype.fixed64,h.prototype.float=function(t){return this._push(i.float.writeFloatLE,4,t)},h.prototype.double=function(t){return this._push(i.float.writeDoubleLE,8,t)};var v=i.Array.prototype.set?function(t,e,r){e.set(t,r)}:function(t,e,r){for(var n=0;n<t.length;++n)e[r+n]=t[n]};h.prototype.bytes=function(t){var e=t.length>>>0;if(!e)return this._push(c,1,0);if(i.isString(t)){var r=h.alloc(e=s.length(t));s.decode(t,r,0),t=r}return this.uint32(e)._push(v,e,t)},h.prototype.string=function(t){var e=u.length(t);return e?this.uint32(e)._push(u.write,e,t):this._push(c,1,0)},h.prototype.fork=function(){return this.states=new l(this),this.head=this.tail=new a(f,0,0),this.len=0,this},h.prototype.reset=function(){return this.states?(this.head=this.states.head,this.tail=this.states.tail,this.len=this.states.len,this.states=this.states.next):(this.head=this.tail=new a(f,0,0),this.len=0),this},h.prototype.ldelim=function(){var t=this.head,e=this.tail,r=this.len;return this.reset().uint32(r),r&&(this.tail.next=t.next,this.tail=e,this.len+=r),this},h.prototype.finish=function(){for(var t=this.head.next,e=this.constructor.alloc(this.len),r=0;t;)t.fn(t.val,e,r),r+=t.len,t=t.next;return e},h._configure=function(t){n=t}},function(t,e,r){"use strict";t.exports=a;var n,i=r(2),o=i.LongBits,s=i.utf8;function u(t,e){return RangeError("index out of range: "+t.pos+" + "+(e||1)+" > "+t.len)}function a(t){this.buf=t,this.pos=0,this.len=t.length}var f,l="undefined"!=typeof Uint8Array?function(t){if(t instanceof Uint8Array||Array.isArray(t))return new a(t);throw Error("illegal buffer")}:function(t){if(Array.isArray(t))return new a(t);throw Error("illegal buffer")};function h(){var t=new o(0,0),e=0;if(!(this.len-this.pos>4)){for(;e<3;++e){if(this.pos>=this.len)throw u(this);if(t.lo=(t.lo|(127&this.buf[this.pos])<<7*e)>>>0,this.buf[this.pos++]<128)return t}return t.lo=(t.lo|(127&this.buf[this.pos++])<<7*e)>>>0,t}for(;e<4;++e)if(t.lo=(t.lo|(127&this.buf[this.pos])<<7*e)>>>0,this.buf[this.pos++]<128)return t;if(t.lo=(t.lo|(127&this.buf[this.pos])<<28)>>>0,t.hi=(t.hi|(127&this.buf[this.pos])>>4)>>>0,this.buf[this.pos++]<128)return t;if(e=0,this.len-this.pos>4){for(;e<5;++e)if(t.hi=(t.hi|(127&this.buf[this.pos])<<7*e+3)>>>0,this.buf[this.pos++]<128)return t}else for(;e<5;++e){if(this.pos>=this.len)throw u(this);if(t.hi=(t.hi|(127&this.buf[this.pos])<<7*e+3)>>>0,this.buf[this.pos++]<128)return t}throw Error("invalid varint encoding")}function c(t,e){return(t[e-4]|t[e-3]<<8|t[e-2]<<16|t[e-1]<<24)>>>0}function p(){if(this.pos+8>this.len)throw u(this,8);return new o(c(this.buf,this.pos+=4),c(this.buf,this.pos+=4))}a.create=i.Buffer?function(t){return(a.create=function(t){return i.Buffer.isBuffer(t)?new n(t):l(t)})(t)}:l,a.prototype._slice=i.Array.prototype.subarray||i.Array.prototype.slice,a.prototype.uint32=(f=4294967295,function(){if(f=(127&this.buf[this.pos])>>>0,this.buf[this.pos++]<128)return f;if(f=(f|(127&this.buf[this.pos])<<7)>>>0,this.buf[this.pos++]<128)return f;if(f=(f|(127&this.buf[this.pos])<<14)>>>0,this.buf[this.pos++]<128)return f;if(f=(f|(127&this.buf[this.pos])<<21)>>>0,this.buf[this.pos++]<128)return f;if(f=(f|(15&this.buf[this.pos])<<28)>>>0,this.buf[this.pos++]<128)return f;if((this.pos+=5)>this.len)throw this.pos=this.len,u(this,10);return f}),a.prototype.int32=function(){return 0|this.uint32()},a.prototype.sint32=function(){var t=this.uint32();return t>>>1^-(1&t)|0},a.prototype.bool=function(){return 0!==this.uint32()},a.prototype.fixed32=function(){if(this.pos+4>this.len)throw u(this,4);return c(this.buf,this.pos+=4)},a.prototype.sfixed32=function(){if(this.pos+4>this.len)throw u(this,4);return 0|c(this.buf,this.pos+=4)},a.prototype.float=function(){if(this.pos+4>this.len)throw u(this,4);var t=i.float.readFloatLE(this.buf,this.pos);return this.pos+=4,t},a.prototype.double=function(){if(this.pos+8>this.len)throw u(this,4);var t=i.float.readDoubleLE(this.buf,this.pos);return this.pos+=8,t},a.prototype.bytes=function(){var t=this.uint32(),e=this.pos,r=this.pos+t;if(r>this.len)throw u(this,t);return this.pos+=t,Array.isArray(this.buf)?this.buf.slice(e,r):e===r?new this.buf.constructor(0):this._slice.call(this.buf,e,r)},a.prototype.string=function(){var t=this.bytes();return s.read(t,0,t.length)},a.prototype.skip=function(t){if("number"==typeof t){if(this.pos+t>this.len)throw u(this,t);this.pos+=t}else do{if(this.pos>=this.len)throw u(this)}while(128&this.buf[this.pos++]);return this},a.prototype.skipType=function(t){switch(t){case 0:this.skip();break;case 1:this.skip(8);break;case 2:this.skip(this.uint32());break;case 3:for(;4!=(t=7&this.uint32());)this.skipType(t);break;case 5:this.skip(4);break;default:throw Error("invalid wire type "+t+" at offset "+this.pos)}return this},a._configure=function(t){n=t;var e=i.Long?"toLong":"toNumber";i.merge(a.prototype,{int64:function(){return h.call(this)[e](!1)},uint64:function(){return h.call(this)[e](!0)},sint64:function(){return h.call(this).zzDecode()[e](!1)},fixed64:function(){return p.call(this)[e](!0)},sfixed64:function(){return p.call(this)[e](!1)}})}},function(t,e,r){"use strict";t.exports=g;var n=r(6);((g.prototype=Object.create(n.prototype)).constructor=g).className="Type";var i=r(1),o=r(7),s=r(3),u=r(11),a=r(12),f=r(14),l=r(9),h=r(8),c=r(0),p=r(21),d=r(22),y=r(23),v=r(24),m=r(25);function g(t,e){n.call(this,t,e),this.fields={},this.oneofs=void 0,this.extensions=void 0,this.reserved=void 0,this.group=void 0,this._fieldsById=null,this._fieldsArray=null,this._oneofsArray=null,this._ctor=null}function b(t){return t._fieldsById=t._fieldsArray=t._oneofsArray=null,delete t.encode,delete t.decode,delete t.verify,t}Object.defineProperties(g.prototype,{fieldsById:{get:function(){if(this._fieldsById)return this._fieldsById;this._fieldsById={};for(var t=Object.keys(this.fields),e=0;e<t.length;++e){var r=this.fields[t[e]],n=r.id;if(this._fieldsById[n])throw Error("duplicate id "+n+" in "+this);this._fieldsById[n]=r}return this._fieldsById}},fieldsArray:{get:function(){return this._fieldsArray||(this._fieldsArray=c.toArray(this.fields))}},oneofsArray:{get:function(){return this._oneofsArray||(this._oneofsArray=c.toArray(this.oneofs))}},ctor:{get:function(){return this._ctor||(this.ctor=g.generateConstructor(this)())},set:function(t){var e=t.prototype;e instanceof f||((t.prototype=new f).constructor=t,c.merge(t.prototype,e)),t.$type=t.prototype.$type=this,c.merge(t,f,!0),this._ctor=t;for(var r=0;r<this.fieldsArray.length;++r)this._fieldsArray[r].resolve();var n={};for(r=0;r<this.oneofsArray.length;++r)n[this._oneofsArray[r].resolve().name]={get:c.oneOfGetter(this._oneofsArray[r].oneof),set:c.oneOfSetter(this._oneofsArray[r].oneof)};r&&Object.defineProperties(t.prototype,n)}}}),g.generateConstructor=function(t){for(var e,r=c.codegen(["p"],t.name),n=0;n<t.fieldsArray.length;++n)(e=t._fieldsArray[n]).map?r("this%s={}",c.safeProp(e.name)):e.repeated&&r("this%s=[]",c.safeProp(e.name));return r("if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)")("this[ks[i]]=p[ks[i]]")},g.fromJSON=function(t,e){var r=new g(t,e.options);r.extensions=e.extensions,r.reserved=e.reserved;for(var f=Object.keys(e.fields),l=0;l<f.length;++l)r.add((void 0!==e.fields[f[l]].keyType?u.fromJSON:s.fromJSON)(f[l],e.fields[f[l]]));if(e.oneofs)for(f=Object.keys(e.oneofs),l=0;l<f.length;++l)r.add(o.fromJSON(f[l],e.oneofs[f[l]]));if(e.nested)for(f=Object.keys(e.nested),l=0;l<f.length;++l){var h=e.nested[f[l]];r.add((void 0!==h.id?s.fromJSON:void 0!==h.fields?g.fromJSON:void 0!==h.values?i.fromJSON:void 0!==h.methods?a.fromJSON:n.fromJSON)(f[l],h))}return e.extensions&&e.extensions.length&&(r.extensions=e.extensions),e.reserved&&e.reserved.length&&(r.reserved=e.reserved),e.group&&(r.group=!0),e.comment&&(r.comment=e.comment),r},g.prototype.toJSON=function(t){var e=n.prototype.toJSON.call(this,t),r=!!t&&Boolean(t.keepComments);return c.toObject(["options",e&&e.options||void 0,"oneofs",n.arrayToJSON(this.oneofsArray,t),"fields",n.arrayToJSON(this.fieldsArray.filter(function(t){return!t.declaringField}),t)||{},"extensions",this.extensions&&this.extensions.length?this.extensions:void 0,"reserved",this.reserved&&this.reserved.length?this.reserved:void 0,"group",this.group||void 0,"nested",e&&e.nested||void 0,"comment",r?this.comment:void 0])},g.prototype.resolveAll=function(){for(var t=this.fieldsArray,e=0;e<t.length;)t[e++].resolve();var r=this.oneofsArray;for(e=0;e<r.length;)r[e++].resolve();return n.prototype.resolveAll.call(this)},g.prototype.get=function(t){return this.fields[t]||this.oneofs&&this.oneofs[t]||this.nested&&this.nested[t]||null},g.prototype.add=function(t){if(this.get(t.name))throw Error("duplicate name '"+t.name+"' in "+this);if(t instanceof s&&void 0===t.extend){if(this._fieldsById?this._fieldsById[t.id]:this.fieldsById[t.id])throw Error("duplicate id "+t.id+" in "+this);if(this.isReservedId(t.id))throw Error("id "+t.id+" is reserved in "+this);if(this.isReservedName(t.name))throw Error("name '"+t.name+"' is reserved in "+this);return t.parent&&t.parent.remove(t),this.fields[t.name]=t,t.message=this,t.onAdd(this),b(this)}return t instanceof o?(this.oneofs||(this.oneofs={}),this.oneofs[t.name]=t,t.onAdd(this),b(this)):n.prototype.add.call(this,t)},g.prototype.remove=function(t){if(t instanceof s&&void 0===t.extend){if(!this.fields||this.fields[t.name]!==t)throw Error(t+" is not a member of "+this);return delete this.fields[t.name],t.parent=null,t.onRemove(this),b(this)}if(t instanceof o){if(!this.oneofs||this.oneofs[t.name]!==t)throw Error(t+" is not a member of "+this);return delete this.oneofs[t.name],t.parent=null,t.onRemove(this),b(this)}return n.prototype.remove.call(this,t)},g.prototype.isReservedId=function(t){return n.isReservedId(this.reserved,t)},g.prototype.isReservedName=function(t){return n.isReservedName(this.reserved,t)},g.prototype.create=function(t){return new this.ctor(t)},g.prototype.setup=function(){for(var t=this.fullName,e=[],r=0;r<this.fieldsArray.length;++r)e.push(this._fieldsArray[r].resolve().resolvedType);this.encode=p(this)({Writer:h,types:e,util:c}),this.decode=d(this)({Reader:l,types:e,util:c}),this.verify=y(this)({types:e,util:c}),this.fromObject=v.fromObject(this)({types:e,util:c}),this.toObject=v.toObject(this)({types:e,util:c});var n=m[t];if(n){var i=Object.create(this);i.fromObject=this.fromObject,this.fromObject=n.fromObject.bind(i),i.toObject=this.toObject,this.toObject=n.toObject.bind(i)}return this},g.prototype.encode=function(t,e){return this.setup().encode(t,e)},g.prototype.encodeDelimited=function(t,e){return this.encode(t,e&&e.len?e.fork():e).ldelim()},g.prototype.decode=function(t,e){return this.setup().decode(t,e)},g.prototype.decodeDelimited=function(t){return t instanceof l||(t=l.create(t)),this.decode(t,t.uint32())},g.prototype.verify=function(t){return this.setup().verify(t)},g.prototype.fromObject=function(t){return this.setup().fromObject(t)},g.prototype.toObject=function(t,e){return this.setup().toObject(t,e)},g.d=function(t){return function(e){c.decorateType(e,t)}}},function(t,e,r){"use strict";t.exports=s;var n=r(3);((s.prototype=Object.create(n.prototype)).constructor=s).className="MapField";var i=r(5),o=r(0);function s(t,e,r,i,s,u){if(n.call(this,t,e,i,void 0,void 0,s,u),!o.isString(r))throw TypeError("keyType must be a string");this.keyType=r,this.resolvedKeyType=null,this.map=!0}s.fromJSON=function(t,e){return new s(t,e.id,e.keyType,e.type,e.options,e.comment)},s.prototype.toJSON=function(t){var e=!!t&&Boolean(t.keepComments);return o.toObject(["keyType",this.keyType,"type",this.type,"id",this.id,"extend",this.extend,"options",this.options,"comment",e?this.comment:void 0])},s.prototype.resolve=function(){if(this.resolved)return this;if(void 0===i.mapKey[this.keyType])throw Error("invalid key type: "+this.keyType);return n.prototype.resolve.call(this)},s.d=function(t,e,r){return"function"==typeof r?r=o.decorateType(r).name:r&&"object"==typeof r&&(r=o.decorateEnum(r).name),function(n,i){o.decorateType(n.constructor).add(new s(i,t,e,r))}}},function(t,e,r){"use strict";t.exports=u;var n=r(6);((u.prototype=Object.create(n.prototype)).constructor=u).className="Service";var i=r(13),o=r(0),s=r(19);function u(t,e){n.call(this,t,e),this.methods={},this._methodsArray=null}function a(t){return t._methodsArray=null,t}u.fromJSON=function(t,e){var r=new u(t,e.options);if(e.methods)for(var n=Object.keys(e.methods),o=0;o<n.length;++o)r.add(i.fromJSON(n[o],e.methods[n[o]]));return e.nested&&r.addJSON(e.nested),r.comment=e.comment,r},u.prototype.toJSON=function(t){var e=n.prototype.toJSON.call(this,t),r=!!t&&Boolean(t.keepComments);return o.toObject(["options",e&&e.options||void 0,"methods",n.arrayToJSON(this.methodsArray,t)||{},"nested",e&&e.nested||void 0,"comment",r?this.comment:void 0])},Object.defineProperty(u.prototype,"methodsArray",{get:function(){return this._methodsArray||(this._methodsArray=o.toArray(this.methods))}}),u.prototype.get=function(t){return this.methods[t]||n.prototype.get.call(this,t)},u.prototype.resolveAll=function(){for(var t=this.methodsArray,e=0;e<t.length;++e)t[e].resolve();return n.prototype.resolve.call(this)},u.prototype.add=function(t){if(this.get(t.name))throw Error("duplicate name '"+t.name+"' in "+this);return t instanceof i?(this.methods[t.name]=t,t.parent=this,a(this)):n.prototype.add.call(this,t)},u.prototype.remove=function(t){if(t instanceof i){if(this.methods[t.name]!==t)throw Error(t+" is not a member of "+this);return delete this.methods[t.name],t.parent=null,a(this)}return n.prototype.remove.call(this,t)},u.prototype.create=function(t,e,r){for(var n,i=new s.Service(t,e,r),u=0;u<this.methodsArray.length;++u){var a=o.lcFirst((n=this._methodsArray[u]).resolve().name).replace(/[^$\w_]/g,"");i[a]=o.codegen(["r","c"],o.isReserved(a)?a+"_":a)("return this.rpcCall(m,q,s,r,c)")({m:n,q:n.resolvedRequestType.ctor,s:n.resolvedResponseType.ctor})}return i}},function(t,e,r){"use strict";t.exports=o;var n=r(4);((o.prototype=Object.create(n.prototype)).constructor=o).className="Method";var i=r(0);function o(t,e,r,o,s,u,a,f){if(i.isObject(s)?(a=s,s=u=void 0):i.isObject(u)&&(a=u,u=void 0),void 0!==e&&!i.isString(e))throw TypeError("type must be a string");if(!i.isString(r))throw TypeError("requestType must be a string");if(!i.isString(o))throw TypeError("responseType must be a string");n.call(this,t,a),this.type=e||"rpc",this.requestType=r,this.requestStream=!!s||void 0,this.responseType=o,this.responseStream=!!u||void 0,this.resolvedRequestType=null,this.resolvedResponseType=null,this.comment=f}o.fromJSON=function(t,e){return new o(t,e.type,e.requestType,e.responseType,e.requestStream,e.responseStream,e.options,e.comment)},o.prototype.toJSON=function(t){var e=!!t&&Boolean(t.keepComments);return i.toObject(["type","rpc"!==this.type&&this.type||void 0,"requestType",this.requestType,"requestStream",this.requestStream,"responseType",this.responseType,"responseStream",this.responseStream,"options",this.options,"comment",e?this.comment:void 0])},o.prototype.resolve=function(){return this.resolved?this:(this.resolvedRequestType=this.parent.lookupType(this.requestType),this.resolvedResponseType=this.parent.lookupType(this.responseType),n.prototype.resolve.call(this))}},function(t,e,r){"use strict";t.exports=i;var n=r(2);function i(t){if(t)for(var e=Object.keys(t),r=0;r<e.length;++r)this[e[r]]=t[e[r]]}i.create=function(t){return this.$type.create(t)},i.encode=function(t,e){return this.$type.encode(t,e)},i.encodeDelimited=function(t,e){return this.$type.encodeDelimited(t,e)},i.decode=function(t){return this.$type.decode(t)},i.decodeDelimited=function(t){return this.$type.decodeDelimited(t)},i.verify=function(t){return this.$type.verify(t)},i.fromObject=function(t){return this.$type.fromObject(t)},i.toObject=function(t,e){return this.$type.toObject(t,e)},i.prototype.toJSON=function(){return this.$type.toObject(this,n.toJSONOptions)}},function(t,e,r){"use strict";t.exports=h;var n=r(6);((h.prototype=Object.create(n.prototype)).constructor=h).className="Root";var i,o,s,u=r(3),a=r(1),f=r(7),l=r(0);function h(t){n.call(this,"",t),this.deferred=[],this.files=[]}function c(){}h.fromJSON=function(t,e){return e||(e=new h),t.options&&e.setOptions(t.options),e.addJSON(t.nested)},h.prototype.resolvePath=l.path.resolve,h.prototype.load=function t(e,r,n){"function"==typeof r&&(n=r,r=void 0);var i=this;if(!n)return l.asPromise(t,i,e,r);var u=n===c;function a(t,e){if(n){var r=n;if(n=null,u)throw t;r(t,e)}}function f(t,e){try{if(l.isString(e)&&"{"===e.charAt(0)&&(e=JSON.parse(e)),l.isString(e)){o.filename=t;var n,s=o(e,i,r),f=0;if(s.imports)for(;f<s.imports.length;++f)(n=i.resolvePath(t,s.imports[f]))&&h(n);if(s.weakImports)for(f=0;f<s.weakImports.length;++f)(n=i.resolvePath(t,s.weakImports[f]))&&h(n,!0)}else i.setOptions(e.options).addJSON(e.nested)}catch(t){a(t)}u||p||a(null,i)}function h(t,e){var r=t.lastIndexOf("google/protobuf/");if(r>-1){var o=t.substring(r);o in s&&(t=o)}if(!(i.files.indexOf(t)>-1))if(i.files.push(t),t in s)u?f(t,s[t]):(++p,setTimeout(function(){--p,f(t,s[t])}));else if(u){var h;try{h=l.fs.readFileSync(t).toString("utf8")}catch(t){return void(e||a(t))}f(t,h)}else++p,l.fetch(t,function(r,o){--p,n&&(r?e?p||a(null,i):a(r):f(t,o))})}var p=0;l.isString(e)&&(e=[e]);for(var d,y=0;y<e.length;++y)(d=i.resolvePath("",e[y]))&&h(d);if(u)return i;p||a(null,i)},h.prototype.loadSync=function(t,e){if(!l.isNode)throw Error("not supported");return this.load(t,e,c)},h.prototype.resolveAll=function(){if(this.deferred.length)throw Error("unresolvable extensions: "+this.deferred.map(function(t){return"'extend "+t.extend+"' in "+t.parent.fullName}).join(", "));return n.prototype.resolveAll.call(this)};var p=/^[A-Z]/;function d(t,e){var r=e.parent.lookup(e.extend);if(r){var n=new u(e.fullName,e.id,e.type,e.rule,void 0,e.options);return n.declaringField=e,e.extensionField=n,r.add(n),!0}return!1}h.prototype._handleAdd=function(t){if(t instanceof u)void 0===t.extend||t.extensionField||d(0,t)||this.deferred.push(t);else if(t instanceof a)p.test(t.name)&&(t.parent[t.name]=t.values);else if(!(t instanceof f)){if(t instanceof i)for(var e=0;e<this.deferred.length;)d(0,this.deferred[e])?this.deferred.splice(e,1):++e;for(var r=0;r<t.nestedArray.length;++r)this._handleAdd(t._nestedArray[r]);p.test(t.name)&&(t.parent[t.name]=t)}},h.prototype._handleRemove=function(t){if(t instanceof u){if(void 0!==t.extend)if(t.extensionField)t.extensionField.parent.remove(t.extensionField),t.extensionField=null;else{var e=this.deferred.indexOf(t);e>-1&&this.deferred.splice(e,1)}}else if(t instanceof a)p.test(t.name)&&delete t.parent[t.name];else if(t instanceof n){for(var r=0;r<t.nestedArray.length;++r)this._handleRemove(t._nestedArray[r]);p.test(t.name)&&delete t.parent[t.name]}},h._configure=function(t,e,r){i=t,o=e,s=r}},function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,e,r){"use strict";t.exports=function(t,e){var r=new Array(arguments.length-1),n=0,i=2,o=!0;for(;i<arguments.length;)r[n++]=arguments[i++];return new Promise(function(i,s){r[n]=function(t){if(o)if(o=!1,t)s(t);else{for(var e=new Array(arguments.length-1),r=0;r<e.length;)e[r++]=arguments[r];i.apply(null,e)}};try{t.apply(e||null,r)}catch(t){o&&(o=!1,s(t))}})}},function(module,exports,__webpack_require__){"use strict";function inquire(moduleName){try{var mod=eval("quire".replace(/^/,"re"))(moduleName);if(mod&&(mod.length||Object.keys(mod).length))return mod}catch(t){}return null}module.exports=inquire},function(t,e,r){"use strict";e.Service=r(46)},function(t,e,r){"use strict";t.exports={}},function(t,e,r){"use strict";t.exports=function(t){for(var e,r=o.codegen(["m","w"],t.name+"$encode")("if(!w)")("w=Writer.create()"),u=t.fieldsArray.slice().sort(o.compareFieldsById),a=0;a<u.length;++a){var f=u[a].resolve(),l=t._fieldsArray.indexOf(f),h=f.resolvedType instanceof n?"int32":f.type,c=i.basic[h];e="m"+o.safeProp(f.name),f.map?(r("if(%s!=null&&m.hasOwnProperty(%j)){",e,f.name)("for(var ks=Object.keys(%s),i=0;i<ks.length;++i){",e)("w.uint32(%i).fork().uint32(%i).%s(ks[i])",(f.id<<3|2)>>>0,8|i.mapKey[f.keyType],f.keyType),void 0===c?r("types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()",l,e):r(".uint32(%i).%s(%s[ks[i]]).ldelim()",16|c,h,e),r("}")("}")):f.repeated?(r("if(%s!=null&&%s.length){",e,e),f.packed&&void 0!==i.packed[h]?r("w.uint32(%i).fork()",(f.id<<3|2)>>>0)("for(var i=0;i<%s.length;++i)",e)("w.%s(%s[i])",h,e)("w.ldelim()"):(r("for(var i=0;i<%s.length;++i)",e),void 0===c?s(r,f,l,e+"[i]"):r("w.uint32(%i).%s(%s[i])",(f.id<<3|c)>>>0,h,e)),r("}")):(f.optional&&r("if(%s!=null&&m.hasOwnProperty(%j))",e,f.name),void 0===c?s(r,f,l,e):r("w.uint32(%i).%s(%s)",(f.id<<3|c)>>>0,h,e))}return r("return w")};var n=r(1),i=r(5),o=r(0);function s(t,e,r,n){return e.resolvedType.group?t("types[%i].encode(%s,w.uint32(%i)).uint32(%i)",r,n,(e.id<<3|3)>>>0,(e.id<<3|4)>>>0):t("types[%i].encode(%s,w.uint32(%i).fork()).ldelim()",r,n,(e.id<<3|2)>>>0)}},function(t,e,r){"use strict";t.exports=function(t){var e=o.codegen(["r","l"],t.name+"$decode")("if(!(r instanceof Reader))")("r=Reader.create(r)")("var c=l===undefined?r.len:r.pos+l,m=new this.ctor"+(t.fieldsArray.filter(function(t){return t.map}).length?",k":""))("while(r.pos<c){")("var t=r.uint32()");t.group&&e("if((t&7)===4)")("break");e("switch(t>>>3){");for(var r=0;r<t.fieldsArray.length;++r){var u=t._fieldsArray[r].resolve(),a=u.resolvedType instanceof n?"int32":u.type,f="m"+o.safeProp(u.name);e("case %i:",u.id),u.map?(e("r.skip().pos++")("if(%s===util.emptyObject)",f)("%s={}",f)("k=r.%s()",u.keyType)("r.pos++"),void 0!==i.long[u.keyType]?void 0===i.basic[a]?e('%s[typeof k==="object"?util.longToHash(k):k]=types[%i].decode(r,r.uint32())',f,r):e('%s[typeof k==="object"?util.longToHash(k):k]=r.%s()',f,a):void 0===i.basic[a]?e("%s[k]=types[%i].decode(r,r.uint32())",f,r):e("%s[k]=r.%s()",f,a)):u.repeated?(e("if(!(%s&&%s.length))",f,f)("%s=[]",f),void 0!==i.packed[a]&&e("if((t&7)===2){")("var c2=r.uint32()+r.pos")("while(r.pos<c2)")("%s.push(r.%s())",f,a)("}else"),void 0===i.basic[a]?e(u.resolvedType.group?"%s.push(types[%i].decode(r))":"%s.push(types[%i].decode(r,r.uint32()))",f,r):e("%s.push(r.%s())",f,a)):void 0===i.basic[a]?e(u.resolvedType.group?"%s=types[%i].decode(r)":"%s=types[%i].decode(r,r.uint32())",f,r):e("%s=r.%s()",f,a),e("break")}for(e("default:")("r.skipType(t&7)")("break")("}")("}"),r=0;r<t._fieldsArray.length;++r){var l=t._fieldsArray[r];l.required&&e("if(!m.hasOwnProperty(%j))",l.name)("throw util.ProtocolError(%j,{instance:m})",s(l))}return e("return m")};var n=r(1),i=r(5),o=r(0);function s(t){return"missing required '"+t.name+"'"}},function(t,e,r){"use strict";t.exports=function(t){var e=i.codegen(["m"],t.name+"$verify")('if(typeof m!=="object"||m===null)')("return%j","object expected"),r=t.oneofsArray,n={};r.length&&e("var p={}");for(var a=0;a<t.fieldsArray.length;++a){var f=t._fieldsArray[a].resolve(),l="m"+i.safeProp(f.name);if(f.optional&&e("if(%s!=null&&m.hasOwnProperty(%j)){",l,f.name),f.map)e("if(!util.isObject(%s))",l)("return%j",o(f,"object"))("var k=Object.keys(%s)",l)("for(var i=0;i<k.length;++i){"),u(e,f,"k[i]"),s(e,f,a,l+"[k[i]]")("}");else if(f.repeated)e("if(!Array.isArray(%s))",l)("return%j",o(f,"array"))("for(var i=0;i<%s.length;++i){",l),s(e,f,a,l+"[i]")("}");else{if(f.partOf){var h=i.safeProp(f.partOf.name);1===n[f.partOf.name]&&e("if(p%s===1)",h)("return%j",f.partOf.name+": multiple values"),n[f.partOf.name]=1,e("p%s=1",h)}s(e,f,a,l)}f.optional&&e("}")}return e("return null")};var n=r(1),i=r(0);function o(t,e){return t.name+": "+e+(t.repeated&&"array"!==e?"[]":t.map&&"object"!==e?"{k:"+t.keyType+"}":"")+" expected"}function s(t,e,r,i){if(e.resolvedType)if(e.resolvedType instanceof n){t("switch(%s){",i)("default:")("return%j",o(e,"enum value"));for(var s=Object.keys(e.resolvedType.values),u=0;u<s.length;++u)t("case %i:",e.resolvedType.values[s[u]]);t("break")("}")}else t("{")("var e=types[%i].verify(%s);",r,i)("if(e)")("return%j+e",e.name+".")("}");else switch(e.type){case"int32":case"uint32":case"sint32":case"fixed32":case"sfixed32":t("if(!util.isInteger(%s))",i)("return%j",o(e,"integer"));break;case"int64":case"uint64":case"sint64":case"fixed64":case"sfixed64":t("if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))",i,i,i,i)("return%j",o(e,"integer|Long"));break;case"float":case"double":t('if(typeof %s!=="number")',i)("return%j",o(e,"number"));break;case"bool":t('if(typeof %s!=="boolean")',i)("return%j",o(e,"boolean"));break;case"string":t("if(!util.isString(%s))",i)("return%j",o(e,"string"));break;case"bytes":t('if(!(%s&&typeof %s.length==="number"||util.isString(%s)))',i,i,i)("return%j",o(e,"buffer"))}return t}function u(t,e,r){switch(e.keyType){case"int32":case"uint32":case"sint32":case"fixed32":case"sfixed32":t("if(!util.key32Re.test(%s))",r)("return%j",o(e,"integer key"));break;case"int64":case"uint64":case"sint64":case"fixed64":case"sfixed64":t("if(!util.key64Re.test(%s))",r)("return%j",o(e,"integer|Long key"));break;case"bool":t("if(!util.key2Re.test(%s))",r)("return%j",o(e,"boolean key"))}return t}},function(t,e,r){"use strict";var n=e,i=r(1),o=r(0);function s(t,e,r,n){if(e.resolvedType)if(e.resolvedType instanceof i){t("switch(d%s){",n);for(var o=e.resolvedType.values,s=Object.keys(o),u=0;u<s.length;++u)e.repeated&&o[s[u]]===e.typeDefault&&t("default:"),t("case%j:",s[u])("case %i:",o[s[u]])("m%s=%j",n,o[s[u]])("break");t("}")}else t('if(typeof d%s!=="object")',n)("throw TypeError(%j)",e.fullName+": object expected")("m%s=types[%i].fromObject(d%s)",n,r,n);else{var a=!1;switch(e.type){case"double":case"float":t("m%s=Number(d%s)",n,n);break;case"uint32":case"fixed32":t("m%s=d%s>>>0",n,n);break;case"int32":case"sint32":case"sfixed32":t("m%s=d%s|0",n,n);break;case"uint64":a=!0;case"int64":case"sint64":case"fixed64":case"sfixed64":t("if(util.Long)")("(m%s=util.Long.fromValue(d%s)).unsigned=%j",n,n,a)('else if(typeof d%s==="string")',n)("m%s=parseInt(d%s,10)",n,n)('else if(typeof d%s==="number")',n)("m%s=d%s",n,n)('else if(typeof d%s==="object")',n)("m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)",n,n,n,a?"true":"");break;case"bytes":t('if(typeof d%s==="string")',n)("util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)",n,n,n)("else if(d%s.length)",n)("m%s=d%s",n,n);break;case"string":t("m%s=String(d%s)",n,n);break;case"bool":t("m%s=Boolean(d%s)",n,n)}}return t}function u(t,e,r,n){if(e.resolvedType)e.resolvedType instanceof i?t("d%s=o.enums===String?types[%i].values[m%s]:m%s",n,r,n,n):t("d%s=types[%i].toObject(m%s,o)",n,r,n);else{var o=!1;switch(e.type){case"double":case"float":t("d%s=o.json&&!isFinite(m%s)?String(m%s):m%s",n,n,n,n);break;case"uint64":o=!0;case"int64":case"sint64":case"fixed64":case"sfixed64":t('if(typeof m%s==="number")',n)("d%s=o.longs===String?String(m%s):m%s",n,n,n)("else")("d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s",n,n,n,n,o?"true":"",n);break;case"bytes":t("d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s",n,n,n,n,n);break;default:t("d%s=m%s",n,n)}}return t}n.fromObject=function(t){var e=t.fieldsArray,r=o.codegen(["d"],t.name+"$fromObject")("if(d instanceof this.ctor)")("return d");if(!e.length)return r("return new this.ctor");r("var m=new this.ctor");for(var n=0;n<e.length;++n){var u=e[n].resolve(),a=o.safeProp(u.name);u.map?(r("if(d%s){",a)('if(typeof d%s!=="object")',a)("throw TypeError(%j)",u.fullName+": object expected")("m%s={}",a)("for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){",a),s(r,u,n,a+"[ks[i]]")("}")("}")):u.repeated?(r("if(d%s){",a)("if(!Array.isArray(d%s))",a)("throw TypeError(%j)",u.fullName+": array expected")("m%s=[]",a)("for(var i=0;i<d%s.length;++i){",a),s(r,u,n,a+"[i]")("}")("}")):(u.resolvedType instanceof i||r("if(d%s!=null){",a),s(r,u,n,a),u.resolvedType instanceof i||r("}"))}return r("return m")},n.toObject=function(t){var e=t.fieldsArray.slice().sort(o.compareFieldsById);if(!e.length)return o.codegen()("return {}");for(var r=o.codegen(["m","o"],t.name+"$toObject")("if(!o)")("o={}")("var d={}"),n=[],s=[],a=[],f=0;f<e.length;++f)e[f].partOf||(e[f].resolve().repeated?n:e[f].map?s:a).push(e[f]);if(n.length){for(r("if(o.arrays||o.defaults){"),f=0;f<n.length;++f)r("d%s=[]",o.safeProp(n[f].name));r("}")}if(s.length){for(r("if(o.objects||o.defaults){"),f=0;f<s.length;++f)r("d%s={}",o.safeProp(s[f].name));r("}")}if(a.length){for(r("if(o.defaults){"),f=0;f<a.length;++f){var l=a[f],h=o.safeProp(l.name);if(l.resolvedType instanceof i)r("d%s=o.enums===String?%j:%j",h,l.resolvedType.valuesById[l.typeDefault],l.typeDefault);else if(l.long)r("if(util.Long){")("var n=new util.Long(%i,%i,%j)",l.typeDefault.low,l.typeDefault.high,l.typeDefault.unsigned)("d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n",h)("}else")("d%s=o.longs===String?%j:%i",h,l.typeDefault.toString(),l.typeDefault.toNumber());else if(l.bytes){var c="["+Array.prototype.slice.call(l.typeDefault).join(",")+"]";r("if(o.bytes===String)d%s=%j",h,String.fromCharCode.apply(String,l.typeDefault))("else{")("d%s=%s",h,c)("if(o.bytes!==Array)d%s=util.newBuffer(d%s)",h,h)("}")}else r("d%s=%j",h,l.typeDefault)}r("}")}var p=!1;for(f=0;f<e.length;++f){l=e[f];var d=t._fieldsArray.indexOf(l);h=o.safeProp(l.name);l.map?(p||(p=!0,r("var ks2")),r("if(m%s&&(ks2=Object.keys(m%s)).length){",h,h)("d%s={}",h)("for(var j=0;j<ks2.length;++j){"),u(r,l,d,h+"[ks2[j]]")("}")):l.repeated?(r("if(m%s&&m%s.length){",h,h)("d%s=[]",h)("for(var j=0;j<m%s.length;++j){",h),u(r,l,d,h+"[j]")("}")):(r("if(m%s!=null&&m.hasOwnProperty(%j)){",h,l.name),u(r,l,d,h),l.partOf&&r("if(o.oneofs)")("d%s=%j",o.safeProp(l.partOf.name),l.name)),r("}")}return r("return d")}},function(t,e,r){"use strict";var n=e,i=r(14);n[".google.protobuf.Any"]={fromObject:function(t){if(t&&t["@type"]){var e=this.lookup(t["@type"]);if(e){var r="."===t["@type"].charAt(0)?t["@type"].substr(1):t["@type"];return this.create({type_url:"/"+r,value:e.encode(e.fromObject(t)).finish()})}}return this.fromObject(t)},toObject:function(t,e){if(e&&e.json&&t.type_url&&t.value){var r=t.type_url.substring(t.type_url.lastIndexOf("/")+1),n=this.lookup(r);n&&(t=n.decode(t.value))}if(!(t instanceof this.ctor)&&t instanceof i){var o=t.$type.toObject(t,e);return o["@type"]=t.$type.fullName,o}return this.toObject(t,e)}}},function(t,e,r){"use strict";t.exports=p;var n=/[\s{}=;:[\],'"()<>]/g,i=/(?:"([^"\\]*(?:\\.[^"\\]*)*)")/g,o=/(?:'([^'\\]*(?:\\.[^'\\]*)*)')/g,s=/^ *[*\/]+ */,u=/^\s*\*?\/*/,a=/\n/g,f=/\s/,l=/\\(.?)/g,h={0:"\0",r:"\r",n:"\n",t:"\t"};function c(t){return t.replace(l,function(t,e){switch(e){case"\\":case"":return e;default:return h[e]||""}})}function p(t,e){t=t.toString();var r=0,l=t.length,h=1,p=null,d=null,y=0,v=!1,m=[],g=null;function b(t){return Error("illegal "+t+" (line "+h+")")}function w(e){return t.charAt(e)}function A(r,n){p=t.charAt(r++),y=h,v=!1;var i,o=r-(e?2:3);do{if(--o<0||"\n"===(i=t.charAt(o))){v=!0;break}}while(" "===i||"\t"===i);for(var f=t.substring(r,n).split(a),l=0;l<f.length;++l)f[l]=f[l].replace(e?u:s,"").trim();d=f.join("\n").trim()}function O(e){var r=_(e),n=t.substring(e,r);return/^\s*\/{1,2}/.test(n)}function _(t){for(var e=t;e<l&&"\n"!==w(e);)e++;return e}function k(){if(m.length>0)return m.shift();if(g)return function(){var e="'"===g?o:i;e.lastIndex=r-1;var n=e.exec(t);if(!n)throw b("string");return r=e.lastIndex,E(g),g=null,c(n[1])}();var s,u,a,p,d;do{if(r===l)return null;for(s=!1;f.test(a=w(r));)if("\n"===a&&++h,++r===l)return null;if("/"===w(r)){if(++r===l)throw b("comment");if("/"===w(r))if(e){if(p=r,d=!1,O(r)){d=!0;do{if((r=_(r))===l)break;r++}while(O(r))}else r=Math.min(l,_(r)+1);d&&A(p,r),h++,s=!0}else{for(d="/"===w(p=r+1);"\n"!==w(++r);)if(r===l)return null;++r,d&&A(p,r-1),++h,s=!0}else{if("*"!==(a=w(r)))return"/";p=r+1,d=e||"*"===w(p);do{if("\n"===a&&++h,++r===l)throw b("comment");u=a,a=w(r)}while("*"!==u||"/"!==a);++r,d&&A(p,r-2),s=!0}}}while(s);var y=r;if(n.lastIndex=0,!n.test(w(y++)))for(;y<l&&!n.test(w(y));)++y;var v=t.substring(r,r=y);return'"'!==v&&"'"!==v||(g=v),v}function E(t){m.push(t)}function j(){if(!m.length){var t=k();if(null===t)return null;E(t)}return m[0]}return Object.defineProperty({next:k,peek:j,push:E,skip:function(t,e){var r=j();if(r===t)return k(),!0;if(!e)throw b("token '"+r+"', '"+t+"' expected");return!1},cmnt:function(t){var r=null;return void 0===t?y===h-1&&(e||"*"===p||v)&&(r=d):(y<t&&j(),y!==t||v||!e&&"/"!==p||(r=d)),r}},"line",{get:function(){return h}})}p.unescape=c},function(t,e,r){r(28)},function(t,e,r){"use strict";(function(t){var n=this&&this.__awaiter||function(t,e,r,n){return new(r||(r=Promise))(function(i,o){function s(t){try{a(n.next(t))}catch(t){o(t)}}function u(t){try{a(n.throw(t))}catch(t){o(t)}}function a(t){t.done?i(t.value):new r(function(e){e(t.value)}).then(s,u)}a((n=n.apply(t,e||[])).next())})},i=this&&this.__generator||function(t,e){var r,n,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,n=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=(i=s.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},o=this;Object.defineProperty(e,"__esModule",{value:!0});var s=r(33),u=r(34),a=self,f=u.Root.fromJSON(s.protoJson).lookupType("ContentResponse");function l(t){a.postMessage(t)}addEventListener("message",function(e){return n(o,void 0,void 0,function(){function r(e){return n(this,void 0,void 0,function(){var e,n,o,u;return i(this,function(i){if(s.removeEventListener("loadend",r,!1),null==s.result)return a.postMessage({status:1}),[2];if(s.result instanceof ArrayBuffer)e=s.result;else{if("string"==typeof s.result)return l({status:1,error:"Unknown data type received."}),[2];n=t.from(s.result),e=n.buffer.slice(n.byteOffset,n.byteOffset+n.byteLength)}var h;return h=e,200!==(o=f.decode(new Uint8Array(h))).status||null==o.data?(l({status:1,error:o.error||"Incorrect data received."}),[2]):(l({status:0,data:{contentId:(u=o.data).contentId,index:u.index,offset:u.offset,buffer:u.buffer}}),[2])})})}var o,s;return i(this,function(t){return o=e.data.blob,(s=new FileReader).addEventListener("loadend",r,!1),s.readAsArrayBuffer(o),[2]})})})}).call(this,r(29).Buffer)},function(t,e,r){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var n=r(30),i=r(31),o=r(32);function s(){return a.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function u(t,e){if(s()<e)throw new RangeError("Invalid typed array length");return a.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=a.prototype:(null===t&&(t=new a(e)),t.length=e),t}function a(t,e,r){if(!(a.TYPED_ARRAY_SUPPORT||this instanceof a))return new a(t,e,r);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return h(this,t)}return f(this,t,e,r)}function f(t,e,r,n){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,r,n){if(e.byteLength,r<0||e.byteLength<r)throw new RangeError("'offset' is out of bounds");if(e.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");e=void 0===r&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,r):new Uint8Array(e,r,n);a.TYPED_ARRAY_SUPPORT?(t=e).__proto__=a.prototype:t=c(t,e);return t}(t,e,r,n):"string"==typeof e?function(t,e,r){"string"==typeof r&&""!==r||(r="utf8");if(!a.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|d(e,r),i=(t=u(t,n)).write(e,r);i!==n&&(t=t.slice(0,i));return t}(t,e,r):function(t,e){if(a.isBuffer(e)){var r=0|p(e.length);return 0===(t=u(t,r)).length?t:(e.copy(t,0,0,r),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(n=e.length)!=n?u(t,0):c(t,e);if("Buffer"===e.type&&o(e.data))return c(t,e.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function l(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function h(t,e){if(l(e),t=u(t,e<0?0:0|p(e)),!a.TYPED_ARRAY_SUPPORT)for(var r=0;r<e;++r)t[r]=0;return t}function c(t,e){var r=e.length<0?0:0|p(e.length);t=u(t,r);for(var n=0;n<r;n+=1)t[n]=255&e[n];return t}function p(t){if(t>=s())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s().toString(16)+" bytes");return 0|t}function d(t,e){if(a.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var r=t.length;if(0===r)return 0;for(var n=!1;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return F(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return J(t).length;default:if(n)return F(t).length;e=(""+e).toLowerCase(),n=!0}}function y(t,e,r){var n=t[e];t[e]=t[r],t[r]=n}function v(t,e,r,n,i){if(0===t.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=i?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(i)return-1;r=t.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof e&&(e=a.from(e,n)),a.isBuffer(e))return 0===e.length?-1:m(t,e,r,n,i);if("number"==typeof e)return e&=255,a.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):m(t,[e],r,n,i);throw new TypeError("val must be string, number or Buffer")}function m(t,e,r,n,i){var o,s=1,u=t.length,a=e.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||e.length<2)return-1;s=2,u/=2,a/=2,r/=2}function f(t,e){return 1===s?t[e]:t.readUInt16BE(e*s)}if(i){var l=-1;for(o=r;o<u;o++)if(f(t,o)===f(e,-1===l?0:o-l)){if(-1===l&&(l=o),o-l+1===a)return l*s}else-1!==l&&(o-=o-l),l=-1}else for(r+a>u&&(r=u-a),o=r;o>=0;o--){for(var h=!0,c=0;c<a;c++)if(f(t,o+c)!==f(e,c)){h=!1;break}if(h)return o}return-1}function g(t,e,r,n){r=Number(r)||0;var i=t.length-r;n?(n=Number(n))>i&&(n=i):n=i;var o=e.length;if(o%2!=0)throw new TypeError("Invalid hex string");n>o/2&&(n=o/2);for(var s=0;s<n;++s){var u=parseInt(e.substr(2*s,2),16);if(isNaN(u))return s;t[r+s]=u}return s}function b(t,e,r,n){return $(F(e,t.length-r),t,r,n)}function w(t,e,r,n){return $(function(t){for(var e=[],r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,n)}function A(t,e,r,n){return w(t,e,r,n)}function O(t,e,r,n){return $(J(e),t,r,n)}function _(t,e,r,n){return $(function(t,e){for(var r,n,i,o=[],s=0;s<t.length&&!((e-=2)<0);++s)r=t.charCodeAt(s),n=r>>8,i=r%256,o.push(i),o.push(n);return o}(e,t.length-r),t,r,n)}function k(t,e,r){return 0===e&&r===t.length?n.fromByteArray(t):n.fromByteArray(t.slice(e,r))}function E(t,e,r){r=Math.min(t.length,r);for(var n=[],i=e;i<r;){var o,s,u,a,f=t[i],l=null,h=f>239?4:f>223?3:f>191?2:1;if(i+h<=r)switch(h){case 1:f<128&&(l=f);break;case 2:128==(192&(o=t[i+1]))&&(a=(31&f)<<6|63&o)>127&&(l=a);break;case 3:o=t[i+1],s=t[i+2],128==(192&o)&&128==(192&s)&&(a=(15&f)<<12|(63&o)<<6|63&s)>2047&&(a<55296||a>57343)&&(l=a);break;case 4:o=t[i+1],s=t[i+2],u=t[i+3],128==(192&o)&&128==(192&s)&&128==(192&u)&&(a=(15&f)<<18|(63&o)<<12|(63&s)<<6|63&u)>65535&&a<1114112&&(l=a)}null===l?(l=65533,h=1):l>65535&&(l-=65536,n.push(l>>>10&1023|55296),l=56320|1023&l),n.push(l),i+=h}return function(t){var e=t.length;if(e<=j)return String.fromCharCode.apply(String,t);var r="",n=0;for(;n<e;)r+=String.fromCharCode.apply(String,t.slice(n,n+=j));return r}(n)}e.Buffer=a,e.SlowBuffer=function(t){+t!=t&&(t=0);return a.alloc(+t)},e.INSPECT_MAX_BYTES=50,a.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=s(),a.poolSize=8192,a._augment=function(t){return t.__proto__=a.prototype,t},a.from=function(t,e,r){return f(null,t,e,r)},a.TYPED_ARRAY_SUPPORT&&(a.prototype.__proto__=Uint8Array.prototype,a.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&a[Symbol.species]===a&&Object.defineProperty(a,Symbol.species,{value:null,configurable:!0})),a.alloc=function(t,e,r){return function(t,e,r,n){return l(e),e<=0?u(t,e):void 0!==r?"string"==typeof n?u(t,e).fill(r,n):u(t,e).fill(r):u(t,e)}(null,t,e,r)},a.allocUnsafe=function(t){return h(null,t)},a.allocUnsafeSlow=function(t){return h(null,t)},a.isBuffer=function(t){return!(null==t||!t._isBuffer)},a.compare=function(t,e){if(!a.isBuffer(t)||!a.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var r=t.length,n=e.length,i=0,o=Math.min(r,n);i<o;++i)if(t[i]!==e[i]){r=t[i],n=e[i];break}return r<n?-1:n<r?1:0},a.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},a.concat=function(t,e){if(!o(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return a.alloc(0);var r;if(void 0===e)for(e=0,r=0;r<t.length;++r)e+=t[r].length;var n=a.allocUnsafe(e),i=0;for(r=0;r<t.length;++r){var s=t[r];if(!a.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(n,i),i+=s.length}return n},a.byteLength=d,a.prototype._isBuffer=!0,a.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)y(this,e,e+1);return this},a.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)y(this,e,e+3),y(this,e+1,e+2);return this},a.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)y(this,e,e+7),y(this,e+1,e+6),y(this,e+2,e+5),y(this,e+3,e+4);return this},a.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?E(this,0,t):function(t,e,r){var n=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return x(this,e,r);case"utf8":case"utf-8":return E(this,e,r);case"ascii":return S(this,e,r);case"latin1":case"binary":return T(this,e,r);case"base64":return k(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return R(this,e,r);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0}}.apply(this,arguments)},a.prototype.equals=function(t){if(!a.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===a.compare(this,t)},a.prototype.inspect=function(){var t="",r=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(t+=" ... ")),"<Buffer "+t+">"},a.prototype.compare=function(t,e,r,n,i){if(!a.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===r&&(r=t?t.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),e<0||r>t.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&e>=r)return 0;if(n>=i)return-1;if(e>=r)return 1;if(this===t)return 0;for(var o=(i>>>=0)-(n>>>=0),s=(r>>>=0)-(e>>>=0),u=Math.min(o,s),f=this.slice(n,i),l=t.slice(e,r),h=0;h<u;++h)if(f[h]!==l[h]){o=f[h],s=l[h];break}return o<s?-1:s<o?1:0},a.prototype.includes=function(t,e,r){return-1!==this.indexOf(t,e,r)},a.prototype.indexOf=function(t,e,r){return v(this,t,e,r,!0)},a.prototype.lastIndexOf=function(t,e,r){return v(this,t,e,r,!1)},a.prototype.write=function(t,e,r,n){if(void 0===e)n="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)n=e,r=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var i=this.length-e;if((void 0===r||r>i)&&(r=i),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var o=!1;;)switch(n){case"hex":return g(this,t,e,r);case"utf8":case"utf-8":return b(this,t,e,r);case"ascii":return w(this,t,e,r);case"latin1":case"binary":return A(this,t,e,r);case"base64":return O(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return _(this,t,e,r);default:if(o)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),o=!0}},a.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var j=4096;function S(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(127&t[i]);return n}function T(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(t[i]);return n}function x(t,e,r){var n=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>n)&&(r=n);for(var i="",o=e;o<r;++o)i+=M(t[o]);return i}function R(t,e,r){for(var n=t.slice(e,r),i="",o=0;o<n.length;o+=2)i+=String.fromCharCode(n[o]+256*n[o+1]);return i}function B(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function N(t,e,r,n,i,o){if(!a.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<o)throw new RangeError('"value" argument is out of bounds');if(r+n>t.length)throw new RangeError("Index out of range")}function P(t,e,r,n){e<0&&(e=65535+e+1);for(var i=0,o=Math.min(t.length-r,2);i<o;++i)t[r+i]=(e&255<<8*(n?i:1-i))>>>8*(n?i:1-i)}function I(t,e,r,n){e<0&&(e=4294967295+e+1);for(var i=0,o=Math.min(t.length-r,4);i<o;++i)t[r+i]=e>>>8*(n?i:3-i)&255}function L(t,e,r,n,i,o){if(r+n>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function D(t,e,r,n,o){return o||L(t,0,r,4),i.write(t,e,r,n,23,4),r+4}function U(t,e,r,n,o){return o||L(t,0,r,8),i.write(t,e,r,n,52,8),r+8}a.prototype.slice=function(t,e){var r,n=this.length;if((t=~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),(e=void 0===e?n:~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),e<t&&(e=t),a.TYPED_ARRAY_SUPPORT)(r=this.subarray(t,e)).__proto__=a.prototype;else{var i=e-t;r=new a(i,void 0);for(var o=0;o<i;++o)r[o]=this[o+t]}return r},a.prototype.readUIntLE=function(t,e,r){t|=0,e|=0,r||B(t,e,this.length);for(var n=this[t],i=1,o=0;++o<e&&(i*=256);)n+=this[t+o]*i;return n},a.prototype.readUIntBE=function(t,e,r){t|=0,e|=0,r||B(t,e,this.length);for(var n=this[t+--e],i=1;e>0&&(i*=256);)n+=this[t+--e]*i;return n},a.prototype.readUInt8=function(t,e){return e||B(t,1,this.length),this[t]},a.prototype.readUInt16LE=function(t,e){return e||B(t,2,this.length),this[t]|this[t+1]<<8},a.prototype.readUInt16BE=function(t,e){return e||B(t,2,this.length),this[t]<<8|this[t+1]},a.prototype.readUInt32LE=function(t,e){return e||B(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},a.prototype.readUInt32BE=function(t,e){return e||B(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},a.prototype.readIntLE=function(t,e,r){t|=0,e|=0,r||B(t,e,this.length);for(var n=this[t],i=1,o=0;++o<e&&(i*=256);)n+=this[t+o]*i;return n>=(i*=128)&&(n-=Math.pow(2,8*e)),n},a.prototype.readIntBE=function(t,e,r){t|=0,e|=0,r||B(t,e,this.length);for(var n=e,i=1,o=this[t+--n];n>0&&(i*=256);)o+=this[t+--n]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*e)),o},a.prototype.readInt8=function(t,e){return e||B(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},a.prototype.readInt16LE=function(t,e){e||B(t,2,this.length);var r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},a.prototype.readInt16BE=function(t,e){e||B(t,2,this.length);var r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},a.prototype.readInt32LE=function(t,e){return e||B(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},a.prototype.readInt32BE=function(t,e){return e||B(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},a.prototype.readFloatLE=function(t,e){return e||B(t,4,this.length),i.read(this,t,!0,23,4)},a.prototype.readFloatBE=function(t,e){return e||B(t,4,this.length),i.read(this,t,!1,23,4)},a.prototype.readDoubleLE=function(t,e){return e||B(t,8,this.length),i.read(this,t,!0,52,8)},a.prototype.readDoubleBE=function(t,e){return e||B(t,8,this.length),i.read(this,t,!1,52,8)},a.prototype.writeUIntLE=function(t,e,r,n){(t=+t,e|=0,r|=0,n)||N(this,t,e,r,Math.pow(2,8*r)-1,0);var i=1,o=0;for(this[e]=255&t;++o<r&&(i*=256);)this[e+o]=t/i&255;return e+r},a.prototype.writeUIntBE=function(t,e,r,n){(t=+t,e|=0,r|=0,n)||N(this,t,e,r,Math.pow(2,8*r)-1,0);var i=r-1,o=1;for(this[e+i]=255&t;--i>=0&&(o*=256);)this[e+i]=t/o&255;return e+r},a.prototype.writeUInt8=function(t,e,r){return t=+t,e|=0,r||N(this,t,e,1,255,0),a.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},a.prototype.writeUInt16LE=function(t,e,r){return t=+t,e|=0,r||N(this,t,e,2,65535,0),a.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):P(this,t,e,!0),e+2},a.prototype.writeUInt16BE=function(t,e,r){return t=+t,e|=0,r||N(this,t,e,2,65535,0),a.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):P(this,t,e,!1),e+2},a.prototype.writeUInt32LE=function(t,e,r){return t=+t,e|=0,r||N(this,t,e,4,4294967295,0),a.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):I(this,t,e,!0),e+4},a.prototype.writeUInt32BE=function(t,e,r){return t=+t,e|=0,r||N(this,t,e,4,4294967295,0),a.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):I(this,t,e,!1),e+4},a.prototype.writeIntLE=function(t,e,r,n){if(t=+t,e|=0,!n){var i=Math.pow(2,8*r-1);N(this,t,e,r,i-1,-i)}var o=0,s=1,u=0;for(this[e]=255&t;++o<r&&(s*=256);)t<0&&0===u&&0!==this[e+o-1]&&(u=1),this[e+o]=(t/s>>0)-u&255;return e+r},a.prototype.writeIntBE=function(t,e,r,n){if(t=+t,e|=0,!n){var i=Math.pow(2,8*r-1);N(this,t,e,r,i-1,-i)}var o=r-1,s=1,u=0;for(this[e+o]=255&t;--o>=0&&(s*=256);)t<0&&0===u&&0!==this[e+o+1]&&(u=1),this[e+o]=(t/s>>0)-u&255;return e+r},a.prototype.writeInt8=function(t,e,r){return t=+t,e|=0,r||N(this,t,e,1,127,-128),a.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},a.prototype.writeInt16LE=function(t,e,r){return t=+t,e|=0,r||N(this,t,e,2,32767,-32768),a.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):P(this,t,e,!0),e+2},a.prototype.writeInt16BE=function(t,e,r){return t=+t,e|=0,r||N(this,t,e,2,32767,-32768),a.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):P(this,t,e,!1),e+2},a.prototype.writeInt32LE=function(t,e,r){return t=+t,e|=0,r||N(this,t,e,4,2147483647,-2147483648),a.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):I(this,t,e,!0),e+4},a.prototype.writeInt32BE=function(t,e,r){return t=+t,e|=0,r||N(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),a.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):I(this,t,e,!1),e+4},a.prototype.writeFloatLE=function(t,e,r){return D(this,t,e,!0,r)},a.prototype.writeFloatBE=function(t,e,r){return D(this,t,e,!1,r)},a.prototype.writeDoubleLE=function(t,e,r){return U(this,t,e,!0,r)},a.prototype.writeDoubleBE=function(t,e,r){return U(this,t,e,!1,r)},a.prototype.copy=function(t,e,r,n){if(r||(r=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),t.length-e<n-r&&(n=t.length-e+r);var i,o=n-r;if(this===t&&r<e&&e<n)for(i=o-1;i>=0;--i)t[i+e]=this[i+r];else if(o<1e3||!a.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)t[i+e]=this[i+r];else Uint8Array.prototype.set.call(t,this.subarray(r,r+o),e);return o},a.prototype.fill=function(t,e,r,n){if("string"==typeof t){if("string"==typeof e?(n=e,e=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===t.length){var i=t.charCodeAt(0);i<256&&(t=i)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!a.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<r)throw new RangeError("Out of range index");if(r<=e)return this;var o;if(e>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0),"number"==typeof t)for(o=e;o<r;++o)this[o]=t;else{var s=a.isBuffer(t)?t:F(new a(t,n).toString()),u=s.length;for(o=0;o<r-e;++o)this[o+e]=s[o%u]}return this};var C=/[^+\/0-9A-Za-z-_]/g;function M(t){return t<16?"0"+t.toString(16):t.toString(16)}function F(t,e){var r;e=e||1/0;for(var n=t.length,i=null,o=[],s=0;s<n;++s){if((r=t.charCodeAt(s))>55295&&r<57344){if(!i){if(r>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(s+1===n){(e-=3)>-1&&o.push(239,191,189);continue}i=r;continue}if(r<56320){(e-=3)>-1&&o.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,r<128){if((e-=1)<0)break;o.push(r)}else if(r<2048){if((e-=2)<0)break;o.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return o}function J(t){return n.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(C,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function $(t,e,r,n){for(var i=0;i<n&&!(i+r>=e.length||i>=t.length);++i)e[i+r]=t[i];return i}}).call(this,r(16))},function(t,e,r){"use strict";e.byteLength=function(t){var e=f(t),r=e[0],n=e[1];return 3*(r+n)/4-n},e.toByteArray=function(t){for(var e,r=f(t),n=r[0],s=r[1],u=new o(function(t,e,r){return 3*(e+r)/4-r}(0,n,s)),a=0,l=s>0?n-4:n,h=0;h<l;h+=4)e=i[t.charCodeAt(h)]<<18|i[t.charCodeAt(h+1)]<<12|i[t.charCodeAt(h+2)]<<6|i[t.charCodeAt(h+3)],u[a++]=e>>16&255,u[a++]=e>>8&255,u[a++]=255&e;2===s&&(e=i[t.charCodeAt(h)]<<2|i[t.charCodeAt(h+1)]>>4,u[a++]=255&e);1===s&&(e=i[t.charCodeAt(h)]<<10|i[t.charCodeAt(h+1)]<<4|i[t.charCodeAt(h+2)]>>2,u[a++]=e>>8&255,u[a++]=255&e);return u},e.fromByteArray=function(t){for(var e,r=t.length,i=r%3,o=[],s=0,u=r-i;s<u;s+=16383)o.push(l(t,s,s+16383>u?u:s+16383));1===i?(e=t[r-1],o.push(n[e>>2]+n[e<<4&63]+"==")):2===i&&(e=(t[r-2]<<8)+t[r-1],o.push(n[e>>10]+n[e>>4&63]+n[e<<2&63]+"="));return o.join("")};for(var n=[],i=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",u=0,a=s.length;u<a;++u)n[u]=s[u],i[s.charCodeAt(u)]=u;function f(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=t.indexOf("=");return-1===r&&(r=e),[r,r===e?0:4-r%4]}function l(t,e,r){for(var i,o,s=[],u=e;u<r;u+=3)i=(t[u]<<16&16711680)+(t[u+1]<<8&65280)+(255&t[u+2]),s.push(n[(o=i)>>18&63]+n[o>>12&63]+n[o>>6&63]+n[63&o]);return s.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,r,n,i){var o,s,u=8*i-n-1,a=(1<<u)-1,f=a>>1,l=-7,h=r?i-1:0,c=r?-1:1,p=t[e+h];for(h+=c,o=p&(1<<-l)-1,p>>=-l,l+=u;l>0;o=256*o+t[e+h],h+=c,l-=8);for(s=o&(1<<-l)-1,o>>=-l,l+=n;l>0;s=256*s+t[e+h],h+=c,l-=8);if(0===o)o=1-f;else{if(o===a)return s?NaN:1/0*(p?-1:1);s+=Math.pow(2,n),o-=f}return(p?-1:1)*s*Math.pow(2,o-n)},e.write=function(t,e,r,n,i,o){var s,u,a,f=8*o-i-1,l=(1<<f)-1,h=l>>1,c=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,p=n?0:o-1,d=n?1:-1,y=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(u=isNaN(e)?1:0,s=l):(s=Math.floor(Math.log(e)/Math.LN2),e*(a=Math.pow(2,-s))<1&&(s--,a*=2),(e+=s+h>=1?c/a:c*Math.pow(2,1-h))*a>=2&&(s++,a/=2),s+h>=l?(u=0,s=l):s+h>=1?(u=(e*a-1)*Math.pow(2,i),s+=h):(u=e*Math.pow(2,h-1)*Math.pow(2,i),s=0));i>=8;t[r+p]=255&u,p+=d,u/=256,i-=8);for(s=s<<i|u,f+=i;f>0;t[r+p]=255&s,p+=d,s/=256,f-=8);t[r+p-d]|=128*y}},function(t,e){var r={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==r.call(t)}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.protoJson={nested:{ContentResponseData:{fields:{contentId:{type:"string",id:1},offset:{type:"int32",id:2},index:{type:"int32",id:3},buffer:{type:"bytes",id:4}}},ContentResponse:{fields:{status:{type:"int32",id:1},error:{type:"string",id:2},data:{type:"ContentResponseData",id:3}}}}}},function(t,e,r){"use strict";t.exports=r(35)},function(t,e,r){"use strict";var n=t.exports=r(36);n.build="full",n.tokenize=r(26),n.parse=r(50),n.common=r(51),n.Root._configure(n.Type,n.parse,n.common)},function(t,e,r){"use strict";var n=t.exports=r(37);n.build="light",n.load=function(t,e,r){return"function"==typeof e?(r=e,e=new n.Root):e||(e=new n.Root),e.load(t,r)},n.loadSync=function(t,e){return e||(e=new n.Root),e.loadSync(t)},n.encoder=r(21),n.decoder=r(22),n.verifier=r(23),n.converter=r(24),n.ReflectionObject=r(4),n.Namespace=r(6),n.Root=r(15),n.Enum=r(1),n.Type=r(10),n.Field=r(3),n.OneOf=r(7),n.MapField=r(11),n.Service=r(12),n.Method=r(13),n.Message=r(14),n.wrappers=r(25),n.types=r(5),n.util=r(0),n.ReflectionObject._configure(n.Root),n.Namespace._configure(n.Type,n.Service,n.Enum),n.Root._configure(n.Type),n.Field._configure(n.Type)},function(t,e,r){"use strict";var n=e;function i(){n.Reader._configure(n.BufferReader),n.util._configure()}n.build="minimal",n.Writer=r(8),n.BufferWriter=r(44),n.Reader=r(9),n.BufferReader=r(45),n.util=r(2),n.rpc=r(19),n.roots=r(20),n.configure=i,n.Writer._configure(n.BufferWriter),i()},function(t,e,r){"use strict";var n=e;n.length=function(t){var e=t.length;if(!e)return 0;for(var r=0;--e%4>1&&"="===t.charAt(e);)++r;return Math.ceil(3*t.length)/4-r};for(var i=new Array(64),o=new Array(123),s=0;s<64;)o[i[s]=s<26?s+65:s<52?s+71:s<62?s-4:s-59|43]=s++;n.encode=function(t,e,r){for(var n,o=null,s=[],u=0,a=0;e<r;){var f=t[e++];switch(a){case 0:s[u++]=i[f>>2],n=(3&f)<<4,a=1;break;case 1:s[u++]=i[n|f>>4],n=(15&f)<<2,a=2;break;case 2:s[u++]=i[n|f>>6],s[u++]=i[63&f],a=0}u>8191&&((o||(o=[])).push(String.fromCharCode.apply(String,s)),u=0)}return a&&(s[u++]=i[n],s[u++]=61,1===a&&(s[u++]=61)),o?(u&&o.push(String.fromCharCode.apply(String,s.slice(0,u))),o.join("")):String.fromCharCode.apply(String,s.slice(0,u))};n.decode=function(t,e,r){for(var n,i=r,s=0,u=0;u<t.length;){var a=t.charCodeAt(u++);if(61===a&&s>1)break;if(void 0===(a=o[a]))throw Error("invalid encoding");switch(s){case 0:n=a,s=1;break;case 1:e[r++]=n<<2|(48&a)>>4,n=a,s=2;break;case 2:e[r++]=(15&n)<<4|(60&a)>>2,n=a,s=3;break;case 3:e[r++]=(3&n)<<6|a,s=0}}if(1===s)throw Error("invalid encoding");return r-i},n.test=function(t){return/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.test(t)}},function(t,e,r){"use strict";function n(){this._listeners={}}t.exports=n,n.prototype.on=function(t,e,r){return(this._listeners[t]||(this._listeners[t]=[])).push({fn:e,ctx:r||this}),this},n.prototype.off=function(t,e){if(void 0===t)this._listeners={};else if(void 0===e)this._listeners[t]=[];else for(var r=this._listeners[t],n=0;n<r.length;)r[n].fn===e?r.splice(n,1):++n;return this},n.prototype.emit=function(t){var e=this._listeners[t];if(e){for(var r=[],n=1;n<arguments.length;)r.push(arguments[n++]);for(n=0;n<e.length;)e[n].fn.apply(e[n++].ctx,r)}return this}},function(t,e,r){"use strict";function n(t){return"undefined"!=typeof Float32Array?function(){var e=new Float32Array([-0]),r=new Uint8Array(e.buffer),n=128===r[3];function i(t,n,i){e[0]=t,n[i]=r[0],n[i+1]=r[1],n[i+2]=r[2],n[i+3]=r[3]}function o(t,n,i){e[0]=t,n[i]=r[3],n[i+1]=r[2],n[i+2]=r[1],n[i+3]=r[0]}function s(t,n){return r[0]=t[n],r[1]=t[n+1],r[2]=t[n+2],r[3]=t[n+3],e[0]}function u(t,n){return r[3]=t[n],r[2]=t[n+1],r[1]=t[n+2],r[0]=t[n+3],e[0]}t.writeFloatLE=n?i:o,t.writeFloatBE=n?o:i,t.readFloatLE=n?s:u,t.readFloatBE=n?u:s}():function(){function e(t,e,r,n){var i=e<0?1:0;if(i&&(e=-e),0===e)t(1/e>0?0:2147483648,r,n);else if(isNaN(e))t(2143289344,r,n);else if(e>3.4028234663852886e38)t((i<<31|2139095040)>>>0,r,n);else if(e<1.1754943508222875e-38)t((i<<31|Math.round(e/1.401298464324817e-45))>>>0,r,n);else{var o=Math.floor(Math.log(e)/Math.LN2);t((i<<31|o+127<<23|8388607&Math.round(e*Math.pow(2,-o)*8388608))>>>0,r,n)}}function r(t,e,r){var n=t(e,r),i=2*(n>>31)+1,o=n>>>23&255,s=8388607&n;return 255===o?s?NaN:i*(1/0):0===o?1.401298464324817e-45*i*s:i*Math.pow(2,o-150)*(s+8388608)}t.writeFloatLE=e.bind(null,i),t.writeFloatBE=e.bind(null,o),t.readFloatLE=r.bind(null,s),t.readFloatBE=r.bind(null,u)}(),"undefined"!=typeof Float64Array?function(){var e=new Float64Array([-0]),r=new Uint8Array(e.buffer),n=128===r[7];function i(t,n,i){e[0]=t,n[i]=r[0],n[i+1]=r[1],n[i+2]=r[2],n[i+3]=r[3],n[i+4]=r[4],n[i+5]=r[5],n[i+6]=r[6],n[i+7]=r[7]}function o(t,n,i){e[0]=t,n[i]=r[7],n[i+1]=r[6],n[i+2]=r[5],n[i+3]=r[4],n[i+4]=r[3],n[i+5]=r[2],n[i+6]=r[1],n[i+7]=r[0]}function s(t,n){return r[0]=t[n],r[1]=t[n+1],r[2]=t[n+2],r[3]=t[n+3],r[4]=t[n+4],r[5]=t[n+5],r[6]=t[n+6],r[7]=t[n+7],e[0]}function u(t,n){return r[7]=t[n],r[6]=t[n+1],r[5]=t[n+2],r[4]=t[n+3],r[3]=t[n+4],r[2]=t[n+5],r[1]=t[n+6],r[0]=t[n+7],e[0]}t.writeDoubleLE=n?i:o,t.writeDoubleBE=n?o:i,t.readDoubleLE=n?s:u,t.readDoubleBE=n?u:s}():function(){function e(t,e,r,n,i,o){var s=n<0?1:0;if(s&&(n=-n),0===n)t(0,i,o+e),t(1/n>0?0:2147483648,i,o+r);else if(isNaN(n))t(0,i,o+e),t(2146959360,i,o+r);else if(n>1.7976931348623157e308)t(0,i,o+e),t((s<<31|2146435072)>>>0,i,o+r);else{var u;if(n<2.2250738585072014e-308)t((u=n/5e-324)>>>0,i,o+e),t((s<<31|u/4294967296)>>>0,i,o+r);else{var a=Math.floor(Math.log(n)/Math.LN2);1024===a&&(a=1023),t(4503599627370496*(u=n*Math.pow(2,-a))>>>0,i,o+e),t((s<<31|a+1023<<20|1048576*u&1048575)>>>0,i,o+r)}}}function r(t,e,r,n,i){var o=t(n,i+e),s=t(n,i+r),u=2*(s>>31)+1,a=s>>>20&2047,f=4294967296*(1048575&s)+o;return 2047===a?f?NaN:u*(1/0):0===a?5e-324*u*f:u*Math.pow(2,a-1075)*(f+4503599627370496)}t.writeDoubleLE=e.bind(null,i,0,4),t.writeDoubleBE=e.bind(null,o,4,0),t.readDoubleLE=r.bind(null,s,0,4),t.readDoubleBE=r.bind(null,u,4,0)}(),t}function i(t,e,r){e[r]=255&t,e[r+1]=t>>>8&255,e[r+2]=t>>>16&255,e[r+3]=t>>>24}function o(t,e,r){e[r]=t>>>24,e[r+1]=t>>>16&255,e[r+2]=t>>>8&255,e[r+3]=255&t}function s(t,e){return(t[e]|t[e+1]<<8|t[e+2]<<16|t[e+3]<<24)>>>0}function u(t,e){return(t[e]<<24|t[e+1]<<16|t[e+2]<<8|t[e+3])>>>0}t.exports=n(n)},function(t,e,r){"use strict";var n=e;n.length=function(t){for(var e=0,r=0,n=0;n<t.length;++n)(r=t.charCodeAt(n))<128?e+=1:r<2048?e+=2:55296==(64512&r)&&56320==(64512&t.charCodeAt(n+1))?(++n,e+=4):e+=3;return e},n.read=function(t,e,r){if(r-e<1)return"";for(var n,i=null,o=[],s=0;e<r;)(n=t[e++])<128?o[s++]=n:n>191&&n<224?o[s++]=(31&n)<<6|63&t[e++]:n>239&&n<365?(n=((7&n)<<18|(63&t[e++])<<12|(63&t[e++])<<6|63&t[e++])-65536,o[s++]=55296+(n>>10),o[s++]=56320+(1023&n)):o[s++]=(15&n)<<12|(63&t[e++])<<6|63&t[e++],s>8191&&((i||(i=[])).push(String.fromCharCode.apply(String,o)),s=0);return i?(s&&i.push(String.fromCharCode.apply(String,o.slice(0,s))),i.join("")):String.fromCharCode.apply(String,o.slice(0,s))},n.write=function(t,e,r){for(var n,i,o=r,s=0;s<t.length;++s)(n=t.charCodeAt(s))<128?e[r++]=n:n<2048?(e[r++]=n>>6|192,e[r++]=63&n|128):55296==(64512&n)&&56320==(64512&(i=t.charCodeAt(s+1)))?(n=65536+((1023&n)<<10)+(1023&i),++s,e[r++]=n>>18|240,e[r++]=n>>12&63|128,e[r++]=n>>6&63|128,e[r++]=63&n|128):(e[r++]=n>>12|224,e[r++]=n>>6&63|128,e[r++]=63&n|128);return r-o}},function(t,e,r){"use strict";t.exports=function(t,e,r){var n=r||8192,i=n>>>1,o=null,s=n;return function(r){if(r<1||r>i)return t(r);s+r>n&&(o=t(n),s=0);var u=e.call(o,s,s+=r);return 7&s&&(s=1+(7|s)),u}}},function(t,e,r){"use strict";t.exports=i;var n=r(2);function i(t,e){this.lo=t>>>0,this.hi=e>>>0}var o=i.zero=new i(0,0);o.toNumber=function(){return 0},o.zzEncode=o.zzDecode=function(){return this},o.length=function(){return 1};var s=i.zeroHash="\0\0\0\0\0\0\0\0";i.fromNumber=function(t){if(0===t)return o;var e=t<0;e&&(t=-t);var r=t>>>0,n=(t-r)/4294967296>>>0;return e&&(n=~n>>>0,r=~r>>>0,++r>4294967295&&(r=0,++n>4294967295&&(n=0))),new i(r,n)},i.from=function(t){if("number"==typeof t)return i.fromNumber(t);if(n.isString(t)){if(!n.Long)return i.fromNumber(parseInt(t,10));t=n.Long.fromString(t)}return t.low||t.high?new i(t.low>>>0,t.high>>>0):o},i.prototype.toNumber=function(t){if(!t&&this.hi>>>31){var e=1+~this.lo>>>0,r=~this.hi>>>0;return e||(r=r+1>>>0),-(e+4294967296*r)}return this.lo+4294967296*this.hi},i.prototype.toLong=function(t){return n.Long?new n.Long(0|this.lo,0|this.hi,Boolean(t)):{low:0|this.lo,high:0|this.hi,unsigned:Boolean(t)}};var u=String.prototype.charCodeAt;i.fromHash=function(t){return t===s?o:new i((u.call(t,0)|u.call(t,1)<<8|u.call(t,2)<<16|u.call(t,3)<<24)>>>0,(u.call(t,4)|u.call(t,5)<<8|u.call(t,6)<<16|u.call(t,7)<<24)>>>0)},i.prototype.toHash=function(){return String.fromCharCode(255&this.lo,this.lo>>>8&255,this.lo>>>16&255,this.lo>>>24,255&this.hi,this.hi>>>8&255,this.hi>>>16&255,this.hi>>>24)},i.prototype.zzEncode=function(){var t=this.hi>>31;return this.hi=((this.hi<<1|this.lo>>>31)^t)>>>0,this.lo=(this.lo<<1^t)>>>0,this},i.prototype.zzDecode=function(){var t=-(1&this.lo);return this.lo=((this.lo>>>1|this.hi<<31)^t)>>>0,this.hi=(this.hi>>>1^t)>>>0,this},i.prototype.length=function(){var t=this.lo,e=(this.lo>>>28|this.hi<<4)>>>0,r=this.hi>>>24;return 0===r?0===e?t<16384?t<128?1:2:t<2097152?3:4:e<16384?e<128?5:6:e<2097152?7:8:r<128?9:10}},function(t,e,r){"use strict";t.exports=s;var n=r(8);(s.prototype=Object.create(n.prototype)).constructor=s;var i=r(2),o=i.Buffer;function s(){n.call(this)}s.alloc=function(t){return(s.alloc=i._Buffer_allocUnsafe)(t)};var u=o&&o.prototype instanceof Uint8Array&&"set"===o.prototype.set.name?function(t,e,r){e.set(t,r)}:function(t,e,r){if(t.copy)t.copy(e,r,0,t.length);else for(var n=0;n<t.length;)e[r++]=t[n++]};function a(t,e,r){t.length<40?i.utf8.write(t,e,r):e.utf8Write(t,r)}s.prototype.bytes=function(t){i.isString(t)&&(t=i._Buffer_from(t,"base64"));var e=t.length>>>0;return this.uint32(e),e&&this._push(u,e,t),this},s.prototype.string=function(t){var e=o.byteLength(t);return this.uint32(e),e&&this._push(a,e,t),this}},function(t,e,r){"use strict";t.exports=o;var n=r(9);(o.prototype=Object.create(n.prototype)).constructor=o;var i=r(2);function o(t){n.call(this,t)}i.Buffer&&(o.prototype._slice=i.Buffer.prototype.slice),o.prototype.string=function(){var t=this.uint32();return this.buf.utf8Slice(this.pos,this.pos=Math.min(this.pos+t,this.len))}},function(t,e,r){"use strict";t.exports=i;var n=r(2);function i(t,e,r){if("function"!=typeof t)throw TypeError("rpcImpl must be a function");n.EventEmitter.call(this),this.rpcImpl=t,this.requestDelimited=Boolean(e),this.responseDelimited=Boolean(r)}(i.prototype=Object.create(n.EventEmitter.prototype)).constructor=i,i.prototype.rpcCall=function t(e,r,i,o,s){if(!o)throw TypeError("request must be specified");var u=this;if(!s)return n.asPromise(t,u,e,r,i,o);if(u.rpcImpl)try{return u.rpcImpl(e,r[u.requestDelimited?"encodeDelimited":"encode"](o).finish(),function(t,r){if(t)return u.emit("error",t,e),s(t);if(null!==r){if(!(r instanceof i))try{r=i[u.responseDelimited?"decodeDelimited":"decode"](r)}catch(t){return u.emit("error",t,e),s(t)}return u.emit("data",r,e),s(null,r)}u.end(!0)})}catch(t){return u.emit("error",t,e),void setTimeout(function(){s(t)},0)}else setTimeout(function(){s(Error("already ended"))},0)},i.prototype.end=function(t){return this.rpcImpl&&(t||this.rpcImpl(null,null,null),this.rpcImpl=null,this.emit("end").off()),this}},function(t,e,r){"use strict";function n(t,e){"string"==typeof t&&(e=t,t=void 0);var r=[];function i(t){if("string"!=typeof t){var e=o();if(n.verbose&&console.log("codegen: "+e),e="return "+e,t){for(var s=Object.keys(t),u=new Array(s.length+1),a=new Array(s.length),f=0;f<s.length;)u[f]=s[f],a[f]=t[s[f++]];return u[f]=e,Function.apply(null,u).apply(null,a)}return Function(e)()}for(var l=new Array(arguments.length-1),h=0;h<l.length;)l[h]=arguments[++h];if(h=0,t=t.replace(/%([%dfijs])/g,function(t,e){var r=l[h++];switch(e){case"d":case"f":return String(Number(r));case"i":return String(Math.floor(r));case"j":return JSON.stringify(r);case"s":return String(r)}return"%"}),h!==l.length)throw Error("parameter count mismatch");return r.push(t),i}function o(n){return"function "+(n||e||"")+"("+(t&&t.join(",")||"")+"){\n  "+r.join("\n  ")+"\n}"}return i.toString=o,i}t.exports=n,n.verbose=!1},function(t,e,r){"use strict";t.exports=o;var n=r(17),i=r(18)("fs");function o(t,e,r){return"function"==typeof e?(r=e,e={}):e||(e={}),r?!e.xhr&&i&&i.readFile?i.readFile(t,function(n,i){return n&&"undefined"!=typeof XMLHttpRequest?o.xhr(t,e,r):n?r(n):r(null,e.binary?i:i.toString("utf8"))}):o.xhr(t,e,r):n(o,this,t,e)}o.xhr=function(t,e,r){var n=new XMLHttpRequest;n.onreadystatechange=function(){if(4===n.readyState){if(0!==n.status&&200!==n.status)return r(Error("status "+n.status));if(e.binary){var t=n.response;if(!t){t=[];for(var i=0;i<n.responseText.length;++i)t.push(255&n.responseText.charCodeAt(i))}return r(null,"undefined"!=typeof Uint8Array?new Uint8Array(t):t)}return r(null,n.responseText)}},e.binary&&("overrideMimeType"in n&&n.overrideMimeType("text/plain; charset=x-user-defined"),n.responseType="arraybuffer"),n.open("GET",t),n.send()}},function(t,e,r){"use strict";var n=e,i=n.isAbsolute=function(t){return/^(?:\/|\w+:)/.test(t)},o=n.normalize=function(t){var e=(t=t.replace(/\\/g,"/").replace(/\/{2,}/g,"/")).split("/"),r=i(t),n="";r&&(n=e.shift()+"/");for(var o=0;o<e.length;)".."===e[o]?o>0&&".."!==e[o-1]?e.splice(--o,2):r?e.splice(o,1):++o:"."===e[o]?e.splice(o,1):++o;return n+e.join("/")};n.resolve=function(t,e,r){return r||(e=o(e)),i(e)?e:(r||(t=o(t)),(t=t.replace(/(?:\/|^)[^\/]+$/,"")).length?o(t+"/"+e):e)}},function(t,e,r){"use strict";t.exports=k,k.filename=null,k.defaults={keepCase:!1};var n=r(26),i=r(15),o=r(10),s=r(3),u=r(11),a=r(7),f=r(1),l=r(12),h=r(13),c=r(5),p=r(0),d=/^[1-9][0-9]*$/,y=/^-?[1-9][0-9]*$/,v=/^0[x][0-9a-fA-F]+$/,m=/^-?0[x][0-9a-fA-F]+$/,g=/^0[0-7]+$/,b=/^-?0[0-7]+$/,w=/^(?![eE])[0-9]*(?:\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/,A=/^[a-zA-Z_][a-zA-Z_0-9]*$/,O=/^(?:\.?[a-zA-Z_][a-zA-Z_0-9]*)(?:\.[a-zA-Z_][a-zA-Z_0-9]*)*$/,_=/^(?:\.[a-zA-Z_][a-zA-Z_0-9]*)+$/;function k(t,e,r){e instanceof i||(r=e,e=new i),r||(r=k.defaults);var E,j,S,T,x,R=n(t,r.alternateCommentMode||!1),B=R.next,N=R.push,P=R.peek,I=R.skip,L=R.cmnt,D=!0,U=!1,C=e,M=r.keepCase?function(t){return t}:p.camelCase;function F(t,e,r){var n=k.filename;return r||(k.filename=null),Error("illegal "+(e||"token")+" '"+t+"' ("+(n?n+", ":"")+"line "+R.line+")")}function J(){var t,e=[];do{if('"'!==(t=B())&&"'"!==t)throw F(t);e.push(B()),I(t),t=P()}while('"'===t||"'"===t);return e.join("")}function $(t){var e=B();switch(e){case"'":case'"':return N(e),J();case"true":case"TRUE":return!0;case"false":case"FALSE":return!1}try{return function(t,e){var r=1;"-"===t.charAt(0)&&(r=-1,t=t.substring(1));switch(t){case"inf":case"INF":case"Inf":return r*(1/0);case"nan":case"NAN":case"Nan":case"NaN":return NaN;case"0":return 0}if(d.test(t))return r*parseInt(t,10);if(v.test(t))return r*parseInt(t,16);if(g.test(t))return r*parseInt(t,8);if(w.test(t))return r*parseFloat(t);throw F(t,"number",e)}(e,!0)}catch(r){if(t&&O.test(e))return e;throw F(e,"value")}}function Y(t,e){var r,n;do{!e||'"'!==(r=P())&&"'"!==r?t.push([n=z(B()),I("to",!0)?z(B()):n]):t.push(J())}while(I(",",!0));I(";")}function z(t,e){switch(t){case"max":case"MAX":case"Max":return 536870911;case"0":return 0}if(!e&&"-"===t.charAt(0))throw F(t,"id");if(y.test(t))return parseInt(t,10);if(m.test(t))return parseInt(t,16);if(b.test(t))return parseInt(t,8);throw F(t,"id")}function q(){if(void 0!==E)throw F("package");if(E=B(),!O.test(E))throw F(E,"name");C=C.define(E),I(";")}function V(){var t,e=P();switch(e){case"weak":t=S||(S=[]),B();break;case"public":B();default:t=j||(j=[])}e=J(),I(";"),t.push(e)}function Z(){if(I("="),T=J(),!(U="proto3"===T)&&"proto2"!==T)throw F(T,"syntax");I(";")}function H(t,e){switch(e){case"option":return K(t,e),I(";"),!0;case"message":return function(t,e){if(!A.test(e=B()))throw F(e,"type name");var r=new o(e);W(r,function(t){if(!H(r,t))switch(t){case"map":!function(t){I("<");var e=B();if(void 0===c.mapKey[e])throw F(e,"type");I(",");var r=B();if(!O.test(r))throw F(r,"type");I(">");var n=B();if(!A.test(n))throw F(n,"name");I("=");var i=new u(M(n),z(B()),e,r);W(i,function(t){if("option"!==t)throw F(t);K(i,t),I(";")},function(){tt(i)}),t.add(i)}(r);break;case"required":case"optional":case"repeated":G(r,t);break;case"oneof":!function(t,e){if(!A.test(e=B()))throw F(e,"name");var r=new a(M(e));W(r,function(t){"option"===t?(K(r,t),I(";")):(N(t),G(r,"optional"))}),t.add(r)}(r,t);break;case"extensions":Y(r.extensions||(r.extensions=[]));break;case"reserved":Y(r.reserved||(r.reserved=[]),!0);break;default:if(!U||!O.test(t))throw F(t);N(t),G(r,"optional")}}),t.add(r)}(t,e),!0;case"enum":return function(t,e){if(!A.test(e=B()))throw F(e,"name");var r=new f(e);W(r,function(t){switch(t){case"option":K(r,t),I(";");break;case"reserved":Y(r.reserved||(r.reserved=[]),!0);break;default:!function(t,e){if(!A.test(e))throw F(e,"name");I("=");var r=z(B(),!0),n={};W(n,function(t){if("option"!==t)throw F(t);K(n,t),I(";")},function(){tt(n)}),t.add(e,r,n.comment)}(r,t)}}),t.add(r)}(t,e),!0;case"service":return function(t,e){if(!A.test(e=B()))throw F(e,"service name");var r=new l(e);W(r,function(t){if(!H(r,t)){if("rpc"!==t)throw F(t);!function(t,e){var r=e;if(!A.test(e=B()))throw F(e,"name");var n,i,o,s,u=e;I("("),I("stream",!0)&&(i=!0);if(!O.test(e=B()))throw F(e);n=e,I(")"),I("returns"),I("("),I("stream",!0)&&(s=!0);if(!O.test(e=B()))throw F(e);o=e,I(")");var a=new h(u,r,n,o,i,s);W(a,function(t){if("option"!==t)throw F(t);K(a,t),I(";")}),t.add(a)}(r,t)}}),t.add(r)}(t,e),!0;case"extend":return function(t,e){if(!O.test(e=B()))throw F(e,"reference");var r=e;W(null,function(e){switch(e){case"required":case"repeated":case"optional":G(t,e,r);break;default:if(!U||!O.test(e))throw F(e);N(e),G(t,"optional",r)}})}(t,e),!0}return!1}function W(t,e,r){var n=R.line;if(t&&(t.comment=L(),t.filename=k.filename),I("{",!0)){for(var i;"}"!==(i=B());)e(i);I(";",!0)}else r&&r(),I(";"),t&&"string"!=typeof t.comment&&(t.comment=L(n))}function G(t,e,r){var n=B();if("group"!==n){if(!O.test(n))throw F(n,"type");var i=B();if(!A.test(i))throw F(i,"name");i=M(i),I("=");var u=new s(i,z(B()),n,e,r);W(u,function(t){if("option"!==t)throw F(t);K(u,t),I(";")},function(){tt(u)}),t.add(u),U||!u.repeated||void 0===c.packed[n]&&void 0!==c.basic[n]||u.setOption("packed",!1,!0)}else!function(t,e){var r=B();if(!A.test(r))throw F(r,"name");var n=p.lcFirst(r);r===n&&(r=p.ucFirst(r));I("=");var i=z(B()),u=new o(r);u.group=!0;var a=new s(n,i,r,e);a.filename=k.filename,W(u,function(t){switch(t){case"option":K(u,t),I(";");break;case"required":case"optional":case"repeated":G(u,t);break;default:throw F(t)}}),t.add(u).add(a)}(t,e)}function K(t,e){var r=I("(",!0);if(!O.test(e=B()))throw F(e,"name");var n=e;r&&(I(")"),n="("+n+")",e=P(),_.test(e)&&(n+=e,B())),I("="),X(t,n)}function X(t,e){if(I("{",!0))do{if(!A.test(x=B()))throw F(x,"name");"{"===P()?X(t,e+"."+x):(I(":"),"{"===P()?X(t,e+"."+x):Q(t,e+"."+x,$(!0))),I(",",!0)}while(!I("}",!0));else Q(t,e,$(!0))}function Q(t,e,r){t.setOption&&t.setOption(e,r)}function tt(t){if(I("[",!0)){do{K(t,"option")}while(I(",",!0));I("]")}return t}for(;null!==(x=B());)switch(x){case"package":if(!D)throw F(x);q();break;case"import":if(!D)throw F(x);V();break;case"syntax":if(!D)throw F(x);Z();break;case"option":if(!D)throw F(x);K(C,x),I(";");break;default:if(H(C,x)){D=!1;continue}throw F(x)}return k.filename=null,{package:E,imports:j,weakImports:S,syntax:T,root:e}}},function(t,e,r){"use strict";t.exports=o;var n,i=/\/|\./;function o(t,e){i.test(t)||(t="google/protobuf/"+t+".proto",e={nested:{google:{nested:{protobuf:{nested:e}}}}}),o[t]=e}o("any",{Any:{fields:{type_url:{type:"string",id:1},value:{type:"bytes",id:2}}}}),o("duration",{Duration:n={fields:{seconds:{type:"int64",id:1},nanos:{type:"int32",id:2}}}}),o("timestamp",{Timestamp:n}),o("empty",{Empty:{fields:{}}}),o("struct",{Struct:{fields:{fields:{keyType:"string",type:"Value",id:1}}},Value:{oneofs:{kind:{oneof:["nullValue","numberValue","stringValue","boolValue","structValue","listValue"]}},fields:{nullValue:{type:"NullValue",id:1},numberValue:{type:"double",id:2},stringValue:{type:"string",id:3},boolValue:{type:"bool",id:4},structValue:{type:"Struct",id:5},listValue:{type:"ListValue",id:6}}},NullValue:{values:{NULL_VALUE:0}},ListValue:{fields:{values:{rule:"repeated",type:"Value",id:1}}}}),o("wrappers",{DoubleValue:{fields:{value:{type:"double",id:1}}},FloatValue:{fields:{value:{type:"float",id:1}}},Int64Value:{fields:{value:{type:"int64",id:1}}},UInt64Value:{fields:{value:{type:"uint64",id:1}}},Int32Value:{fields:{value:{type:"int32",id:1}}},UInt32Value:{fields:{value:{type:"uint32",id:1}}},BoolValue:{fields:{value:{type:"bool",id:1}}},StringValue:{fields:{value:{type:"string",id:1}}},BytesValue:{fields:{value:{type:"bytes",id:1}}}}),o("field_mask",{FieldMask:{fields:{paths:{rule:"repeated",type:"string",id:1}}}}),o.get=function(t){return o[t]||null}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,